<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker虚拟化服务</title>
    <url>/2021/08/10/18-35-35/</url>
    <content><![CDATA[<p><strong>docker服务的一些命令，或者以后学的其他相关知识</strong></p>
<span id="more"></span>

<p><strong>docker command [arg…]</strong><br>其中, command为docker命令的子命令,常用的子命令如下:</p>
<table>
<thead>
<tr>
<th>子命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>attach</td>
<td>将本地的标准输入、输出以及错误附加到一个容器。</td>
</tr>
<tr>
<td>build</td>
<td>从 Dockerfile创建一个镜像。</td>
</tr>
<tr>
<td>commit</td>
<td>将容器进行修改,然后提交成为新的镜像。</td>
</tr>
<tr>
<td>cp</td>
<td>在容器和本地文件系统之间复制文件。</td>
</tr>
<tr>
<td>create</td>
<td>创建新的容器。</td>
</tr>
<tr>
<td>diff</td>
<td>检查容器里面的文件系统的改变。</td>
</tr>
<tr>
<td>events</td>
<td>从服务器获取实时事件。</td>
</tr>
<tr>
<td>exec</td>
<td>在容器中执行命令。</td>
</tr>
<tr>
<td>export</td>
<td>将容器的文件系统导出为tar归档文件。</td>
</tr>
<tr>
<td>history</td>
<td>列出镜像的历史记录。</td>
</tr>
<tr>
<td>images</td>
<td>列出本地下载的镜像。</td>
</tr>
<tr>
<td>import</td>
<td>从归档文件中创建镜像。</td>
</tr>
<tr>
<td>info</td>
<td>显示 Docker系统信息,包括镜像和容器数量</td>
</tr>
<tr>
<td>inspect</td>
<td>获取镜像或者容器的元数据。</td>
</tr>
<tr>
<td>kill</td>
<td>终止运行中的容器。</td>
</tr>
<tr>
<td>load</td>
<td>从归档文件中加载镜像。</td>
</tr>
<tr>
<td>login</td>
<td>登录到 Docker仓库。</td>
</tr>
<tr>
<td>logout</td>
<td>从 Docker仓库中注销。</td>
</tr>
<tr>
<td>logs</td>
<td>获取容器的日志。</td>
</tr>
<tr>
<td>pause</td>
<td>暂停容器中的进程。</td>
</tr>
<tr>
<td>port</td>
<td>列出指定容器的端口映射。</td>
</tr>
<tr>
<td>ps</td>
<td>列出容器。</td>
</tr>
<tr>
<td>pull</td>
<td>从镜像仓库中下载或者更新指定镜像。</td>
</tr>
<tr>
<td>push</td>
<td>将本地的镜像上传到镜像仓库,要先登录到镜像仓库。</td>
</tr>
<tr>
<td>rename</td>
<td>重命名容器。</td>
</tr>
<tr>
<td>restart</td>
<td>重启容器。</td>
</tr>
<tr>
<td>rm</td>
<td>删除容器。</td>
</tr>
<tr>
<td>rmi</td>
<td>删除本地的一个或者多个镜像。</td>
</tr>
<tr>
<td>run</td>
<td>创建一个新的容器并运行一个命令。</td>
</tr>
<tr>
<td>save</td>
<td>将指定镜像保存成tar归档文件。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS域名服务</title>
    <url>/2021/08/10/18-31-51/</url>
    <content><![CDATA[<p><strong>未来应该会专门整一下</strong></p>
<span id="more"></span>

<h1 id="DNS域名服务"><a href="#DNS域名服务" class="headerlink" title="DNS域名服务"></a>DNS域名服务</h1><p>分为IPV4和IPV6，其中IPV4的地址已分配完</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>​        .com 商业公司<br>​        .net 网络服务商<br>​        .org 非营利组织<br>​        .edu 美国教育机构<br>​        .gov 美国政府机构<br>​        .cn 中国顶级域名<br>​        .jp 日本顶级域名<br>​    IPV4 三十二位二进制，通过原点分割为四组<br>​    IPV6 三十二位十六进制，通过:分割为八组</p>
<h1 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h1><p>BIND是目前使用最多的DNS服务器软件，其配置文件为<br>db.0        网络地址“0.*”的反向解析文件<br>db.127        localhost反向区文件,用于将本地回送IP地址(127.0.0.1)转换为名字 localhost<br>db.255        广播地址“255.*”的反向解析文件<br>db.empty    RFC1918空区反向解析文件<br>db.local    localhost正向区文件,用于将名字 localhost转换为本地环路IP地址127.0.0.1<br>db.root        根服务器指向文件,由 Internet NIC创建和维护,无须修改,但是需要定期更新<br>named.conf    BIND的主要配置文件,用于定义当前区域名服务器负责维护的域名解析信息<br>named.conf.local当前域名服务器负责维护的所有区的信息<br>namedconf.options定义当前域名服务器主配置文件的全局选项<br>rndc.key    包含 named守护进程使用的认证信息<br>zones.files    定义域名服务器负责管理与维护的所有正向区配置文件与反向区配置文件,是当前域名服务器提供的权威域名解析数据</p>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Icleandar语法</title>
    <url>/2021/08/09/19-24-54/</url>
    <content><![CDATA[<h1 id="Iclendar"><a href="#Iclendar" class="headerlink" title="Iclendar"></a>Iclendar</h1><p><strong>第一次接触这个还是想手机导入课程表来着，然后发现真有一门这样的语言，也就是Ruby下的Iclendar,一起看看吧</strong></p>
<span id="more"></span>

<p>BEGIN:VCALENDAR #日历开始 </p>
<p>PRODID:-//Google Inc//Google Calendar 70.9054//EN #软件信息，这个不是那么严格，可以随意<br>VERSION:2.0 #遵循的 iCalendar 版本号<br>CALSCALE:GREGORIAN #历法：公历<br>METHOD:PUBLISH #方法：公开 也可以是 REQUEST 等用于日历间的信息沟通方法<br> X-WR-CALNAME:<a href="mailto:&#121;&#117;&#x6c;&#x61;&#x6e;&#103;&#x67;&#x6f;&#110;&#x67;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#121;&#117;&#x6c;&#x61;&#x6e;&#103;&#x67;&#x6f;&#110;&#x67;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a> #这是一个通用扩展属性 表示本日历的名称<br>X-WR-TIMEZONE:Asia/Shanghai #通用扩展属性，表示时区<br>BEGIN:VEVENT #事件开始<br>DTSTART:20090305T112200Z #开始的日期时间<br>DTEND:20090305T122200Z #结束的日期时间<br>DTSTAMP:20140613T033914Z #有Method属性时表示 实例创建时间，没有时表示最后修订的日期时间 UID:<a href="mailto:&#57;&#114;&#53;&#x70;&#55;&#x71;&#55;&#x38;&#117;&#x6f;&#x68;&#x6d;&#107;&#49;&#98;&#x62;&#116;&#x30;&#105;&#x65;&#x64;&#111;&#x66;&#57;&#x73;&#x34;&#64;&#x67;&#x6f;&#111;&#103;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#57;&#114;&#53;&#x70;&#55;&#x71;&#55;&#x38;&#117;&#x6f;&#x68;&#x6d;&#107;&#49;&#98;&#x62;&#116;&#x30;&#105;&#x65;&#x64;&#111;&#x66;&#57;&#x73;&#x34;&#64;&#x67;&#x6f;&#111;&#103;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a> #UID<br>CLASS:PRIVATE #保密类型<br>CREATED:20090305T092105Z #创建的日期时间<br>DESCRIPTION:test #描述<br> LAST-MODIFIED:20090305T092130Z #最后修改日期时间<br>LOCATION:test #地址<br>SEQUENCE:1 #排列序号<br>STATUS:CONFIRMED #状态 TENTATIVE 不确定 CONFIRMED 确认 CANCELLED 取消<br>SUMMARY: test #简介 一般是标题<br>TRANSP:OPAQUE #对于忙闲查询是否透明 OPAQUE 不透明 TRANSPARENT 透明<br> END:VEVENT #事件结束<br>END:VCALENDAR #日历结束</p>
]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>bash基本语法</title>
    <url>/2021/08/10/18-45-49/</url>
    <content><![CDATA[<p><strong>一门直面系统的编程语言</strong></p>
<span id="more"></span>

<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash           选定当前脚本的解释器</span></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="variable">$#</span>  传递给脚本的参数的个数</span><br><span class="line">$*  以一个字符串的形式接受所有的位置参数，该变量可以接受超过九个位置的位置参数</span><br><span class="line">$$  获取脚本运行进程的ID</span><br><span class="line">$!  后台运行的最后一个进程的ID</span><br><span class="line"><span class="variable">$@</span>  与$*基本相同，但被双引号包含时会将各个参数值分开</span><br><span class="line">$?  返回最后命令的退出状态。0表示没有错误，非零值表明有错误</span><br><span class="line"><span class="variable">$0</span>  表示当前脚本文件名</span><br><span class="line"><span class="variable">$n</span>  可以获取第n个参数的值</span><br></pre></td></tr></table></figure>

<p><strong>常见内置命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.  执行当前进程环境中的序</span><br><span class="line">:  空操作，返回退出状态0</span><br><span class="line"><span class="built_in">alias</span>  显示和创建已有命令的别名</span><br><span class="line"><span class="built_in">bg</span>  把指定的作业放在后台运行</span><br><span class="line"><span class="built_in">break</span>  跳出循环</span><br><span class="line"><span class="built_in">cd</span>  改变目录，若不带参数，则回到用户主目录，带参数则切换到参数指定的目录</span><br><span class="line"><span class="built_in">continue</span>  循环控制命令</span><br><span class="line"><span class="built_in">declare</span>  显示所有变量，或用可选属性声明变量</span><br><span class="line"><span class="built_in">echo</span>  显式指定内容并换行 如果在循环中 则上层循环的数值只输出一次，本层循环所在的行不换行</span><br><span class="line"><span class="built_in">eval</span>  将参数作为命令执行</span><br><span class="line"><span class="built_in">exec</span>  运行命令替换掉当前shell</span><br><span class="line"><span class="built_in">exit</span>  以指定的状态码退出shell</span><br><span class="line"><span class="built_in">export</span>  使变量可被子shell识别</span><br><span class="line"><span class="built_in">fg</span>  把后台作业放到前台</span><br><span class="line"><span class="built_in">history</span>  显示带行号的命令历史列表</span><br><span class="line"><span class="built_in">jobs</span>  显示放到后台的作业</span><br><span class="line"><span class="built_in">kill</span> 向指定进程发送信号</span><br><span class="line"><span class="built_in">let</span>  用来计算算术表达式的值，并把算术计算的结果赋给变量</span><br><span class="line"><span class="built_in">local</span>  用在函数中，把变量的作用域限制在函数内部</span><br><span class="line"><span class="built_in">logout</span>  退出登录shell</span><br><span class="line"><span class="built_in">pwd</span>  打印出当前的工作目录</span><br><span class="line"><span class="built_in">read</span>  从标准输入读取一行，保存到指定变量中</span><br><span class="line"><span class="built_in">return</span>  从函数中退出，并返回退出状态值</span><br><span class="line"><span class="built_in">set</span>  设置选项和位置参量</span><br><span class="line"><span class="built_in">shift</span>  将位置参量左移</span><br><span class="line"><span class="built_in">suspend</span>  终止当前shell的运行</span><br><span class="line"><span class="built_in">test</span>   检查文件类型，并计算条件表达式</span><br><span class="line"><span class="built_in">trap</span>  捕获信号</span><br><span class="line"><span class="built_in">type</span>  显示命令类型</span><br><span class="line"><span class="built_in">ulimit</span>  显示或设置进程可用资源的最大限额</span><br><span class="line"><span class="built_in">umask</span>  用户文件关于属主，属组和其他用户的创建模式掩码</span><br><span class="line"><span class="built_in">unalias</span>  取消所有的命令别名设置</span><br><span class="line"><span class="built_in">unset</span>  取消指定变量的值或函数的定义</span><br><span class="line"><span class="built_in">wait</span>  等待指定的后台进程结束，并报告它的结束状态</span><br></pre></td></tr></table></figure>

<p><strong>常用内部变量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行参数或者位置参数的数量，通过$#获取</span></span><br><span class="line">-  传递给shell脚本的执行标志</span><br><span class="line">?  最近一次执行的命令或者shell脚本的退出状态码</span><br><span class="line">$  shell脚本的进程ID</span><br><span class="line">!  最后一次运行的后台进程的ID</span><br><span class="line">@  所有位置参数的值，只是每个参数的值都是单独的</span><br><span class="line">*  所有位置参数的值</span><br><span class="line">LINENO  shell脚本中当前执行的命令的行号，仅在调试时有效</span><br><span class="line">OLDPWD  使用<span class="built_in">cd</span>命令切换到新目录之前所在的目录</span><br><span class="line">PPID  当前进程的父进程的ID</span><br><span class="line">PWD  当前的工作目录</span><br><span class="line">RANDOM  随机数</span><br><span class="line">SECONDS 脚本已执行的秒数</span><br></pre></td></tr></table></figure>

<p><strong>常用环境变量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COLUMNS  定义终端窗口的宽度</span><br><span class="line">HOME  用户主目录的路径 </span><br><span class="line">LANG  设置用户语言环境</span><br><span class="line">LC_ALL  统一设置LC_*系列变量的值</span><br><span class="line">LC_CTYPE  设置语言环境的字符集</span><br><span class="line">LC_MESSAGES  设置系统提示信息的语言</span><br><span class="line">LC_NUMBERIC  设置本地化数值的显示格式</span><br><span class="line">PATH  指定命令的查找路径以及顺序</span><br><span class="line">SHELL  shell命令文件的路径</span><br></pre></td></tr></table></figure>

<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x=100  直接定了一个变量并赋值为100</span><br><span class="line"><span class="built_in">typeset</span> 或者 <span class="built_in">declare</span> 声明</span><br><span class="line">	-i 声明变量为整数类型</span><br><span class="line">	-a 声明变量为数组</span><br><span class="line">	-f 声明变量为函数</span><br><span class="line">	-r 声明变量为只读变量</span><br><span class="line">	shell 默认将未声明的所有变量视为字符串</span><br><span class="line">	变量不可以数字作为开头</span><br><span class="line"><span class="built_in">unset</span> 销毁变量</span><br></pre></td></tr></table></figure>

<h1 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h1><p>变量赋值时记得等号两边不要留有空格,在一个脚本中定义的变量只能在当前脚本使用，若要在其他脚本也可使用，可用export命令导出到shell环境中<br><code>read</code> 读取键盘键入时，会将接收的数据赋给指定的变量</p>
<h1 id="变量的引用和替换"><a href="#变量的引用和替换" class="headerlink" title="变量的引用和替换"></a>变量的引用和替换</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在变量名前面加上一个$ 就好</span><br><span class="line"><span class="variable">$&#123;var&#125;</span> 防止和其他变量连写时无法识别</span><br><span class="line">“<span class="variable">$var</span>”和“&#123;<span class="variable">$var</span>&#125;”用以处理参数中含有空格的情况</span><br><span class="line">间接引用一个变量的值</span><br><span class="line">message=hello</span><br><span class="line">hello=<span class="string">&quot;Good Monring&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!message&#125;</span>会输出Good Monring</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;message&#125;</span>会输出</span><br><span class="line">此外*等通配符仍然可以使用</span><br></pre></td></tr></table></figure>

<h1 id="特殊变量替换"><a href="#特殊变量替换" class="headerlink" title="特殊变量替换"></a>特殊变量替换</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;var:-value&#125;</span> 如果变量未赋值或者设为NULL，使用value代替变量，否则正常使用变量替换，此过程中变量的值不发生改变</span><br><span class="line"><span class="variable">$&#123;var:=value&#125;</span> 如果变量未赋值或者设为NULL，将value赋给变量，并进行替换，变量值改变</span><br><span class="line"><span class="variable">$&#123;var:+value&#125;</span> 如果变量未赋值或者设为NULL，使用null代替变量，否则正常使用变量替换，此过程中变量的值不发生改变</span><br><span class="line"><span class="variable">$&#123;var:?value&#125;</span> 如果变量未赋值或者设为NULL，则用value作为错误提示信息，如果省略了value，则输出默认的错误提示信息，表示var未被设置，终止脚本执行，否则正常使用变量替换，此过程中变量的值不发生改变</span><br></pre></td></tr></table></figure>

<h1 id="单引号双引号"><a href="#单引号双引号" class="headerlink" title="单引号双引号"></a>单引号双引号</h1><p>对变量进行字符串赋值时，如有空格记得加单引号或者双引号其中</p>
<p>单引号会忽略所有的shell特殊字符,</p>
<p>而双引号会忽略大部分，但不包括$ \和`</p>
<h1 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h1><p>shell支持将命令输出的结果赋给某个变量，表现为两种形式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">today=`date`</span><br><span class="line">files=$(ls)</span><br><span class="line"><span class="comment"># 命令替换可以作为另一个命令的输入</span></span><br><span class="line">rm `ls *.c`   删除当前目录中的所有c文件</span><br></pre></td></tr></table></figure>

<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> expression </span><br><span class="line">	++,--  变量自加和变量自减</span><br><span class="line">	-,+  表示正负号</span><br><span class="line">	*,/,% 乘除取余</span><br><span class="line">	+,- 加减</span><br><span class="line">	&lt;&lt;,&gt;&gt;  按位左移，按位右移</span><br><span class="line">	&lt;=,&gt;=,&lt;,&gt; 比较运算符</span><br><span class="line">	&amp; 按位与</span><br><span class="line">	^ 按位异或</span><br><span class="line">	| 按位或</span><br><span class="line">	&amp;&amp; 布尔与运算</span><br><span class="line">	|| 布尔或运算</span><br><span class="line">	expr?expr1:expr2 前者为真则执行表达式1，反之执行表达式2</span><br><span class="line">	=,*=,%=,+=,-=,&lt;&lt;=,&gt;&gt;=,&amp;=,^=,|= 赋值</span><br><span class="line">expr expression 和<span class="built_in">let</span>基本相同</span><br><span class="line">$((expr))</span><br><span class="line">$[expr]</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -a nums=(1,2,3,4,5)</span><br><span class="line"><span class="built_in">unset</span> nums销毁数组</span><br><span class="line"><span class="built_in">unset</span> nums[1] 注销某个元素</span><br><span class="line"><span class="comment"># 同时支持多行遇见括号即终止</span></span><br><span class="line">array([0]=1,[1]=2,[2]=3)</span><br><span class="line"><span class="comment"># 将含有多个空格字符串转换成一个数组</span></span><br><span class="line">nums=<span class="string">&quot;1 2 3 4 5&quot;</span></span><br><span class="line">array=(<span class="variable">$nums</span>)</span><br><span class="line"><span class="comment"># 获取数组长度</span></span><br><span class="line"><span class="variable">$&#123;#array[@]&#125;</span> 或 <span class="variable">$&#123;#array[*]&#125;</span></span><br><span class="line"><span class="variable">$&#123;#array[9]&#125;</span> 数组中第九个元素的位数</span><br><span class="line"><span class="built_in">unset</span> 删除数组中某个元素，或者整个数组，删除后直接为空，输出不了值</span><br></pre></td></tr></table></figure>

<h2 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h2><p><strong>将数组中一部分元素提取出来组成一个新数组</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]:m:n&#125;</span> 将数组从第m个开始向后提取n个元素</span><br><span class="line"><span class="variable">$&#123;array[@]:m&#125;</span> 表示取从m开始一直到数组结束的所有元素</span><br><span class="line"><span class="variable">$&#123;array[@]::n&#125;</span> 表示从索引为0的元素开始提取n个元素</span><br><span class="line"><span class="variable">$&#123;array[@]:m&#125;</span> 若m为负数，表示从尾部取向前取m个元素</span><br></pre></td></tr></table></figure>

<h2 id="数组替换"><a href="#数组替换" class="headerlink" title="数组替换"></a>数组替换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]/from/to&#125;</span>  表示将数组中对应的from字符串转换为to字符串,只替换一次</span><br><span class="line"><span class="variable">$&#123;array[@]//from/to&#125;</span>  表示将数组中对应的所有from字串全部替换为to</span><br><span class="line"><span class="variable">$&#123;array[@]/from/&#125;</span> 表示将数组中对应的from字符串转换为空字符串,只替换一次</span><br><span class="line"><span class="variable">$&#123;array[@]//from/&#125;</span> 表示将数组中对应的所有from字串全部替换为空字符串</span><br></pre></td></tr></table></figure>

<h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> condition 或者[ condition ]或者[[ condition ]]   第二种注意空格</span><br><span class="line">	在shell中0表示布尔值为真，1或其他值表示布尔值为假</span><br><span class="line">	-b 文件存在且为块文件时为真</span><br><span class="line">	-c 文件存在且为字符文件时为真</span><br><span class="line">	-d 路径存在，且为目录时为真</span><br><span class="line">	-e 当指定文件或者目录存在时为真</span><br><span class="line">	-f 当指定文件存在且为常规文件时为真</span><br><span class="line">	-g 当指定的文件或目录存在并且设置了SGID位时为真</span><br><span class="line">	-h 当指定的文件存在且为符号链接时为真</span><br><span class="line">	-k 当指定的文件或目录存在且设置了粘滞位时为真</span><br><span class="line">	-p 当指定文件存在且为命名管道时为真</span><br><span class="line">	-r 当指定文件或目录存在，其可读时为真</span><br><span class="line">	-s 当指定的文件存在，其大于零时为真</span><br><span class="line">	-S 当指定的文件存在，其为套接字时为真</span><br><span class="line">	-t 当指定文件是与终端设备相关联的文件描述符时为真</span><br><span class="line">	-u 当指定的文件或目录存在并且设置了SUID位时为真</span><br><span class="line">	-w 当指定文件或目录存在，其可写时为真</span><br><span class="line">	-x 当指定文件或目录存在，其可执行时为真</span><br><span class="line">	-O 当指定文件或目录存在，并且被当前进程的有效用户ID的用户拥有时为真</span><br><span class="line">	-G 当指定文件或目录存在，并且属于当前进程的有效用户ID的用户的用户组时为真</span><br><span class="line">	file1 nt file2     file1比file2新时为真</span><br><span class="line">	file1 ot file2     file1比file2旧时为真</span><br><span class="line">	file1 ef file2     file1和file2为同一文件的硬连接时为真</span><br><span class="line">	简单示例</span><br><span class="line">	[ -b /dev/sda ];<span class="built_in">echo</span>?     最终输出0表示设备为块文件</span><br></pre></td></tr></table></figure>

<h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;  按ASCII码顺序，前面的字符串小于后面的字符串时则为真</span><br><span class="line">&gt;  按ASCII码顺序，前面的字符串大于后面的字符串时则为真</span><br><span class="line">== 字符串相等则为真</span><br><span class="line">=  同==</span><br><span class="line">=~ 后面的字符串为前面字符串的子串时为真</span><br><span class="line">!= 字符串不相等时为真</span><br><span class="line">-z 字符串为空时则为真</span><br><span class="line">-n 字符串非空则为真</span><br></pre></td></tr></table></figure>

<h2 id="整数值测试"><a href="#整数值测试" class="headerlink" title="整数值测试"></a>整数值测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-eq 前后两个数值相等则为真</span><br><span class="line">-ge 前者大于后者或等于后者则为真</span><br><span class="line">-gt 前者大于后者则为真</span><br><span class="line">-le 前者小于或等于后者则为真</span><br><span class="line">-lt 前者小于后者则为真</span><br><span class="line">-ne 前后数值不相等则为真</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a 逻辑与,所连接的两个条件必须都为真时,整个表达式才为真。在[]表达式中使用</span><br><span class="line">-o 逻辑或,所连接的两个条件只要一个为真整个表达式就为真。在[]表达式中使用</span><br><span class="line">!  逻辑非,当表达式中的条件测试为假时,整个表达式的值为真</span><br><span class="line">&amp;&amp; 逻辑与,当且仅当左边的条件表达式为真时,右边的表达式才会被计算。所有表达式都为真,则整个表达式为真</span><br><span class="line">|| 逻辑或,当且仅当左边的条件表达式为假时,右侧的表达式才会被计算。只要有一个表达式为真,则整个表达式为真</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [条件语句];<span class="keyword">then</span></span><br><span class="line">	执行语句</span><br><span class="line"><span class="keyword">elif</span> [条件语句];<span class="keyword">then</span></span><br><span class="line">	执行语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	执行语句</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [条件语句]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	执行语句</span><br><span class="line"><span class="keyword">elif</span> [条件语句]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">		执行语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	执行语句</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;var&quot;</span> <span class="keyword">in</span></span><br><span class="line">	<span class="string">&quot;var1&quot;</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;nihao1&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="string">&quot;var2&quot;</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;nihao2&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="string">&quot;var3&quot;</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;nihao3&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#都不满足则执行*号后的语句</span></span><br><span class="line"><span class="comment">#支持某些特殊匹配模式 如[0-9]或者[a-z]等，还支持|连接，比如:</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$key</span> <span class="keyword">in</span></span><br><span class="line">	[a-z] | [A-Z] )</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;a letter&quot;</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 2 3 4 5 6 7 8 9)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((var=1;var&lt;=10;var++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="连续数字"><a href="#连续数字" class="headerlink" title="连续数字"></a>连续数字</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">seq 10 产生一到十等十个连续数字</span><br><span class="line">seq 2 10 产生二到十等九个连续数字</span><br><span class="line">&#123;1..10&#125; 产生一到十之间的十个连续数字</span><br></pre></td></tr></table></figure>

<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">	command1</span><br><span class="line">	command2</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">until expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	command1</span><br><span class="line">	command2</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select是个无限循环,用户输入被保存在内置变量REPLY中</span><br><span class="line"><span class="built_in">declare</span> -a serial</span><br><span class="line">serial=(1 2 3 4)</span><br><span class="line">select var <span class="keyword">in</span> <span class="string">&quot;apple&quot;</span> <span class="string">&quot;orange&quot;</span> <span class="string">&quot;grape&quot;</span> <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> ! <span class="built_in">echo</span> <span class="variable">$&#123;serial[@]&#125;</span> | grep -q <span class="variable">$REPLY</span>; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;please enter [1-4]&quot;</span></span><br><span class="line">		<span class="built_in">continue</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;your answer is <span class="variable">$var</span>&quot;</span> <span class="comment">#  $var 会在&quot;apple&quot; &quot;orange&quot; &quot;grape&quot; &quot;banana&quot;中取值</span></span><br><span class="line">	<span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#常与case语句连用</span></span><br><span class="line"><span class="comment">#这里的var表示选择的变量值</span></span><br></pre></td></tr></table></figure>

<h2 id="continue和break语句"><a href="#continue和break语句" class="headerlink" title="continue和break语句"></a>continue和break语句</h2><pre><code>和其它语言中的功能相似
多层循环时可以用break指定跳出循环的层数
比如 break 2 意为跳出两层循环
</code></pre>
<h2 id="捕获信号"><a href="#捕获信号" class="headerlink" title="捕获信号"></a>捕获信号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">trap</span> [option] [[arg] singal_spec ...]</span><br><span class="line">	arg为捕获信号后将要执行的命令，若不指定表示不执行任何操作</span><br><span class="line">	signal_spec 表示需要捕获的信号</span><br><span class="line">	-l 列出所有的信号及其编号</span><br><span class="line">	-p 列出捕获信号后执行的命令或函数</span><br><span class="line">屏蔽ctrl+c键</span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;&quot;</span> 2 捕获后不执行任何操作</span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;handler&quot;</span> 2    指定信号2的处理函数为handler,可在下方定义该函数</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>ASM基础</title>
    <url>/2021/08/09/18-36-16/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>CALL</td>
<td>函数</td>
</tr>
<tr>
<td>RETN</td>
<td>返回值RET</td>
</tr>
<tr>
<td>MOV</td>
<td>赋值</td>
</tr>
<tr>
<td>LEA</td>
<td>取地址和*类似</td>
</tr>
<tr>
<td>ADD</td>
<td>加法</td>
</tr>
<tr>
<td>SUB</td>
<td>减法</td>
</tr>
<tr>
<td>PUSH</td>
<td>入栈，输入参数</td>
</tr>
<tr>
<td>POP</td>
<td>出栈，释放变量</td>
</tr>
<tr>
<td>CMP</td>
<td>比较</td>
</tr>
<tr>
<td>TEST</td>
<td>比较</td>
</tr>
<tr>
<td>JE</td>
<td>相等就跳</td>
</tr>
<tr>
<td>JNE</td>
<td>不相等就跳</td>
</tr>
<tr>
<td>JB</td>
<td>低于就跳</td>
</tr>
<tr>
<td>JNB</td>
<td>不低于就跳</td>
</tr>
<tr>
<td>JBE</td>
<td>不高于就跳</td>
</tr>
<tr>
<td>JA</td>
<td>高于就跳</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>ASM</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse快捷键大全</title>
    <url>/2021/08/10/09-36-50/</url>
    <content><![CDATA[<p><strong>一些实用的快捷键</strong></p>
<span id="more"></span>


<table>
<thead>
<tr>
<th>编辑类快捷键</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+1</td>
<td>快速修复（最经典的快捷键，可以解决很多问题，比如 import 类、try catch 包围等）</td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>格式化当前代码</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>添加类的 import 导入</td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>组织类的 import 导入（既有 Ctrl+Shift+M 的作用，又可以去除没用的导入，一般用这个导入包）</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>重做（与撤销 Ctrl+Z 相反）</td>
</tr>
<tr>
<td>Alt+/</td>
<td>内容辅助（用户编辑的好帮手，省了很多次键盘敲打，太常用了）</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>删除当前行或者多行（不用为删除一行而按那么多次的删除键）</td>
</tr>
<tr>
<td>Alt+↓</td>
<td>当前行和下面一行交互位置（特别实用，可以省去先剪切，再粘贴了）</td>
</tr>
<tr>
<td>Alt+↑</td>
<td>当前行和上面一行交互位置（同上）</td>
</tr>
<tr>
<td>Ctrl+Alt+↓</td>
<td>复制当前行到下一行</td>
</tr>
<tr>
<td>Ctrl+Alt+↑</td>
<td>复制当前行到上一行</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置，不一定是最后）</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释当前行，再按则取消注释</td>
</tr>
<tr>
<td><strong>选择类快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>Alt+Shift+↑</td>
<td>选择封装元素</td>
</tr>
<tr>
<td>Alt+Shift+←</td>
<td>选择上一个元素</td>
</tr>
<tr>
<td>Alt+Shift+→</td>
<td>选择下一个元素</td>
</tr>
<tr>
<td>Shift+←</td>
<td>从光标处开始往左选择字符</td>
</tr>
<tr>
<td>Shift+→</td>
<td>从光标处开始往右选择字符</td>
</tr>
<tr>
<td>Ctrl+Shift+←</td>
<td>选中光标左边的单词</td>
</tr>
<tr>
<td>Ctrl+Shift+→</td>
<td>选中光标右边的单词</td>
</tr>
<tr>
<td><strong>移动类快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>Ctrl+←</td>
<td>光标移到左边单词的开头，相当于 vim 的 b</td>
</tr>
<tr>
<td>Ctrl+→</td>
<td>光标移到右边单词的末尾，相当于 vim 的 e</td>
</tr>
<tr>
<td><strong>搜索类快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>Ctrl+K</td>
<td>参照选中的 Word 快速定位到下一个（如果没有选中 word，则搜索上一次使用搜索的 word）</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>参照选中的 Word 快速定位到上一个</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td>正向增量查找（按下 Ctrl+J 后，你所输入的每个字母编辑器都提供快速匹配定位到某个单词，如果没有，则在状态栏中显示没有找到了，查一个单词时，特别实用，要退出这个模式，按 escape 键）</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>反向增量查找（和上条相同，只不过是从后往前查）</td>
</tr>
<tr>
<td>Ctrl+Shift+U</td>
<td>列出所有包含字符串的行</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>打开搜索对话框</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>工作区中的声明</td>
</tr>
<tr>
<td>Ctrl+Shift+G</td>
<td>工作区中的引用</td>
</tr>
<tr>
<td><strong>导航类快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>搜索类（包括工程和关联的第三 jar 包）</td>
</tr>
<tr>
<td>Ctrl+Shift+R</td>
<td>搜索工程中的文件</td>
</tr>
<tr>
<td>Ctrl+E</td>
<td>快速显示当前 Editer 的下拉列表（如果当前页面没有显示的用黑体表示）</td>
</tr>
<tr>
<td>F4</td>
<td>打开类型层次结构</td>
</tr>
<tr>
<td>F3</td>
<td>跳转到声明处</td>
</tr>
<tr>
<td>Alt+←</td>
<td>前一个编辑的页面</td>
</tr>
<tr>
<td>Alt+→</td>
<td>下一个编辑的页面（当然是针对上面那条来说了）</td>
</tr>
<tr>
<td>Ctrl+PageUp/PageDown</td>
<td>在编辑器中，切换已经打开的文件</td>
</tr>
<tr>
<td><strong>调试类快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>F5</td>
<td>单步跳入</td>
</tr>
<tr>
<td>F6</td>
<td>单步跳过</td>
</tr>
<tr>
<td>F7</td>
<td>单步返回</td>
</tr>
<tr>
<td>F8</td>
<td>继续</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>显示变量的值</td>
</tr>
<tr>
<td>Ctrl+Shift+B</td>
<td>在当前行设置或者去掉断点</td>
</tr>
<tr>
<td>Ctrl+R</td>
<td>运行至行（超好用，可以节省好多的断点）</td>
</tr>
<tr>
<td>重构（一般重构的快捷键都是 Alt+Shift 开头的）类快捷键</td>
<td></td>
</tr>
<tr>
<td>Alt+Shift+R</td>
<td>重命名方法名、属性或者变量名 （尤其是变量和类的 Rename，比手工方法能节省很多劳动力）</td>
</tr>
<tr>
<td>Alt+Shift+M</td>
<td>把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了，尤其是对一大堆泥团代码有用）</td>
</tr>
<tr>
<td>Alt+Shift+C</td>
<td>修改函数结构（比较实用，有 N 个函数调用了这个方法，修改一次搞定）</td>
</tr>
<tr>
<td>Alt+Shift+L</td>
<td>抽取本地变量（可以直接把一些魔法数字和字符串抽取成一个变量，尤其是多处调用的时候）</td>
</tr>
<tr>
<td>Alt+Shift+F</td>
<td>把 Class 中的 local 变量变为 field 变量 （比较实用的功能）</td>
</tr>
<tr>
<td>Alt+Shift+I</td>
<td>合并变量</td>
</tr>
<tr>
<td>Alt+Shift+V</td>
<td>移动函数和变量（不常用）</td>
</tr>
<tr>
<td>Alt+Shift+Z</td>
<td>撤销（重构的后悔药）</td>
</tr>
<tr>
<td><strong>其他快捷键</strong></td>
<td></td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>显示当前选择资源的属性，windows 下的查看文件的属性就是这个快捷键，通常用来查看文件在 windows 中的实际路径</td>
</tr>
<tr>
<td>Ctrl+↑</td>
<td>文本编辑器 上滚行</td>
</tr>
<tr>
<td>Ctrl+↓</td>
<td>文本编辑器 下滚行</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>最大化当前的 Edit 或 View （再按则反之）</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>显示类中方法和属性的大纲，能快速定位类的方法和属性（在查找 Bug 时非常有用）</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>快速显示当前类的继承结构</td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>关闭当前 Editer（windows 下关闭打开的对话框也是这个，还有 qq、旺旺、浏览器等都是）</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>文本编辑器 转至行</td>
</tr>
<tr>
<td>F2</td>
<td>显示工具提示描述</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>使用说明</tag>
      </tags>
  </entry>
  <entry>
    <title>c++基础</title>
    <url>/2021/08/10/17-17-30/</url>
    <content><![CDATA[<p><strong>懒得整了，先放着，以后有兴趣再来</strong></p>
<span id="more"></span>

<p>1.bool类型<br>  1.bool类型默认只有两种 true false 判断时经常用<br>bool a=true; if(!a) 等形式来判断。  </p>
<pre><code> 2. enum枚举的话在C语言中必须表述出来enum 名字 内容，而C++中 只需要用名字加变量名就可以了。
  2.判断
</code></pre>
<p>3.函数重载 ：</p>
<pre><code> 1. 函数名相同，参数列表不同（类型，个数，顺序）；，而后调用函数时系统自动依据函数中的类型进行选择；
  4.cout和end1的使用
  在头文件下方使用 using namespace std; 可以调用cout进行输出endl 进行换行；
  5.函数重载
  1. operator 可以对函数进行重载，比如 定义一个结构体函数
 
   2.   complex operator+(complex a，complex b) 就是对+号进行重载使之能进行结构体之间的运算（已定义过结构体complex）
        3. c++认为 一切操作符都是函数，函数是可以重载的（但并不是所有的运算符都可以重载）。
           6.默认参数
        4. 在定义函数时可以将其中的变量直接进行赋值这时当无参数传入时亦可运行程序。
        5. c++进行默认参数定义时必须从右向左进行默认且不能跳跃,实参的个数加默认参数的个数必须大于等于形参的个数。例如 int volume(int a,int b=1,int c=5);
        6. 一个参数或是两个参数的形式，重载默认参数都是可以实现的，但不可同时存在
        7. 如果声明在前，定义在后，那么默认参数只在声明而不在定义。
           7.回顾
        8. c++中表达式通常不能作为左值，即不可赋值，而某些表达式可以赋值。
        9. 输入和输出，cin标准流输入遇到空格不再读取，cout标准流输出存在于iostream头文件中。
        10. 可以用string来定义字符数组  比如 string s=&quot;china&quot;;
        11. 进制输出 例如cout&lt;&lt;dec&lt;&lt;i&lt;&lt;endl; 表示输出十进制，hex表示十六进制，oct八进制 
        12. 亦可使用setbase(多少进制) 来进行输出规定但要调用iomanip这个头文件
            8.引用
        13. 引用注意事项 int a; int &amp;ra=a; 声明关系，类型一致，不开辟空间，声明时必须初始化即赋值，不能再次被声明，可以对引用再次引用，但不能建立引用的指针    错误示范：int &amp; *p=&amp;ra; int &amp; &amp;=ra;
        14. 引用的目的是为了消灭指针 
        15. 可以定义指针数组，但不能定义数组指针 比如正确用法 int arr[]=&#123;1,2,3&#125;; int (&amp;rarr)[3]=arr;
        16. const的东西必须赋给const，其定义的东西不可改变，也不可以通过指针或引用去改变。
        17. 引用的声明如果加const是可以改变类型的,实际内部还是自己开辟了一个空间用以存取一个固定值；
        18. const使用的好处：
            a. 可以避免意外修改数据的编程错误
            b. 使用const可以处理const和非const实参，否则只能接受非const数据。
            c. 使用const引用可以使函数能正确地生成并使用临时变量（如果试餐与引用参数不匹配就会产生临时变量）
        19. 引用的本质是一个指针（一个指针名固定的指针也就是无法再指向其他变量）
            9.内存管理(new和delete)
        20. malloc和free不涉及类的问题，而new和delete会涉及类的问题。
        21. 能用malloc和free（存在于stdlib库中）的地方一定能用new和delete（c++中的关键字）,但反过来不一定成立。
        22. 两者示例比较 int *p= (int *)malloc(sizeof(int));   int *p = new int(200); 还可以进行初始化 
        23. 建立数组int *p = new int[4]&#123;&#125;;  建立结构体 Stu* p=new Stu&#123;赋初值&#125;；建立指针数组char **pi = new char*[5](NULL); pi[0]=new char[10]; strcpy(pi[0],&quot;china&quot;);
        24. 可使用memset进行初始化，比如memset（pi,0,sizeof(int[5])）;
        25. 定义多维数组int (*pa)[4]=new int [3][4];
        26. 释放
            a. int *p=new int; delete p;
            b. int *q =new int [100]; delete []q;
            10.内联函数（inline）
        27. 宏函数 优点：代码内嵌，避免了函数调用  缺点：易产生歧义，易使text段体积增大不会进行类型检查。
        28. #if 0   注释  #endif
        29. 函数优点：一段高度抽象的逻辑，不易产生歧义，使text体积段减小 缺点：函数调用的压栈与出栈的开销
        30. 内联函数可以解决上述问题，inline变成了给编译器的一种建议，inline int sqr(int i)&#123;return i*I;&#125;
            11.类型转换（typecast）
        31. static_cast
            a. 对于隐式类型可以转化的可以用这种类型(就是两者之间都可以用类型转化)
            b. 使用举例 int a=5;float b=5.6; a=static_cast&lt;int&gt;(b);  b=static_cast&lt;float&gt;(a);
            c. void *p; int *q; p=q; q=static_cast&lt;int&gt;(p); 所有类型都可以赋给空指针，其他指针赋给空指针时需要转换。
            d. 指定分区类型char *p=static_cast&lt;char *&gt;(malloc(100));
        32. reinterpret_cast
            a. 而对于两者之间都不可以互相隐式 转化的可用这种类型
            b. 比如 char*p; int *q; p=reinterpret_cast&lt;char*&gt;(q);
            c. int a[5]=&#123;1,2,3,4,5&#125;; int *p=reinterpret_cast&lt;int*&gt;(reinterpret_cast&lt;int&gt;(a)+1);
        33. const_cast
            a. 脱常,只能用于指针和引用
            b. const里面的东西无法在函数里调用进行改变，这时可以用const_cast
            c. 比如const int a=19; void func(int &amp;v);  func(const_cast&lt;int&amp;&gt;(a)); int &amp;ra=const_cast&lt;int&amp;&gt;(a); ra=200;(a的值没改，ra的值改了,但它们俩地址是相同的)
            d. int *pi=const&lt;int *&gt;(&amp;a); *pi=200; 不要妄图去修改const没有意义
        34. dynamic_cast
        35. 强转的话可以直接截取，宏在预处理时发生了替换，而const则是在编译阶段发生了替换
</code></pre>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Qtranslate使用说明</title>
    <url>/2021/08/09/18-09-48/</url>
    <content><![CDATA[<h1 id="全局快捷键："><a href="#全局快捷键：" class="headerlink" title="全局快捷键："></a>全局快捷键：</h1><p>双击Ctrl =&gt; 显示主窗口（以及选定文本的译文）<br>Ctrl+Q =&gt; 翻译选定文本并显示在弹出窗口<br>Ctrl+Shift+Q =&gt; 显示词典窗口<br>Ctrl+E =&gt; 朗读选定文本</p>
<span id="more"></span>

<h1 id="主窗口快捷键："><a href="#主窗口快捷键：" class="headerlink" title="主窗口快捷键："></a>主窗口快捷键：</h1><p>Ctrl+Enter =&gt; 翻译文本<br>Ctrl+N =&gt; 清除当前翻译<br>Ctrl+D =&gt; 显示词典<br>Ctrl+Alt+1..9 =&gt; 用选定的第1<del>9个翻译服务显示词典<br>Ctrl+H =&gt; 显示翻译历史记录<br>Ctrl+K =&gt; 显示软键盘<br>Ctrl+Tab/Ctrl+Shift+Tab/Ctrl+1..9 =&gt; 切换到后一个/前一个/第1</del>9个翻译服务<br>Shift+Esc =&gt; 重设语言组合为自动检测<br>Ctrl+Shift+1..9 =&gt; 选择语言组合<br>Ctrl+I =&gt; 互换翻译方向<br>Ctrl+空格 =&gt; 显示 建议/自动完成 下拉菜单<br>F1 =&gt; 显示帮助<br>F11 =&gt; 打开/关闭全屏模式<br>Alt+左箭头 =&gt; 转到前一个翻译<br>Alt+右箭头 =&gt; 转到后一个翻译<br>Ctrl+上箭头 =&gt; 把翻译复制到文本输入框</p>
<h1 id="有三种鼠标选中文本的翻译模式："><a href="#有三种鼠标选中文本的翻译模式：" class="headerlink" title="有三种鼠标选中文本的翻译模式："></a>有三种鼠标选中文本的翻译模式：</h1><ol>
<li>显示图标（选择程序中的文本 - 本程序的图标会出现在鼠标指针附近。点击该图标，弹出窗口里就会显示选定文本的译文）；</li>
<li>显示翻译（选择程序中的文本 - 选定文本的译文会立即在弹出窗口中出现）。</li>
<li>显示翻译并朗读（前一种加上朗读选定的文本）。</li>
</ol>
<h1 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h1><ul>
<li>左键单击系统托盘里的程序图标，可启用/关闭鼠标选择模式（见上文）；</li>
<li>左键双击系统托盘里的程序图标会显示主窗口；</li>
<li>左键双击弹出窗口顶部会打开包含当前翻译的主窗口；</li>
<li>左键单击翻译服务提供商的名称会切换服务提供商并重新翻译文本；</li>
<li>中键单击翻译服务提供商的名称会在浏览器打开翻译服务网页；</li>
<li>右键单击翻译服务提供商的名称可以多选服务，这样一来可以同时获取不同服务提供商的翻译结果，方便比较。</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>使用说明</tag>
      </tags>
  </entry>
  <entry>
    <title>Emmet使用语法</title>
    <url>/2021/08/13/18-39-12/</url>
    <content><![CDATA[<h1 id="1：html初始结构"><a href="#1：html初始结构" class="headerlink" title="1：html初始结构"></a>1：html初始结构</h1><p>下图中的结构，偷懒的都会直接一个！=&gt; Tab 解决，这样可以快速生成基础的结构，同时防止手写时忘记某个代码块，输入错误的代码。</p>
<p>默认生成的是html5的模板</p>
<h1 id="2：id（-）-class（-）"><a href="#2：id（-）-class（-）" class="headerlink" title="2：id（#）,class（.）"></a>2：id（#）,class（.）</h1><ul>
<li><p><strong>div#test</strong></p>
</li>
<li><p>```html</p>
<div id="test"></div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **div.test**</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="3：子节点（-gt-），兄弟节点（-），上级节点（-）"><a href="#3：子节点（-gt-），兄弟节点（-），上级节点（-）" class="headerlink" title="3：子节点（&gt;），兄弟节点（+），上级节点（^）"></a>3：子节点（&gt;），兄弟节点（+），上级节点（^）</h1><ul>
<li><p><strong>div&gt;ul&gt;li&gt;p</strong></p>
</li>
<li><p>```html</p>
<div>
   <ul>
     <li>
       <p></p>
     </li>
   </ul>
 </div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **div+ul+p**</span><br><span class="line"></span><br><span class="line">- ```htnl</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;p&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>div&gt;ul&gt;li^div</strong> (这里的<code>^</code>是接在<code>li</code>后面所以在<code>li</code>的上一级，与<code>ul</code>成了兄弟关系,当然两个^^就是上上级）</p>
</li>
<li><p>```html</p>
<div>
   <ul>
     <li></li>
   </ul>
   <div></div>
 </div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 4：重复（*）</span><br><span class="line"></span><br><span class="line">- div\*5（\***号后面添加数字表示重复的元素个数**）</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="5：分组（-）"><a href="#5：分组（-）" class="headerlink" title="5：分组（()）"></a>5：分组（()）</h1><ul>
<li><p>div&gt;(ul&gt;li&gt;a)+div&gt;p<br>（<strong>括号里面的内容为一个代码块，表示与括号内部嵌套和外面的的层级无关</strong>）</p>
</li>
<li><p>```html</p>
<div>
   <ul>
     <li><a href=""></a></li>
   </ul>
   <div>
     <p></p>
   </div>
 </div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 解释：这里如果不加括号的话,`a+div`这样div就是和a是兄弟关系了，会包含在li里面</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;ul&gt;</span><br><span class="line">       &lt;li&gt;</span><br><span class="line">         &lt;a href=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class="line">         &lt;div&gt;</span><br><span class="line">           &lt;p&gt;&lt;/p&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       &lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="6：属性（-attr-）"><a href="#6：属性（-attr-）" class="headerlink" title="6：属性（[attr]）"></a>6：属性（[attr]）</h1><ul>
<li><p>a[href=’###’ name=‘xiaoA’] （<strong>中括号内填写属性键值对的形式，并且空格隔开</strong>）</p>
</li>
<li><p>```html<br><a href="###" name="xiaoA"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 7: 编号（$）</span><br><span class="line"></span><br><span class="line">- ul&gt;li.test$\*3 （**$代表一位数，后面更上\*数字就代表从1递增到填写的数字**）</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">     &lt;li class=&quot;test1&quot;&gt;&lt;/li&gt;</span><br><span class="line">     &lt;li class=&quot;test2&quot;&gt;&lt;/li&gt;</span><br><span class="line">     &lt;li class=&quot;test3&quot;&gt;&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li><p>一个$ 代表一位数，只出现一个的话，就从1开始。如果出现多个，就从0开始,以此类推就可以形成$(1),$$(01),$$$(001)</p>
</li>
<li><p>如果想自定义从几开始递增的话就利用：$@+数字*数字<br>例如：ul&gt;li*3.test$@3</p>
</li>
<li><p>也可以在 $ 后面增加 @- 来实现倒序排列：<br>命令：ul&gt;li.item$@-*5  得到代码如下</p>
</li>
<li><p>```html</p>
<ul>
    <li class="item5"></li>
    <li class="item4"></li>
    <li class="item3"></li>
    <li class="item2"></li>
    <li class="item1"></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 8：文本（&#123;&#125;）</span><br><span class="line"></span><br><span class="line">- ul&gt;li.test$*3&#123;测试$&#125; （**&#123;里面填写内容，可以和$一起组合使用&#125;**）</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;test1&quot;&gt;测试1&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test2&quot;&gt;测试2&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test3&quot;&gt;测试3&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="9：隐式标签"><a href="#9：隐式标签" class="headerlink" title="9：隐式标签"></a>9：隐式标签</h1><p>这个标签没有指令，而是部分标签可以不使用输入标签，直接输入指令，即可识别父类标签。</p>
<p><strong>默认div</strong> 例如：<code>.test</code></p>
<p><strong>li</strong>： 可在ul 和 ol 中使用 例如：<code>ul&gt;.test$*3</code></p>
<p><strong>option</strong>：可在select中使用例如：<code>select&gt;.test$*5</code></p>
<p><strong>tr</strong>：可在 table、tbody、thead 和 tfoot 中使用</p>
<p><strong>td</strong>：可在 tr 中使用</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>dos基础</title>
    <url>/2021/08/09/19-15-34/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><span id="more"></span>

<h1 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h1><ol>
<li>convert k:/fs:ntfs                U盘格式转换</li>
<li>powercfg/batterryreport    查看电池使用</li>
<li>ipconfig /flushdns            更新DNS解析缓存</li>
<li>powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 打开卓越性能</li>
<li>convert e:/FS:NTFS                         改变U盘格式  </li>
<li>解决断网问题1   ipconfig /release                   释放所有节点  Ipconfig /renew                     更新媒体连接</li>
<li>解决断网问题2  netsh winsock reset 修复网络</li>
<li>copy /b “%<del>dp0”*.ts  “%</del>dp0”\new.ts</li>
<li>win10一键激活   管理员 slmgr /skms kms.v0v.bid &amp;&amp; slmgr /ato</li>
<li>start “” “C:\Program Files (x86)\Tencent\TIM\Bin\QQScLauncher.exe” &amp; ping localhost -n 3 开机启动项</li>
<li>@echo off for /L %%x in (1,1,10) do @echo %%x&gt;%%x.txt 批量创建文本文档</li>
<li>curl -O –ssl-no-revoke <a href="https://cdn-host.media.yunxi.tv/recordM3u8/195820b37cec499da7a4b1b28269c7d0/tranbox/195820b37cec499da7a4b1b28269c7d0_NWJou-[1-321].ts">https://cdn-host.media.yunxi.tv/recordM3u8/195820b37cec499da7a4b1b28269c7d0/tranbox/195820b37cec499da7a4b1b28269c7d0_NWJou-[1-321].ts</a>   批量下载ts流文件 (其中O后面那几句是关闭证书审核，网址随情况改变)</li>
<li>copy /b 地址文件 地址文件 将文件合并到一起。</li>
</ol>
]]></content>
      <categories>
        <category>dos</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>c基础</title>
    <url>/2021/08/10/13-26-53/</url>
    <content><![CDATA[<p><strong>先鸽着，以后整</strong></p>
<span id="more"></span>

<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;&gt;</td>
<td>右移运算符  低位舍弃，高位补零，右移一位相当于除以2</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移运算符  高位舍弃，低位补零，左移一位相当于乘以2</td>
</tr>
<tr>
<td>&amp;</td>
<td>与运算符      任何数&amp;0结果一定为0  任何数&amp;1结果保持原值不变</td>
</tr>
<tr>
<td>|</td>
<td>或运算符      任何数|1结果一定为1  任何数|0结果保持原值不变</td>
</tr>
<tr>
<td>^</td>
<td>按位异         相同为0      不同为1</td>
</tr>
<tr>
<td>~</td>
<td>按位取反      1变成0       0变成1</td>
</tr>
<tr>
<td>a&lt;b&lt;c</td>
<td>实质是a&lt;b的结果为0或1 而后这个结果再跟c比较</td>
</tr>
<tr>
<td>1e5</td>
<td>表示1*10^5</td>
</tr>
<tr>
<td>%</td>
<td>取余运算符，获取余数</td>
</tr>
<tr>
<td>/</td>
<td>除运算，只获取整数，自动约去余数</td>
</tr>
<tr>
<td>i++和++i</td>
<td>前者本次使用的值为自身值而后下一步变为加1的值，后者直接变为加1的值</td>
</tr>
<tr>
<td>+=， -=，*=，/=</td>
<td>一系列单目运算符，简便写法了</td>
</tr>
<tr>
<td>sizeof(a)</td>
<td>计算a的字节大小</td>
</tr>
<tr>
<td>data&gt;0? data:-data</td>
<td>如果data&gt;0,就还是data否则变为-data</td>
</tr>
</tbody></table>
<ul>
<li><p>一位八进制数      可以拆成       三个二进制数</p>
</li>
<li><p>一位十六进制数   可以拆成       四个二进制数</p>
</li>
</ul>
<ul>
<li>enum  枚举   enum Bool{0,1,2,3};  而后就可以Bool a=0; if(!a)……如此使用。</li>
</ul>
<h1 id="变量的特性"><a href="#变量的特性" class="headerlink" title="变量的特性"></a>变量的特性</h1><h2 id="局部与全局"><a href="#局部与全局" class="headerlink" title="局部与全局"></a>局部与全局</h2><ol>
<li><p>在函数前面声明定义时若为extern 类型 函数名 （变量）表示为外部函数，可供其他文件调用。而不加表示默认为static 仅为内部函数，只可在此文件中调用，</p>
</li>
<li><p> 局部变量与全局变量</p>
</li>
</ol>
<pre><code>局部变量仅仅在该函数中有效，在外部函数中是无法调用的，而加了extern之后，就可以从此声明开始往后均可以使用、
</code></pre>
<h2 id="变量的存储类型和生存期"><a href="#变量的存储类型和生存期" class="headerlink" title="变量的存储类型和生存期"></a>变量的存储类型和生存期</h2><p>在调用函数中每个变量默认为动态存储，在该次调用完这个函数后，里面的值就会全部释放，而如果将其定义为静态存储就可以保持其调用完后的值不变，类型为 <strong>static 类型 变量名</strong>；</p>
<h1 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h1><p><strong>指针存储的是地址，如果要交换其所存的值，可以将地址进行交换，也可以将其所指向的值直接进行交换</strong></p>
<h2 id="1-指针引用数组"><a href="#1-指针引用数组" class="headerlink" title="1.指针引用数组"></a>1.指针引用数组</h2><ol>
<li><p>一维数组  可以定义一个指针变量，假如为p，数组为<code>stu[m]</code>,此时<code>p=stu</code>,就表示指向该数组，p此时的地址为<code>stu[0]</code>的地址，此时p++就会自动跳到<code>stu[1]</code>的地址上，</p>
</li>
<li><p>多维数组<br>仍假设指针为p,假设一个二维数组为a[n][m],此时<code>a[0]+1</code>和<code>*(a+0)+1</code>均表示为<code>a[0][1]</code>的地址，<code>p=a\[0]</code>表示从第一行第一列开始，而后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(p=a[<span class="number">0</span>];p&lt;a[<span class="number">0</span>]+m*n;p++)</span><br></pre></td></tr></table></figure>

<p>就可以遍历每一个元素，以<code>a[i][j]</code>为例，其相对位置为<code>i*m+j</code>,其地址为<code>a[0]+i*m+j</code>;</p>
</li>
<li><p>指针数组例如<code>int (*p)[10]</code>; 表示p所指的对象是有四个整型元素的数组。</p>
</li>
</ol>
<h2 id="2-指针引用字符串"><a href="#2-指针引用字符串" class="headerlink" title="2.指针引用字符串"></a>2.指针引用字符串</h2><p>字符串输出时从指针指向的那个地方开始，到遇见“\0”结束</p>
<h2 id="3-指向函数的指针"><a href="#3-指向函数的指针" class="headerlink" title="3.指向函数的指针"></a>3.指向函数的指针</h2><p>假设定义一个函数此时若要调用这个函数，也可以通过指针直接调用，比如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>;</span><br><span class="line"><span class="keyword">int</span>(*p)(<span class="keyword">int</span>,<span class="keyword">int</span>);</span><br><span class="line">p=max;</span><br></pre></td></tr></table></figure>

<h2 id="4-返回指针类型的函数"><a href="#4-返回指针类型的函数" class="headerlink" title="4.返回指针类型的函数"></a>4.返回指针类型的函数</h2><p>类型名 *函数名(参数表列) 其返回的值为指针类型，再利用其字符串以及数组的性质就可以返回一列数，而非只能返回单一的数了。</p>
<h2 id="5-指针数组"><a href="#5-指针数组" class="headerlink" title="5.指针数组"></a>5.指针数组</h2><ol>
<li><p>指针数组中每个元素存放一个地址，相当于一个指针变量，定义 类型名 *数组名[数组长度]；</p>
</li>
<li><p>指向指针数据的指针变量，比如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">&quot;follow me&quot;</span>,<span class="string">&quot;basic&quot;</span>,<span class="string">&quot;great wall&quot;</span>,<span class="string">&quot;fortarn&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> **p; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    p=name+I;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果输出</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">follow me</span><br><span class="line">basic</span><br><span class="line">great wall</span><br><span class="line">fortarn</span><br></pre></td></tr></table></figure></li>
<li><p><code>**p</code>就是用来指向指针变量的一种表示方法再比如下面的代码块，此时p就指向num[0]的地址；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*num[]=&#123;&amp;a[<span class="number">0</span>],&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>]&#125;;</span><br><span class="line"><span class="keyword">int</span> **p;</span><br><span class="line">p=num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,**p);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="动态内存分配与指向它的指针变量"><a href="#动态内存分配与指向它的指针变量" class="headerlink" title="动态内存分配与指向它的指针变量"></a>动态内存分配与指向它的指针变量</h1><ol>
<li><code>malloc(100)</code>,开辟100字节的临时分配域</li>
<li><code>p=calloc(n,m)</code> 开辟n*m个字节的临时分配域,将首地址赋给指针变量p,其中n表示元素个数,m表示每个元素的长度</li>
<li><code>relloc(p,50)</code> 将p指向的已分配的动态空间改为50字节</li>
<li><code>free(p);</code>释p指向的已分配的动态存储空间</li>
<li>使用时注意加<code>#include&lt;stdlib.h&gt;</code></li>
</ol>
<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ol>
<li><code>struct 结构体名&#123;成员列表&#125;</code>   其中成员列表中每个又都要 声明 类型名 成员名</li>
<li>而后若使用该类型变量 直接 struct 结构体名 变量名      比如 <code>struct Student student1,student2;</code></li>
<li>也可以在定义结构体类型时直接定义变量名 如<code>struct 结构体名&#123;成员列表&#125; 变量名表列；</code></li>
<li>在赋值时使用<code>变量名.成员名=</code>进行赋值；</li>
<li>亦可以使用结构体数组 即变量名为数组形式；</li>
</ol>
<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><ol>
<li>定义指向结构体类型的指针 例如<code>struct student *pt</code><br>赋值时使用<code>*(pt).成员=</code>  进行赋值</li>
<li>指向其中的成员亦可以使用<code>p-&gt;</code>成员</li>
</ol>
<h2 id="用指针处理链表"><a href="#用指针处理链表" class="headerlink" title="用指针处理链表"></a>用指针处理链表</h2><ol>
<li><p>使用链表可以减少由于为了防止数据溢出而浪费的空间示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">     <span class="keyword">int</span> num;</span><br><span class="line">     <span class="keyword">float</span> score;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">next</span>;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>hex值修改实例</title>
    <url>/2021/08/09/18-43-34/</url>
    <content><![CDATA[<p><strong>hex怎么说呢，也不太懂，定位地址的时候用到过，以后再学吧，收集了几个实用的操作</strong></p>
<span id="more"></span>

<ol>
<li>QQ好友消息防撤回<br>a. 用winhex打开IM.dll文件<br>b. 打开替换16进制数值<br>c. 搜索<br>0F85AE010000817D0C8A000000740D817D0C8B0000000F85980100005657FF750C50<br>d. 替换为<br>0F85AE010000817D0C8A0000009090817D0C8B0000000F85980100005657FF750C50</li>
<li>QQ群消息防撤回<br>a. 用winhex打开IM.dll文件<br>b. 打开替换16进制数值<br>c. 搜索<br>0F8527020000807DFF110F851D0200008B45F48D55F852895DF8<br>d. 替换为<br>0F8527020000807DFF11E91E020000908B45F48D55F852895DF8</li>
<li>微信防撤回<br>a. 用winhex打开WechatWin.dll文件<br>b. 打开替换16进制数值<br>c. 搜索<br>8BCEE83F3F3F3F85C0747B8BC8E83F3F3F3F85C07562<br>d. 替换为<br>8BCEE83F3F3F3F85C0EB7B8BC8E83F3F3F3F85C07562</li>
<li>微信多开<br>a. 用winhex打开WechatWin.dll文件<br>b. 打开替换16进制数值<br>c. 搜索<br>E86B00000084C07456566A00<br>d. 替换为<br>E86B00000084C0EB56566A</li>
</ol>
]]></content>
      <categories>
        <category>winhex</category>
      </categories>
      <tags>
        <tag>趣味修改</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo参数介绍</title>
    <url>/2021/08/06/17-53-07/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="新建生成上传"><a href="#新建生成上传" class="headerlink" title="新建生成上传"></a>新建生成上传</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<h5 id="缩写："><a href="#缩写：" class="headerlink" title="缩写："></a>缩写：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<h5 id="组合命令："><a href="#组合命令：" class="headerlink" title="组合命令："></a>组合命令：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>配置环境</tag>
      </tags>
  </entry>
  <entry>
    <title>js实用命令集合</title>
    <url>/2021/08/09/19-00-42/</url>
    <content><![CDATA[<p><strong>闲着没事收集的js命令，挺好玩的，哈哈</strong></p>
<span id="more"></span>

<ol>
<li><p>修改网页内document.designMode=”on”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.designMode=<span class="string">&quot;on&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>教务系统评价</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 选项</span><br><span class="line">[...document.getElementsByTagName(<span class="string">&quot;input&quot;</span>)].filter(<span class="function"><span class="params">i</span>=&gt;</span>i.dataset.xDafxsm==<span class="string">&quot;非常满意&quot;</span>).forEach(<span class="function"><span class="params">i</span>=&gt;</span>i.click())</span><br><span class="line"># 评价内容</span><br><span class="line">[...document.getElementsByClassName(<span class="string">&quot;bh-txt-input__txtarea&quot;</span>)].forEach(<span class="function"><span class="params">i</span>=&gt;</span>i.value=<span class="string">&quot;无&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>查看浏览器上保存的星号密码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript:<span class="string">&quot;use strict&quot;</span>;!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e,t;e=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;e.length;a++)<span class="keyword">if</span>(t=e[a],<span class="string">&quot;password&quot;</span>==t.type.toLowerCase())<span class="keyword">try</span>&#123;t.type=<span class="string">&quot;text&quot;</span>&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">var</span> r,n;r=<span class="built_in">document</span>.createElement(<span class="string">&quot;input&quot;</span>),n=t.attributes;<span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;n.length;o++)&#123;<span class="keyword">var</span> i,c,d;i=n[o],c=i.nodeName,d=i.nodeValue,<span class="string">&quot;type&quot;</span>!=c.toLowerCase()&amp;&amp;<span class="string">&quot;height&quot;</span>!=c&amp;&amp;<span class="string">&quot;width&quot;</span>!=c&amp;!!d&amp;&amp;(r[c]=d)&#125;t.parentNode.replaceChild(r,t)&#125;&#125;();</span><br></pre></td></tr></table></figure></li>
<li><p>去除水印</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">editor-watermark   display:none</span><br></pre></td></tr></table></figure></li>
<li><p>打开浏览器并行下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">chrome:<span class="comment">//flags/#enable-parallel-downloading</span></span><br></pre></td></tr></table></figure></li>
<li><p>浏览器倍速</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">videojs.getPlayers(<span class="string">&quot;video-player&quot;</span>).html5player.tech_.setPlaybackRate(请在这里输入数字设置倍速)</span><br></pre></td></tr></table></figure></li>
<li><p>打开百度永久分享</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript:$(<span class="string">&quot;.share-method-line&quot;</span>).parent().append(&amp;apos;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;share-method-line&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;share-method-public&quot;</span> <span class="attr">name</span>=<span class="string">&quot;share-method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;public&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon radio-icon icon-radio-non&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;share-method-public&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>公开分享<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="symbol">&amp;apos;</span>)</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>趣味修改</tag>
      </tags>
  </entry>
  <entry>
    <title>http响应码</title>
    <url>/2021/08/10/11-15-00/</url>
    <content><![CDATA[<h2 id="HTTP各种响应码"><a href="#HTTP各种响应码" class="headerlink" title="HTTP各种响应码"></a>HTTP各种响应码</h2><span id="more"></span>

<h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table>
<thead>
<tr>
<th>消息：</th>
<th align="left">描述：</th>
</tr>
</thead>
<tbody><tr>
<td>100 Continue</td>
<td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td>
</tr>
<tr>
<td>101 Switching Protocols</td>
<td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>
</tr>
<tr>
<td>103 Checkpoint</td>
<td align="left">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td>
</tr>
</tbody></table>
<h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table>
<thead>
<tr>
<th>消息：</th>
<th>描述：</th>
</tr>
</thead>
<tbody><tr>
<td>200 OK</td>
<td>请求成功（这是对HTTP请求成功的标准应答。）</td>
</tr>
<tr>
<td>201 Created</td>
<td>请求被创建完成，同时新的资源被创建。</td>
</tr>
<tr>
<td>202 Accepted</td>
<td>供处理的请求已被接受，但是处理未完成。</td>
</tr>
<tr>
<td>203 Non-Authoritative Information</td>
<td>请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。</td>
</tr>
<tr>
<td>204 No Content</td>
<td>请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
</tr>
<tr>
<td>205 Reset Content</td>
<td>请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>
</tr>
<tr>
<td>206 Partial Content</td>
<td>客户发送了一个带有Range头的GET请求，服务器完成了它。</td>
</tr>
</tbody></table>
<h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table>
<thead>
<tr>
<th>消息：</th>
<th>描述：</th>
</tr>
</thead>
<tbody><tr>
<td>300 Multiple Choices</td>
<td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>
</tr>
<tr>
<td>301 Moved Permanently</td>
<td>所请求的页面已经转移至新的 URL 。</td>
</tr>
<tr>
<td>302 Found</td>
<td>所请求的页面已经临时转移至新的 URL 。</td>
</tr>
<tr>
<td>303 See Other</td>
<td>所请求的页面可在别的 URL 下被找到。</td>
</tr>
<tr>
<td>304 Not Modified</td>
<td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>
</tr>
<tr>
<td>305 Use Proxy</td>
<td>客户请求的文档应该通过Location头所指明的代理服务器提取。</td>
</tr>
<tr>
<td>306 Switch Proxy</td>
<td><em>目前已不再使用，但是代码依然被保留。</em></td>
</tr>
<tr>
<td>307 Temporary Redirect</td>
<td>被请求的页面已经临时移至新的 URL 。</td>
</tr>
<tr>
<td>308 Resume Incomplete</td>
<td>用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td>
</tr>
</tbody></table>
<h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table>
<thead>
<tr>
<th>消息：</th>
<th>描述：</th>
</tr>
</thead>
<tbody><tr>
<td>400 Bad Request</td>
<td>因为语法错误，服务器未能理解请求。</td>
</tr>
<tr>
<td>401 Unauthorized</td>
<td>合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。</td>
</tr>
<tr>
<td>402 Payment Required</td>
<td><em>此代码尚无法使用。</em></td>
</tr>
<tr>
<td>403 Forbidden</td>
<td>合法请求，但对被请求页面的访问被禁止。</td>
</tr>
<tr>
<td>404 Not Found</td>
<td>服务器无法找到被请求的页面。</td>
</tr>
<tr>
<td>405 Method Not Allowed</td>
<td>请求中指定的方法不被允许。</td>
</tr>
<tr>
<td>406 Not Acceptable</td>
<td>服务器生成的响应无法被客户端所接受。</td>
</tr>
<tr>
<td>407 Proxy Authentication Required</td>
<td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>
</tr>
<tr>
<td>408 Request Timeout</td>
<td>请求超出了服务器的等待时间。</td>
</tr>
<tr>
<td>409 Conflict</td>
<td>由于冲突，请求无法被完成。</td>
</tr>
<tr>
<td>410 Gone</td>
<td>被请求的页面不可用。</td>
</tr>
<tr>
<td>411 Length Required</td>
<td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td>
</tr>
<tr>
<td>412 Precondition Failed</td>
<td>请求中的前提条件被服务器评估为失败。</td>
</tr>
<tr>
<td>413 Request Entity Too Large</td>
<td>由于所请求的实体太大，服务器不会接受请求。</td>
</tr>
<tr>
<td>414 Request-URI Too Long</td>
<td>由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。</td>
</tr>
<tr>
<td>415 Unsupported Media Type</td>
<td>由于媒介类型不被支持，服务器不会接受请求。</td>
</tr>
<tr>
<td>416 Requested Range Not Satisfiable</td>
<td>客户端请求部分文档，但是服务器不能提供被请求的部分。</td>
</tr>
<tr>
<td>417 Expectation Failed</td>
<td>服务器不能满足客户在请求中指定的请求头。</td>
</tr>
</tbody></table>
<h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table>
<thead>
<tr>
<th>消息：</th>
<th>描述：</th>
</tr>
</thead>
<tbody><tr>
<td>500 Internal Server Error</td>
<td>请求未完成。服务器遇到不可预知的情况。</td>
</tr>
<tr>
<td>501 Not Implemented</td>
<td>请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。</td>
</tr>
<tr>
<td>502 Bad Gateway</td>
<td>请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。</td>
</tr>
<tr>
<td>503 Service Unavailable</td>
<td>服务器当前不可用（过载或者当机）。</td>
</tr>
<tr>
<td>504 Gateway Timeout</td>
<td>网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。</td>
</tr>
<tr>
<td>505 HTTP Version Not Supported</td>
<td>服务器不支持请求中指明的HTTP协议版本。</td>
</tr>
<tr>
<td>511 Network Authentication Required</td>
<td>用户需要提供身份验证来获取网络访问入口。</td>
</tr>
</tbody></table>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-FTP服务</title>
    <url>/2021/08/10/18-23-17/</url>
    <content><![CDATA[<p><strong>FTP服务属于传输协议的应用层;21被认为是FTP服务的标准端口，20用以传输数据流，21用以控制数据流。vsftpd是许多linux默认的FTP服务软件包</strong></p>
<span id="more"></span>

<pre><code>!    转义到 Shell
?    显示本地帮助信息
append    向已经存在的文件追加内容或者续传文件
ascii    切换到 ASCIl传输模式
bell    命令完成时发出声音
binary    切换到二进制传输模式
bye    终止FTP会话并退出
cd    更改远程工作目录
close    终止FTP会话
delete    删除文件
dir    列出远程目录内容
disconnect    终止FTP会话
get    接收文件
lcd    更改本地工作目录
Is    列出远程工作目录内容
mdelete    删除多个文件
mdir    列出多个远程目录的内容
mget    获取多个文件
mkdir    在FTP服务器上创建目录
mls    列出多个远程目录的内容
mput    上传多个文件
open    连接到远程FTP服务器
prompt    切换到交互模式
put    上传一个文件
mput    上传多个文件 mput 4\*.jpg
pwd    输出远程工作目录
quit    终止FTP会话并退出
recv    接收文件
rename    重命名文件
rmdir    删除FTP服务器上的目录
send    发送一个文件
status    显示当前状态
type    切换传输模式
user    发送新用户信息
</code></pre>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础语法</title>
    <url>/2021/08/09/21-10-03/</url>
    <content><![CDATA[<p><strong>在进行破解或者更改程序源文件时经常会遇到这门编程语言，大致整理一下</strong></p>
<span id="more"></span>

<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ol>
<li>数据类型：boolean、int、long、short、byte、float、double、char、class、interface</li>
<li>流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally</li>
<li>修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native</li>
<li>动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new</li>
<li>保留字：true、false、null、goto、const</li>
</ol>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>以双斜杠“//”标识，只能注释一行内容，用在注释信息内容少的地方</p>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>包含在“/*”和“*/”之间，能注释很多行的内容。为了可读性比较好，一般首行和尾行不写注释信息（这样也比较美观好看），如图 2 所示。</p>
<p>注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。</p>
<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>包含在“/**”和“*/”之间，也能注释多行内容，一般用在类、方法和变量上面，用来描述其作用。注释后，鼠标放在类和变量上面会自动显示出我们注释的内容，如图 3 所示。</p>
<p>注意：文档注释能嵌套单行注释，不能嵌套多行注释和文档注释，一般首行和尾行也不写注释信息</p>
<h1 id="javadoc详解"><a href="#javadoc详解" class="headerlink" title="javadoc详解"></a>javadoc详解</h1><p>Javadoc 是 Sun 公司提供的一种工具，它可以从程序源代码中抽取类、方法、成员等注释，然后形成一个和源代码配套的 API 帮助文档。也就是说，只要在编写程序时以一套特定的标签注释，在程序编写完成后，通过 Javadoc 就形成了程序的 API 帮助文档。</p>
<blockquote>
<p>API 帮助文档相当于产品说明书，而说明书只需要介绍那些供用户使用的部分，所以 Javadoc 默认只提取 public、protected 修饰的部分。如果要提取 private 修饰的部分，需要使用 -private。</p>
</blockquote>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>@author</td>
<td>标识一个类的作者，一般用于类注释</td>
<td>@author description</td>
</tr>
<tr>
<td>@deprecated</td>
<td>指名一个过期的类或成员，表明该类或方法不建议使用</td>
<td>@deprecated description</td>
</tr>
<tr>
<td>{@docRoot}</td>
<td>指明当前文档根目录的路径</td>
<td>Directory Path</td>
</tr>
<tr>
<td>@exception</td>
<td>可能抛出异常的说明，一般用于方法注释</td>
<td>@exception exception-name explanation</td>
</tr>
<tr>
<td>{@inheritDoc}</td>
<td>从直接父类继承的注释</td>
<td>Inherits a comment from the immediate surperclass.</td>
</tr>
<tr>
<td>{@link}</td>
<td>插入一个到另一个主题的链接</td>
<td>{@link name text}</td>
</tr>
<tr>
<td>{@linkplain}</td>
<td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td>Inserts an in-line link to another topic.</td>
</tr>
<tr>
<td>@param</td>
<td>说明一个方法的参数，一般用于方法注释</td>
<td>@param parameter-name explanation</td>
</tr>
<tr>
<td>@return</td>
<td>说明返回值类型，一般用于方法注释，不能出现再构造方法中</td>
<td>@return explanation</td>
</tr>
<tr>
<td>@see</td>
<td>指定一个到另一个主题的链接</td>
<td>@see anchor</td>
</tr>
<tr>
<td>@serial</td>
<td>说明一个序列化属性</td>
<td>@serial description</td>
</tr>
<tr>
<td>@serialData</td>
<td>说明通过 writeObject() 和 writeExternal() 方法写的数据</td>
<td>@serialData description</td>
</tr>
<tr>
<td>@serialField</td>
<td>说明一个 ObjectStreamField 组件</td>
<td>@serialField name type description</td>
</tr>
<tr>
<td>@since</td>
<td>说明从哪个版本起开始有了这个函数</td>
<td>@since release</td>
</tr>
<tr>
<td>@throws</td>
<td>和 @exception 标签一样.</td>
<td>The @throws tag has the same meaning as the @exception tag.</td>
</tr>
<tr>
<td>{@value}</td>
<td>显示常量的值，该常量必须是 static 属性。</td>
<td>Displays the value of a constant, which must be a static field.</td>
</tr>
<tr>
<td>@version</td>
<td>指定类的版本，一般用于类注释</td>
<td>@version info</td>
</tr>
</tbody></table>
<h2 id="Javadoc命令"><a href="#Javadoc命令" class="headerlink" title="Javadoc命令"></a>Javadoc命令</h2><p>Javadoc 用法格式如下：</p>
<p>javadoc [options] [packagenames] [sourcefiles]</p>
<p>对格式的说明：</p>
<ul>
<li>options 表示 Javadoc 命令的选项；</li>
<li>packagenames 表示包名；</li>
<li>sourcefiles 表示源文件名。</li>
</ul>
<p>在 cmd（命令提示符）中输入<code>javadoc -help</code>就可以看到 Javadoc 的用法和选项（前提是安装配置了JDK），下面列举 Javadoc 命令的常用选项：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-public</td>
<td>仅显示 public 类和成员</td>
</tr>
<tr>
<td>-protected</td>
<td>显示 protected/public 类和成员（默认值）</td>
</tr>
<tr>
<td>-package</td>
<td>显示 package/protected/public 类和成员</td>
</tr>
<tr>
<td>-private</td>
<td>显示所有类和成员</td>
</tr>
<tr>
<td>-d <directory></td>
<td>输出文件的目标目录</td>
</tr>
<tr>
<td>-version</td>
<td>包含 @version 段</td>
</tr>
<tr>
<td>-author</td>
<td>包含 @author 段</td>
</tr>
<tr>
<td>-splitindex</td>
<td>将索引分为每个字母对应一个文件</td>
</tr>
<tr>
<td>-windowtitle <text></td>
<td>文档的浏览器窗口标题</td>
</tr>
</tbody></table>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>一个源文件只能有一个public类  但允许有多个class</li>
<li>main是程序的第一步有固定的书写格式public static void main(String[] args){}</li>
<li>java中每个语句必须以分号结束，同时以花括号划分程序的各个部分</li>
<li>同样支持\n 换行转义字符</li>
<li>注释 //单行注释   多行注释/*   */</li>
<li>/**文档注释*/</li>
<li>变量名必须以$   _    或者字母(包含汉字)开头  因为java采用的是unicode字符集，尽量遵循驼峰原则   类名尽量大写</li>
<li>数据类型 变量名     //变量定义</li>
<li>变量可分为 局部变量， 成员变量，静态变量static int (类变量)</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2021/08/05/13-52-54/</url>
    <content><![CDATA[<p><strong>之前纯属觉着好玩学了一点markdown的语法，现在要写博客才发现是真的有用，于是再复习一下，顺便整理出来吧,本地展示是正常的</strong></p>
<span id="more"></span>
<h1 id="一-标题"><a href="#一-标题" class="headerlink" title="一. 标题"></a>一. 标题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">....</span><br></pre></td></tr></table></figure>


<p><strong>ps: 示例如下只测试二三四级标题，省的打乱我布局，哈哈，还有要注意#号后的空格，当初可没少踩坑</strong></p>
<h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h1 id="二-表格"><a href="#二-表格" class="headerlink" title="二. 表格"></a>二. 表格</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 1 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| col 3 is      | left-aligned  |    $1 |</span><br></pre></td></tr></table></figure>

<p><strong>ps:  不对齐也可以，只要一一对应就行 样式如下</strong></p>
<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 1 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>col 3 is</td>
<td align="center">left-aligned</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<h1 id="三-粗体，斜体"><a href="#三-粗体，斜体" class="headerlink" title="三. 粗体，斜体"></a>三. 粗体，斜体</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">**粗体文本**</span><br><span class="line">***粗斜体文本***</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<p><em>斜体文本</em><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em></p>
<h1 id="四-链接"><a href="#四-链接" class="headerlink" title="四. 链接"></a>四. 链接</h1><h2 id="常用链接"><a href="#常用链接" class="headerlink" title="常用链接"></a>常用链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文字链接 [万星阁](https://wanstarge.github.io)</span><br><span class="line">网址链接 &lt;https://wanstarge.github.io&gt;</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<p>文字链接 <a href="https://wanstarge.github.io/">万星阁</a><br>网址链接 <a href="https://wanstarge.github.io/">https://wanstarge.github.io</a></p>
<h2 id="高级链接技巧"><a href="#高级链接技巧" class="headerlink" title="高级链接技巧"></a>高级链接技巧</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个链接用 first 作为网址变量 [myself][first]</span><br><span class="line">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">[first]:https://wanstarge.github.io</span><br><span class="line">[yahoo]:http://www.yahoo.com/</span><br></pre></td></tr></table></figure>

<p><strong>ps: 由于目前发现只有markdown-here支持这种操作，就不再演示了</strong></p>
<h1 id="五-列表"><a href="#五-列表" class="headerlink" title="五. 列表"></a>五. 列表</h1><h2 id="普通无序列表"><a href="#普通无序列表" class="headerlink" title="普通无序列表"></a>普通无序列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表文本前使用 [减号+空格]</span><br><span class="line">+ 列表文本前使用 [加号+空格]</span><br><span class="line">* 列表文本前使用 [星号+空格]</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<ul>
<li>列表文本前使用 [减号+空格]</li>
</ul>
<ul>
<li>列表文本前使用 [加号+空格]</li>
</ul>
<ul>
<li>列表文本前使用 [星号+空格]</li>
</ul>
<h2 id="普通有序列表"><a href="#普通有序列表" class="headerlink" title="普通有序列表"></a>普通有序列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表前使用 [数字+空格]</span><br><span class="line">2. 我们会自动帮你添加数字</span><br><span class="line">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<ol>
<li>列表前使用 [数字+空格]</li>
<li>我们会自动帮你添加数字</li>
<li>不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</li>
</ol>
<h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列出所有元素：</span><br><span class="line">    - 无序列表元素 A</span><br><span class="line">        1. 元素 A 的有序子列表</span><br><span class="line">    - 前面加四个空格</span><br><span class="line">2. 列表里的多段换行：</span><br><span class="line">    前面必须加四个空格，</span><br><span class="line">    这样换行，整体的格式不会乱</span><br><span class="line">3. 列表里引用：</span><br><span class="line"></span><br><span class="line">        &gt; 前面空一行  </span><br><span class="line">        &gt; 需要缩进，顶格将打断列表  </span><br><span class="line">        &gt; 换行需要加两个以上空格并回车</span><br><span class="line"></span><br><span class="line">4. 列表里代码段：</span><br><span class="line">	\```</span><br><span class="line">    前面四个空格，之后按代码语法 \``` 书写</span><br><span class="line">    \```</span><br><span class="line">    </span><br><span class="line">        或者直接八个空格，引入代码块(代码块的部分全都要空格)</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<ol>
<li><p>列出所有元素：</p>
<ul>
<li>无序列表元素 A<ol>
<li>元素 A 的有序子列表</li>
</ol>
</li>
<li>前面加四个空格</li>
</ul>
</li>
<li><p>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱</p>
</li>
<li><p>列表里引用：</p>
<pre><code> &gt; 前面空一行  
 &gt; 需要缩进，顶格将打断列表  
 &gt; 换行需要加两个以上空格并回车
</code></pre>
</li>
<li><p>列表里代码段：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面四个空格，之后按代码语法 ``` 书写</span><br></pre></td></tr></table></figure>

<pre><code>    或者直接八个空格，引入代码块
</code></pre>
<h1 id="六-引用"><a href="#六-引用" class="headerlink" title="六. 引用"></a>六. 引用</h1><h2 id="普通引用"><a href="#普通引用" class="headerlink" title="普通引用"></a>普通引用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 引用文本前使用 [大于号+空格]  </span><br><span class="line">&gt; 折行可以不加，新起一行都要加上哦</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<blockquote>
<p>引用文本前使用 [大于号+空格]<br>折行可以不加，新起一行都要加上哦</p>
</blockquote>
<h2 id="引用里嵌套引用"><a href="#引用里嵌套引用" class="headerlink" title="引用里嵌套引用"></a>引用里嵌套引用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 最外层引用</span><br><span class="line">&gt;&gt; 多一个 &gt; 嵌套一层引用</span><br><span class="line">&gt;&gt;&gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<blockquote>
<p>最外层引用</p>
<blockquote>
<p>多一个 &gt; 嵌套一层引用</p>
<blockquote>
<p>可以嵌套很多层</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="引用里嵌套列表"><a href="#引用里嵌套列表" class="headerlink" title="引用里嵌套列表"></a>引用里嵌套列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; - 这是引用里嵌套的一个列表</span><br><span class="line">&gt; - 还可以有子列表</span><br><span class="line">&gt;     * 子列表需要从 - 之后延后四个空格开始</span><br></pre></td></tr></table></figure>

<p><strong>ps:示例如下</strong></p>
<blockquote>
<ul>
<li>这是引用里嵌套的一个列表</li>
<li>还可以有子列表<ul>
<li>子列表需要从 - 之后延后四个空格开始</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="引用里嵌套代码块"><a href="#引用里嵌套代码块" class="headerlink" title="引用里嵌套代码块"></a>引用里嵌套代码块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;     同样的，在前面加四个空格形成代码块(这里没有显示不过markdown\-here和github都可以使用)</span><br><span class="line">&gt;  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者使用 ``` 形成代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">**ps:示例如下**</span><br><span class="line"></span><br><span class="line">    同样的，在前面加四个空格形成代码块(这里没有显示不过markdown\-here和github都可以使用)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>或者使用 ``` 形成代码块
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 七. 图片</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<p><img src="https://wanstarge.github.io/images/avatar.jpg" alt="图片名称"></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**ps:示例如下**</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://wanstarge.github.io/images/avatar.jpg&quot; alt=&quot;图片名称&quot; style=&quot;zoom:25%;&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也有之前说的那种高级方式，不过也只能在markdown-here里面使用<br>这个链接用 1 作为网址变量  <img src="https://www.baidu.com/img/bdlogo.png" alt="Google">.<br>然后在文档的结尾位变量赋值（网址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 八.  常用操作</span><br><span class="line"></span><br><span class="line">## 换行</span><br><span class="line"></span><br><span class="line">如果另起一行，只需在当前行结尾加 2 个空格，在当前行的结尾加 2 个空格，这行就会新起一行，如果是要起一个新段落，只需要空出一行即可。</span><br><span class="line"></span><br><span class="line">## 分隔符</span><br><span class="line"></span><br><span class="line">如果你有写分割线的习惯，可以新起一行输入三个减号 -：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**ps:示例如下**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 符号转义</span><br><span class="line"></span><br><span class="line">如果你的描述中需要用到 markdown 的符号，比如 `_ # *` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\_ \# \*` 进行避免。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 复制代码 隐藏代码_不想这里的文本变斜体_<br>**不想这里的文本被加粗**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">\_不想这里的文本变斜体\_</span><br><span class="line">\*\*不想这里的文本被加粗\*\*</span><br><span class="line"></span><br><span class="line"># 九. 代码</span><br><span class="line"></span><br><span class="line">## 行内代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果只想高亮正文中某个词，可以用两个反引号包裹起来<br><code>行内代码</code></p>
<pre><code>            下面这两个也只适用于markdown-here
</code></pre>
<p>如果行内代码包含反引号，可以用多个反引号包裹<br>包含<code>反引号(`) </code> 的行内代码<br>如果行内代码开头就有反引号，需要起始端和结束端各一个空格<br><code>`反引号`</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**ps:示例如下**</span><br><span class="line"></span><br><span class="line">`行内代码` </span><br><span class="line"></span><br><span class="line">## 普通代码</span><br><span class="line"></span><br><span class="line">### 反引号包裹</span><br><span class="line"></span><br><span class="line">用3个或以上的反引号包裹起来</span><br><span class="line"></span><br><span class="line">`````</span><br><span class="line"> 复制代码 隐藏代码```</span><br><span class="line"># rewrite`s rules for wordpress pretty url </span><br><span class="line">LoadModule rewrite_module  modules/mod_rewrite.so</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . index.php [NC,L]</span><br><span class="line">````</span><br><span class="line">`````</span><br><span class="line"></span><br><span class="line">### 波浪线包裹</span><br><span class="line"></span><br><span class="line">使用3个及以上的波浪线包裹代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code># rewrite`s rules for wordpress pretty url 
LoadModule rewrite_module  modules/mod_rewrite.so
RewriteCond %&#123;REQUEST_FILENAME&#125; !-f
RewriteCond %&#123;REQUEST_FILENAME&#125; !-d
RewriteRule . index.php [NC,L]
</code></pre>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>html小知识</title>
    <url>/2021/08/17/21-56-52/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>显示结果</th>
<th align="left">描述</th>
<th align="left">实体名称</th>
<th align="left">实体编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td align="left">空格</td>
<td align="left">&amp;nbsp;</td>
<td align="left">&amp;#160;</td>
</tr>
<tr>
<td>&lt;</td>
<td align="left">小于号</td>
<td align="left">&amp;lt;</td>
<td align="left">&amp;#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td align="left">大于号</td>
<td align="left">&amp;gt;</td>
<td align="left">&amp;#62;</td>
</tr>
<tr>
<td>&amp;</td>
<td align="left">和号</td>
<td align="left">&amp;amp;</td>
<td align="left">&amp;#38;</td>
</tr>
<tr>
<td>“</td>
<td align="left">引号</td>
<td align="left">&amp;quot;</td>
<td align="left">&amp;#34;</td>
</tr>
<tr>
<td>‘</td>
<td align="left">撇号</td>
<td align="left">&amp;apos; (IE不支持)</td>
<td align="left">&amp;#39;</td>
</tr>
<tr>
<td>￠</td>
<td align="left">分（cent）</td>
<td align="left">&amp;cent;</td>
<td align="left">&amp;#162;</td>
</tr>
<tr>
<td>£</td>
<td align="left">镑（pound）</td>
<td align="left">&amp;pound;</td>
<td align="left">&amp;#163;</td>
</tr>
<tr>
<td>¥</td>
<td align="left">元（yen）</td>
<td align="left">&amp;yen;</td>
<td align="left">&amp;#165;</td>
</tr>
<tr>
<td>€</td>
<td align="left">欧元（euro）</td>
<td align="left">&amp;euro;</td>
<td align="left">&amp;#8364;</td>
</tr>
<tr>
<td>§</td>
<td align="left">小节</td>
<td align="left">&amp;sect;</td>
<td align="left">&amp;#167;</td>
</tr>
<tr>
<td>©</td>
<td align="left">版权（copyright）</td>
<td align="left">&amp;copy;</td>
<td align="left">&amp;#169;</td>
</tr>
<tr>
<td>®</td>
<td align="left">注册商标</td>
<td align="left">&amp;reg;</td>
<td align="left">&amp;#174;</td>
</tr>
<tr>
<td>™</td>
<td align="left">商标</td>
<td align="left">&amp;trade;</td>
<td align="left">&amp;#8482;</td>
</tr>
<tr>
<td>×</td>
<td align="left">乘号</td>
<td align="left">&amp;times;</td>
<td align="left">&amp;#215;</td>
</tr>
<tr>
<td>÷</td>
<td align="left">除号</td>
<td align="left">&amp;divide;</td>
<td align="left">&amp;#247;</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>latex基本语法</title>
    <url>/2021/08/14/12-28-06/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab基本语法</title>
    <url>/2021/08/10/20-48-36/</url>
    <content><![CDATA[<p><strong>胡乱整整，别当真，检索一下还行</strong></p>
<span id="more"></span>

<h1 id="变量与档案存取"><a href="#变量与档案存取" class="headerlink" title="变量与档案存取"></a>变量与档案存取</h1><ol>
<li><p>character也就是char类型指定的话需要用单引号来进行指定,可以直接进行赋值，而不用事先规定好内存大小和数字数组一样也可以用中括号将多个字符串进行合并，也可以当数组使用，比如s1=’nihao’  那么s1(2)输出的结果就为i</p>
</li>
<li><p>如果’a’==s1相当于进行比较此时相同的会输出1，不同的则会输出0</p>
<p>此时若再执行str(str==’a’)=’Z’则会将字符串str中的a全部换成Z.</p>
<p>将字符串前后颠倒可以运用indexing进行解决</p>
</li>
</ol>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>无需先定义可以直接边定义边使用，比如<code>sv.a=1 sv.b=3 sv.c=6</code> 运行后就会形成一个结构体里面存储了这些变量sv(2).a sv(2).b sv(2).c 如此就可以创建一个结构体数组</p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="数据的保存加载"><a href="#数据的保存加载" class="headerlink" title="数据的保存加载"></a>数据的保存加载</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%保存数据表</span></span><br><span class="line">save mydata.mat          </span><br><span class="line">save mydata2.mat -ascii</span><br><span class="line"><span class="comment">%加载数据表</span></span><br><span class="line">load(<span class="string">&#x27;mydata1.mat&#x27;</span>)       </span><br><span class="line">load(<span class="string">&#x27;mydata2.mat&#x27;</span>,<span class="string">&#x27;-ascii&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%读取表格 xlsread(&#x27;*.xlsx也可直接写路径&#x27;,变量,&#x27;表单名&#x27;,&#x27;区域&#x27;)</span></span><br><span class="line">var=xlsread(<span class="string">&#x27;\*.xlsx&#x27;</span>)   </span><br><span class="line">var=xlsread(<span class="string">&#x27;*.xlsx&#x27;</span>,<span class="string">&#x27;B2:D4&#x27;</span>)</span><br><span class="line"><span class="comment">% 写入表格 xlswrite(&#x27;*.xlsx&#x27;,变量,&#x27;表单名&#x27;,&#x27;区域&#x27;)</span></span><br><span class="line">xlswrite(<span class="string">&#x27;\*.xlsx&#x27;</span>,M,<span class="number">1</span>,<span class="string">&#x27;E2:E4&#x27;</span>)   </span><br><span class="line">xlswrite(<span class="string">&#x27;\*.write&#x27;</span>,&#123;<span class="string">&#x27;Mean&#x27;</span>&#125;,<span class="number">1</span>,<span class="string">&#x27;E1&#x27;</span>)    </span><br><span class="line">[Score Header]=xlsread(<span class="string">&#x27;*.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%文件打开方式</span></span><br><span class="line">fid=fopen(<span class="string">&#x27;[filename]&#x27;</span>,<span class="string">&#x27;[permission]&#x27;</span>);   </span><br><span class="line"><span class="comment">%文件打开选项</span></span><br><span class="line"><span class="string">&#x27;r&#x27;</span>  <span class="string">&#x27;r+&#x27;</span>  <span class="string">&#x27;w&#x27;</span>  <span class="string">&#x27;w+&#x27;</span>  <span class="string">&#x27;a&#x27;</span>  <span class="string">&#x27;a+&#x27;</span>        </span><br><span class="line"><span class="comment">%关闭文件</span></span><br><span class="line">status=fclose(fid);</span><br></pre></td></tr></table></figure>
<h3 id="文件写入读取"><a href="#文件写入读取" class="headerlink" title="文件写入读取"></a>文件写入读取</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 读取文件中数据</span></span><br><span class="line">fscanf(fid,format,<span class="built_in">size</span>)    </span><br><span class="line"><span class="comment">%输出</span></span><br><span class="line">fprintf(fid,format,x,y...);</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%示例</span></span><br><span class="line">x = <span class="number">100</span>*<span class="built_in">rand</span>(<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line">fileID = fopen(<span class="string">&#x27;nums1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fprintf(fileID,<span class="string">&#x27;%4.4f\n&#x27;</span>,x);</span><br><span class="line">fclose(fileID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fileID = fopen(<span class="string">&#x27;nums2.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">formatSpec = <span class="string">&#x27;%d %f&#x27;</span>;</span><br><span class="line">sizeA = [<span class="number">2</span> Inf];</span><br><span class="line">A = fscanf(fileID,formatSpec,sizeA)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">feof     <span class="comment">%意为end of file                  </span></span><br><span class="line"><span class="comment">%示例</span></span><br><span class="line"><span class="keyword">while</span> ~feof(fid)</span><br></pre></td></tr></table></figure>

<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%c 单字符   </span></span><br><span class="line"><span class="comment">%d 按十进制整型输出   </span></span><br><span class="line"><span class="comment">%e按指数型输出   </span></span><br><span class="line"><span class="comment">%f按浮点型输出   </span></span><br><span class="line"><span class="comment">%g用以输出实数自动选择f或e格式  </span></span><br><span class="line"><span class="comment">%o以八进制输出整数         </span></span><br><span class="line"><span class="comment">%s   输出字符串    </span></span><br><span class="line"><span class="comment">%u代表无符号整数    </span></span><br><span class="line"><span class="comment">%x表示以十六进制输出     </span></span><br><span class="line"><span class="comment">%p以十六进制输出指针的值</span></span><br></pre></td></tr></table></figure>

<h1 id="结构化程式与自定义函数"><a href="#结构化程式与自定义函数" class="headerlink" title="结构化程式与自定义函数"></a>结构化程式与自定义函数</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注解的方式为“%”单独一个只注解一行，而两个的话则是分节，可以分部分执行，亦可设置断点</p>
<h2 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl+I</td>
<td>可以格式化程序，便于观看</td>
</tr>
<tr>
<td>ctrl+T</td>
<td>取消注释</td>
</tr>
<tr>
<td>ctrl+R</td>
<td>进行注释</td>
</tr>
<tr>
<td>ctrl+J</td>
<td>注释并换行</td>
</tr>
<tr>
<td>F5</td>
<td>运行程序</td>
</tr>
<tr>
<td>ctrl+C</td>
<td>可以强行停止正在执行的程序</td>
</tr>
</tbody></table>
<h2 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号"></a>判断符号</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&lt;    小于</span><br><span class="line">&lt;=   小于或者等于</span><br><span class="line">&gt;      大于</span><br><span class="line">&gt;=    大于或者等于</span><br><span class="line">==     相等</span><br><span class="line">~=      不相等</span><br><span class="line">&amp;&amp;    且</span><br><span class="line">||      或者</span><br></pre></td></tr></table></figure>

<p><strong>条件编程语句 最后均以end作为结尾表示程序结构结束</strong></p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件) 后面跟条件成立之后要执行的程序</span><br><span class="line"><span class="keyword">elseif</span>和<span class="keyword">else</span> 均用于<span class="keyword">else</span>后</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">elseif</span> expression</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">10</span>,,,,,,</span><br><span class="line"><span class="comment">% 循环语句类似于c但又有它自己的表示方法。</span></span><br><span class="line"><span class="keyword">for</span> variable=start:increment:<span class="keyword">end</span></span><br><span class="line">	commmands</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">s = <span class="number">10</span>;</span><br><span class="line">H = <span class="built_in">zeros</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c = <span class="number">1</span>:s</span><br><span class="line">    <span class="keyword">for</span> r = <span class="number">1</span>:s</span><br><span class="line">        H(r,c) = <span class="number">1</span>/(r+c<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="switch-case-otherwise语句"><a href="#switch-case-otherwise语句" class="headerlink" title="switch,case,otherwise语句"></a>switch,case,otherwise语句</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%switch , case也和c语言差不多比如</span></span><br><span class="line">n = input(<span class="string">&#x27;Enter a number: &#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> n</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;negative one&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;zero&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;positive one&#x27;</span>)</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;other value&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = <span class="number">10</span>;</span><br><span class="line">f = n;</span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span></span><br><span class="line">    n = n<span class="number">-1</span>;</span><br><span class="line">    f = f*n;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;n! = &#x27;</span> num2str(f)])</span><br></pre></td></tr></table></figure>

<h2 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try,catch语句"></a>try,catch语句</h2><p><strong>类似于python中的try,except语句</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    a = notaFunction(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">    warning(<span class="string">&#x27;Problem using function.  Assigning a value of 0.&#x27;</span>);</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break,continue"></a>break,continue</h2><p><strong>与其它语言中的作用一样</strong></p>
<h1 id="一些常量和基本操作"><a href="#一些常量和基本操作" class="headerlink" title="一些常量和基本操作"></a>一些常量和基本操作</h1><table>
<thead>
<tr>
<th>常量，命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>disp</td>
<td>类似于print，用于输出</td>
</tr>
<tr>
<td>clear all  或者  clear var</td>
<td>清除某个变量中的数据</td>
</tr>
<tr>
<td>…</td>
<td>matlab将其识别为换行</td>
</tr>
<tr>
<td>close all</td>
<td>关闭所有的图形</td>
</tr>
<tr>
<td>.*  ./  .^</td>
<td>实现对矩阵中每个元素的运算，而非矩阵间的运算</td>
</tr>
<tr>
<td>num2str</td>
<td>将数字转换为字符串</td>
</tr>
<tr>
<td>cell2struct</td>
<td>将子列转换为数据结构中的列</td>
</tr>
<tr>
<td>isempty</td>
<td>判断是否为空</td>
</tr>
<tr>
<td>input</td>
<td>进行输入</td>
</tr>
<tr>
<td>nargin</td>
<td>输入参数的数目</td>
</tr>
<tr>
<td>inputname</td>
<td>显示输入的变量的名字，即实参的名字</td>
</tr>
<tr>
<td>who</td>
<td>会显现出当前有值已定义的变量</td>
</tr>
<tr>
<td>whos</td>
<td>则会出现更多的内容包括变量类型</td>
</tr>
<tr>
<td>exp(n)</td>
<td>表示的是自然底数e的n次方</td>
</tr>
<tr>
<td>inf</td>
<td>表示为无穷</td>
</tr>
<tr>
<td>eps</td>
<td>表示为很小很小的数</td>
</tr>
<tr>
<td>NaN</td>
<td>表示为未定义的数</td>
</tr>
<tr>
<td>pi</td>
<td>表示为π</td>
</tr>
<tr>
<td>format</td>
<td>数据显示形式有<br />bank两个小数点<br />hex十六进制<br />longE , shortE科学计数法<br />rat 分数<br />long 小数精度提高<br />short 小数精度减小</td>
</tr>
<tr>
<td>rem(a,b)</td>
<td>a对b取余</td>
</tr>
<tr>
<td>prod(1:n)</td>
<td>意为n的阶乘</td>
</tr>
<tr>
<td>global</td>
<td>声明全局变量</td>
</tr>
<tr>
<td>conj()</td>
<td>求共轭复数</td>
</tr>
</tbody></table>
<h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>= <span class="title">mean</span><span class="params">(x)</span> 定义函数在<span class="title">mean</span>.<span class="title">m</span>文件中</span></span><br><span class="line"><span class="comment">%定义函数时如果有多个输出的值比如</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a f]</span>=<span class="title">acc</span><span class="params">(v1,v2,v3,v4)</span>        </span></span><br><span class="line">	a=(v1-v2); </span><br><span class="line">	f=v3-v4;    </span><br><span class="line"><span class="comment">%那么调用时应该为[acc,force]=acc(1,2,3,4)</span></span><br></pre></td></tr></table></figure>

<h2 id="指针指向函数"><a href="#指针指向函数" class="headerlink" title="指针指向函数"></a>指针指向函数</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(x) <span class="built_in">exp</span>(<span class="number">-2</span>,x)  <span class="built_in">plot</span>(x,f(x))  </span><br><span class="line"><span class="comment">%f指向的是exp这个函数</span></span><br></pre></td></tr></table></figure>

<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td>/</td>
<td>右除</td>
</tr>
<tr>
<td>\</td>
<td>左除</td>
</tr>
<tr>
<td>^</td>
<td>次方</td>
</tr>
<tr>
<td>‘</td>
<td>矩阵的转置</td>
</tr>
<tr>
<td>.*    .^     ./      .\</td>
<td>表示对矩阵中的对应每一项进行此运算</td>
</tr>
</tbody></table>
<h2 id="矩阵切片"><a href="#矩阵切片" class="headerlink" title="矩阵切片"></a>矩阵切片</h2><p>matalb矩阵中编号是一列一列读取的</p>
<ol>
<li>A(8)表示一列列读取时的第八个数；</li>
<li>A([1 3 5])分别输出第1,第3，第5个数；</li>
<li>A([1,3;1,3]) 表示出现第一个和第三个出现两排的矩阵； </li>
<li>A(3,2)表示第三排第二列的数； </li>
<li>A([1 3],[2 3])表示输出第一和第三排与第二列和第三列相交产生的数</li>
<li>索引单个值x(m,n)表示数组x中第m行，第n列那个数，若需输出x第一行的所有元素可以用x(1,:)   若需输出第二列的所有元素则需x(:,2)</li>
</ol>
<p>要使某一矩阵中的某一行或者某一列<strong>消失</strong>可以使用A(3,:)=[],就会把哪一排全部变为空，消失</p>
<h2 id="矩阵函数"><a href="#矩阵函数" class="headerlink" title="矩阵函数"></a>矩阵函数</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eye</span>(n)  <span class="comment">%创建一个n阶单位矩阵</span></span><br><span class="line"><span class="built_in">zeros</span>(n1,n2)  <span class="comment">%创建一个n1排，n2列的零矩阵</span></span><br><span class="line"><span class="built_in">ones</span>(n1,n2) <span class="comment">%创建一个n1*n2维的1矩阵</span></span><br><span class="line"><span class="built_in">diag</span>([<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])  <span class="comment">%创建一个对角线为1 2 3 4的对角矩阵</span></span><br><span class="line"><span class="built_in">sort</span>(A) <span class="comment">%对每一列进行从小到大的排序</span></span><br><span class="line"><span class="built_in">sortrows</span>(A) <span class="comment">%是把排进行绑定，通过第一列进行从大到小的排序</span></span><br><span class="line"><span class="built_in">max</span> <span class="built_in">min</span> 取最大值最小值 若是用于一个多维矩阵则会列出每一列的最大(最小)值。若是取矩阵中的最大值可这样编写<span class="built_in">max</span>(<span class="built_in">max</span>(A))，以下类似</span><br><span class="line">	sum是每一个列的加和</span><br><span class="line">	<span class="built_in">mean</span>是每一列的平均值；</span><br><span class="line"><span class="built_in">size</span>(A) 会展现矩阵的维度</span><br><span class="line"><span class="built_in">length</span>(A) 仅展示矩阵的横向长度</span><br><span class="line"><span class="built_in">find</span>(A==某个元素) 就会输出这个元素在矩阵中的位置</span><br><span class="line">若是从某一确定行中提取从第m个到第n个元素时用 x(m:n) 此时仅有一行数。</span><br><span class="line">使用<span class="keyword">end</span>表示某列或某行最后一个元素，如A(<span class="keyword">end</span>,<span class="number">2</span>)表示矩阵A的最后一行第二个元素，<span class="keyword">end</span>可以和运算符结合使用，如<span class="keyword">end</span>+<span class="number">1</span>,<span class="keyword">end</span><span class="number">-1</span> ……</span><br><span class="line"><span class="built_in">round</span>函数用于实现四舍五入</span><br><span class="line">[a,b]=<span class="built_in">max</span>(vr) 其中a是矩阵vr中最大的那个值，b则代表矩阵vr中最大的那个值所对应的索引值。</span><br><span class="line">[a,b]=<span class="built_in">size</span>(vr)其中a对应矩阵vr中的行数，b则对应矩阵vr中的列数</span><br><span class="line">randi(<span class="number">20</span>,<span class="number">5</span>,<span class="number">7</span>) <span class="comment">% 表示返回一个以1到20间的随机数组成的5*7数组，而将20替换为[a,b] 则表示返回a到b间的随机数</span></span><br><span class="line">eig 计算特征值</span><br><span class="line">x=<span class="number">20</span>:<span class="number">2</span>:<span class="number">26</span>  <span class="comment">%意味着x是一个包含着等距为2，且从20到26所有数的数组。即20 22 24 26   而x=1:4 默认间距为1，即1 2 3 4.</span></span><br><span class="line"><span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>)表示从<span class="number">0</span>到<span class="number">1</span>的五个间距数</span><br></pre></td></tr></table></figure>

<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&quot;ro-&quot;</span>,<span class="string">&quot;LineWidth&quot;</span>,<span class="number">5</span>),xlabel(<span class="string">&quot;时间&quot;</span>),ylabel(<span class="string">&quot;温度&quot;</span>) <span class="comment">%表示将绘制一条红色（r）虚线（--）,并使用圆圈（o）标记转折点，线宽为5，x轴标签为时间,y轴标签是温度</span></span><br><span class="line">grid on  <span class="comment">% 加入背景网格</span></span><br><span class="line"><span class="built_in">plot</span>(x,y),axis([xmin xmax ymin ymax])  <span class="comment">%设置坐标比例</span></span><br><span class="line">subplot(row,colum,sequence) <span class="comment">%对图进行分块</span></span><br><span class="line">polar(θ,r) <span class="comment">%极坐标绘图</span></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,…)添加图例</span><br><span class="line">axis equal <span class="comment">%横纵间隔各自相等</span></span><br><span class="line"><span class="built_in">plot</span>(t,f,t,g)画出f和g的函数图像</span><br><span class="line">bar绘制条形图 bar(v1) 对应v1中元素个数绘制条形图； bar(x,y) 对应x的位置上绘制对应y值的条形图</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">cos</span>(x))画出函数图像</span><br><span class="line"><span class="built_in">logspace</span>(a,b,n) <span class="comment">%列出a,b间n个之间相差相等对数的数</span></span><br><span class="line">shading interp  <span class="comment">%对颜色着色进行插值处理使颜色平滑过渡 </span></span><br><span class="line">colormap(gray) 使图形全部变为灰色</span><br><span class="line">stem()        <span class="comment">%离散图         可以用fill为所有形状填充颜色</span></span><br><span class="line">area()画出以围成的形状展示的图形</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(a:b:c,m:n:q)对x,y分别定义区间</span><br><span class="line">imread(path, name) 读取</span><br><span class="line">imagshow(path, name) 展示</span><br><span class="line">b=rgb2gray(a) 将图片变成灰色</span><br><span class="line"></span><br><span class="line">text(position,<span class="string">&#x27;极小值&#x27;</span>)对特定位置的点进行标注</span><br><span class="line">subs(函数,旧,新)   替换比较分别为新数值时的函数值  例如 subs(F,[b,x],[<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">plot</span>(double(s(<span class="number">1</span>))*[<span class="number">1</span> <span class="number">1</span>],[<span class="number">-1</span> <span class="number">2</span>],<span class="string">&#x27;--&#x27;</span>)  画出渐近线</span><br><span class="line">ezplot(表达式(不用赋值),[区间范围xmin,xmax]), set(findobj(<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;line&#x27;</span>),<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="解方程组"><a href="#解方程组" class="headerlink" title="解方程组"></a>解方程组</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms定义变量    equ=表达式==值     solve(equ,指定特定变量)</span><br><span class="line">equ1=<span class="number">5</span>*x+<span class="number">4</span>*y==<span class="number">6</span>;  equ2=x<span class="number">-6</span>y==<span class="number">0</span>; solve(equ1,equ2);</span><br><span class="line">fourier()    <span class="comment">%傅里叶变换</span></span><br><span class="line">	ifourier逆傅里叶变换</span><br><span class="line">laplace(函数) <span class="comment">%拉普拉斯变换</span></span><br><span class="line">	ilaplace(函数)逆变换 </span><br><span class="line">int(函数,积分变量)代表对变量x的积分</span><br><span class="line">dsolve(<span class="string">&#x27;Dy=x+3&#x27;</span>,<span class="string">&#x27;y(0)=3&#x27;</span>,<span class="string">&#x27;变量名&#x27;</span>)  不写时变量默认为t</span><br><span class="line">std求标准差</span><br><span class="line">var求方差</span><br><span class="line">midian()求中位数</span><br><span class="line">pretty(函数名)   使函数变得更加符合人类的写法</span><br><span class="line">[t,y]=ode23[<span class="string">&#x27;函数&#x27;</span>,[取值范围],初值]</span><br><span class="line">[t,w]=ode45(<span class="string">&#x27;eql&#x27;</span>,[<span class="number">0</span> <span class="number">2</span>*<span class="built_in">pi</span>],<span class="number">2</span>)</span><br><span class="line">重积分   f=x^<span class="number">2</span>*y    int(int(f,x,<span class="number">2</span>,<span class="number">4</span>),y,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">数值积分  trapz(x,y)</span><br><span class="line">线性或高次幂拟合plolyfit(x,y,高次项次数)多项式拟合</span><br><span class="line"><span class="built_in">isequal</span>(F1,F2) 函数相等返回<span class="number">1</span>,函数不等返回<span class="number">0.</span></span><br><span class="line">函数的级数展开taylor(函数),对函数进行泰勒展开</span><br><span class="line">limit(函数名,变量,x,<span class="string">&#x27;left&#x27;</span>)      求左极限,右极限同理</span><br><span class="line">expand(未展开的表达式), 类似合并collect()</span><br><span class="line">因式分解<span class="built_in">factor</span>(表达式), simplify()简化合并</span><br><span class="line">set(h(<span class="number">1</span>),<span class="string">&#x27;linestyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>).</span><br><span class="line">contour(x,y,z)以二维形式画出三维图像(俯视图)</span><br><span class="line">contour3(x,y,z,数字)画出函数三维图像,数字的大小表示曲线的密集程度</span><br><span class="line">surface(x,y,z,<span class="string">&#x27;EdgeColor&#x27;</span>,[<span class="number">.8</span><span class="number">.8</span><span class="number">.8</span>],<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)可以直接画出曲面,</span><br><span class="line">[C,h]=contour(x,y,z);  set(h,<span class="string">&#x27;showText&#x27;</span>,<span class="string">&#x27;on&#x27;</span>,<span class="string">&#x27;TextStep&#x27;</span>,get(h,<span class="string">&#x27;LevelStep&#x27;</span>)*<span class="number">2</span>)</span><br><span class="line">mesh(x,y,z) 可以画出一些三维网格曲面类似于surf(x,y,z). 而surfc(x,y,z)则为带有投影的曲面即二维三维同时呈现  surfl(x,y,z)</span><br><span class="line">fft(函数名，n)快速傅里叶变换   </span><br><span class="line">贝塞尔函数<span class="built_in">besselj</span>(n,r)</span><br><span class="line">特殊函数 <span class="built_in">gamma</span>(x)</span><br><span class="line">点积<span class="built_in">dot</span>(a,b)  叉积<span class="built_in">cross</span>()</span><br><span class="line">fplot(@x <span class="built_in">sin</span>(x),[<span class="number">0</span>,<span class="number">4</span>])  画<span class="built_in">sin</span>(x)在一定区间内的函数</span><br><span class="line">矩阵分解(l,u)=lu()</span><br><span class="line">正交积分 quad(<span class="string">&#x27;函数名&#x27;</span>，xmin,xmax)</span><br><span class="line">heaviside(t)阶梯函数</span><br><span class="line">diff(函数名,求导次数) 求微分导数</span><br><span class="line">幻方矩阵<span class="built_in">magic</span>()</span><br><span class="line">rref() 求阶梯矩阵</span><br><span class="line">求矩阵的秩rank()</span><br><span class="line">矩阵的逆inv()</span><br><span class="line">求行列式的值det() </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础语法</title>
    <url>/2021/08/20/15-28-45/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a>&lt;script&gt;元素</h2><ul>
<li>async: 可以保证脚本立刻被下载，同时不影响其他资源的加载</li>
<li>defer: 表示脚本延迟到文档完全解析和显示后再执行</li>
</ul>
<h2 id="解决XHTML不兼容问题"><a href="#解决XHTML不兼容问题" class="headerlink" title="解决XHTML不兼容问题"></a>解决XHTML不兼容问题</h2><p>可以将js代码放入如下代码块中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;![CDATA[</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//]]&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a>&lt;noscript&gt;元素</h2><p>用以提示不支持或者js被禁用的用户，比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        此页面有js程序未显示出，可能无法正常实用，请打开js开关或更换支持js的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul>
<li>添加var后，其所定义的变量会成为包含他的函数的局部变量，若要在函数内定义<strong>全局变量</strong>可以去掉var</li>
<li>var有声明提升的效果</li>
<li>声明的全局变量会成为window对象的属性，var name;就会有window.name</li>
</ul>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul>
<li>let声明的是块作用域，是函数作用域的子集</li>
<li>let不允许在同一个块中进行多次声明</li>
<li>let不会有声明提升效果，未定义就是未定义</li>
<li>同时let声明的全局变量不会成为window对象的属性</li>
<li>无法用条件语句检测是否某个变量是否已经被let声明过</li>
<li>for循环中使用let可以避免变量渗透出去</li>
</ul>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul>
<li>不允许修改其所赋的值</li>
<li>不允许重复声明</li>
<li>作用域也是块</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="keyword">var</span>; <span class="comment">//可以显示变量的数据类型</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">新定义声明的未赋值的值默认为<span class="literal">undefined</span>，而未定义的变量则会直接报错</span><br><span class="line"><span class="keyword">let</span> age=<span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p><strong>实质上是一个空对象指针，需要保存对象时建议用NULL进行初始化</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car=<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>布尔类型与其他数据类型间的转换</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转换为true的值</th>
<th>转换为false的值</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>非空</td>
<td>“”</td>
</tr>
<tr>
<td>Number</td>
<td>非零数值</td>
<td>0, NaN</td>
</tr>
<tr>
<td>Object</td>
<td>任意对象</td>
<td>null</td>
</tr>
<tr>
<td>Undefined</td>
<td>N/A  (不存在)</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ul>
<li>十进制可直接写出</li>
<li>八进制需要数字的第一位为0</li>
<li>十六进制需要数字的前面加上0x</li>
</ul>
<h4 id="浮点值"><a href="#浮点值" class="headerlink" title="浮点值"></a>浮点值</h4><ul>
<li>形如a.b的形式称为浮点值</li>
<li>也有科学计数法1e7，表示1x10<sup>7</sup></li>
<li>精确值可达17位小数</li>
<li>无穷用Infinity表示</li>
<li>用isFinite()来进行判断是否为无穷</li>
</ul>
<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><ul>
<li>不是数值，运算过程出错会出现这个值</li>
<li>可以使用isNaN()来判断是否不是数值，假如是数值则返回false</li>
</ul>
<h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p><strong>Number()</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>对应结果</th>
</tr>
</thead>
<tbody><tr>
<td>布尔值</td>
<td>true为1，false为0</td>
</tr>
<tr>
<td>数值</td>
<td>直接返回</td>
</tr>
<tr>
<td>null</td>
<td>返回0</td>
</tr>
<tr>
<td>字符串</td>
<td>空字符串返回0，非空返回NaN<br />包含数字的按照正常的转换习惯进行转换<br />会省略前面的零</td>
</tr>
<tr>
<td>对象</td>
<td>则会调用valueof()方法并按照上述规则进行转换返回</td>
</tr>
</tbody></table>
<p><strong>parseInt(str,base)</strong></p>
<p>碰到不是数值字符或者正负号直接结束读取</p>
<p><strong>parseFlaot()</strong></p>
<p>解析到非数值字符或第二个小数点时停止读取</p>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><ul>
<li>长度可以通过text.length来进行获取</li>
<li>\xnn和\xnnnn分别表示ascii和unicode字符</li>
<li>满足字符串之间的相加</li>
</ul>
<p><strong>toString()</strong></p>
<ul>
<li>num.toString(8)将数字转换为八进制字符串</li>
<li>其他类型直接返回相应的值对应的字符串</li>
</ul>
<p><strong>模板字面量</strong></p>
<ul>
<li>保留换行，并且允许跨行定义字符串</li>
</ul>
<p><strong>字符串插值</strong></p>
]]></content>
      <categories>
        <category>html</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql基本语法</title>
    <url>/2021/08/07/23-00-34/</url>
    <content><![CDATA[<h1 id="基本书写规则"><a href="#基本书写规则" class="headerlink" title="基本书写规则"></a>基本书写规则</h1><ol>
<li><p>SQL 语句要以分号<code>;</code>结尾</p>
</li>
<li><p>SQL 语句不区分大小写</p>
<span id="more"></span></li>
<li><p>常数的书写方式是固定的</p>
<ol>
<li>SQL 语句中含有字符串的时候，需要使用英文单引号<code>&#39;</code>将字符串括起来</li>
<li>SQL 语句中含有日期的时候 建议使用’2020-01-26’ 这种<code>&#39;年-月-日&#39;</code></li>
<li>在 SQL 语句中书写数字的时候，不需要使用任何符号标识，直接写成 1000 这样的数字即可</li>
</ol>
</li>
<li><p>单词需要用半角空格或者换行来分隔</p>
</li>
</ol>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>
<p>通俗的说就是，MySQL 在 Windows 系统下不区分大小写，但在 Linux 系统下默认区分大小写。因此，数据库名、表名和字段名，都不允许出现任何大写字母，避免节外生枝。</p>
<h1 id="一-查看数据库"><a href="#一-查看数据库" class="headerlink" title="一. 查看数据库"></a>一. 查看数据库</h1><h2 id="1-查看特定数据库"><a href="#1-查看特定数据库" class="headerlink" title="1. 查看特定数据库"></a>1. 查看特定数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES [LIKE &#x27;数据库名&#x27;];</span><br></pre></td></tr></table></figure>

<h2 id="2-查看所有数据库"><a href="#2-查看所有数据库" class="headerlink" title="2. 查看所有数据库"></a>2. 查看所有数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<h2 id="3-查看特定数据库"><a href="#3-查看特定数据库" class="headerlink" title="3. 查看特定数据库"></a>3. 查看特定数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES LIKE &#x27;test_db&#x27;;  # 查找特定数据库</span><br><span class="line">SHOW DATABASES LIKE &#x27;%test%&#x27;;   # 查询名字中包含test的数据库</span><br><span class="line">SHOW DATABASES LIKE &#x27;db%&#x27;;      # 查询以db开头的数据库</span><br><span class="line">SHOW DATABASES LIKE &#x27;%db&#x27;;      # 查询以db结尾的数据库</span><br></pre></td></tr></table></figure>

<h1 id="二-创建数据库"><a href="#二-创建数据库" class="headerlink" title="二. 创建数据库"></a>二. 创建数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;  # 中括号表示可有可无的意思</span><br><span class="line">[[DEFAULT] CHARACTER SET &lt;字符集名&gt;] </span><br><span class="line">[[DEFAULT] COLLATE &lt;校对规则名&gt;];</span><br></pre></td></tr></table></figure>

<p>示例：使用 MySQL 命令行工具创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写），输入的 SQL 语句与执行结果如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE IF NOT EXISTS test_db_char</span><br><span class="line">    -&gt; DEFAULT CHARACTER SET utf8</span><br><span class="line">    -&gt; DEFAULT COLLATE utf8_chinese_ci;</span><br></pre></td></tr></table></figure>

<h1 id="三-更改数据库"><a href="#三-更改数据库" class="headerlink" title="三. 更改数据库"></a>三. 更改数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE [数据库名] &#123; </span><br><span class="line">[ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |</span><br><span class="line">[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>使用命令行工具将数据库 test_db 的指定字符集修改为 gb2312，默认校对规则修改为 gb2312_unicode_ci，输入 SQL 语句与执行结果如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER DATABASE test_db</span><br><span class="line">    -&gt; DEFAULT CHARACTER SET gb2312</span><br><span class="line">    -&gt; DEFAULT COLLATE gb2312_chinese_ci;</span><br></pre></td></tr></table></figure>

<h1 id="四-删除数据库"><a href="#四-删除数据库" class="headerlink" title="四. 删除数据库"></a>四. 删除数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE [ IF EXISTS ] &lt;数据库名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li>DROP DATABASE：删除数据库中的所有表格并同时删除数据库。使用此语句时要非常小心，以免错误删除。如果要使用 DROP DATABASE，需要获得数据库 DROP 权限。</li>
<li>MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</li>
</ol>
<h1 id="五-选择数据库"><a href="#五-选择数据库" class="headerlink" title="五. 选择数据库"></a>五. 选择数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE &lt;数据库名&gt;</span><br></pre></td></tr></table></figure>

<p>选择当前要使用的数据库</p>
<h1 id="六-数据库注释"><a href="#六-数据库注释" class="headerlink" title="六. 数据库注释"></a>六. 数据库注释</h1><h2 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h2><ul>
<li><code>#</code>注释符后直接加注释内容</li>
<li><code>--</code>注释符后需要加一个空格再加注释内容</li>
</ul>
<h2 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h2><ul>
<li>多行注释使用<code>/* */</code>注释符注释内容写在<code>/*</code>和<code>*/</code>之间，可以跨多行。</li>
</ul>
<h1 id="七-帮助命令"><a href="#七-帮助命令" class="headerlink" title="七. 帮助命令"></a>七. 帮助命令</h1><ol>
<li>HELP contents 命令查看帮助文档的目录列表</li>
<li><code>HELP Data Types;</code> 命令查看所支持的数据类型</li>
<li><code>HELP CREATE TABLE</code> 命令查询创建数据表的语法</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql配置环境</title>
    <url>/2021/08/08/09-32-51/</url>
    <content><![CDATA[<p>MySQL关是一种关系数据库管理系统，所使用的 SQL 语言是用于访问数据库的最常用的标准化语言，其特点为体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，在 Web应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一</p>
<span id="more"></span>

<p>本博文以免安装的为例，<a href="https://dev.mysql.com/downloads/mysql/">点击下载</a>，选择如下图所示的免安装版本</p>
<p><img src="/images/msql1.jpg"></p>
<h1 id="一-配置环境"><a href="#一-配置环境" class="headerlink" title="一. 配置环境"></a>一. 配置环境</h1><p>下载完成后后解压到自己选择的目录下，而后复制mysql的bin目录路径比如D:\mysql\bin</p>
<p>win+r输入sysdm.cpl，打开系统属性  &gt;&gt; 高级 &gt;&gt; 环境变量 &gt;&gt; 系统变量中的path &gt;&gt; 新建 &gt;&gt; 再把刚刚复制的路径粘贴进去， 别忘记确定保存，如下图</p>
<p><img src="/images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.jpg"></p>
<p><img src="/images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.jpg"></p>
<h1 id="二-安装服务"><a href="#二-安装服务" class="headerlink" title="二. 安装服务"></a>二. 安装服务</h1><p>以上都完成的情况下，再以管理员模式打开命令提示符，依次输入以下命令回车</p>
<h2 id="1-安装mysql服务"><a href="#1-安装mysql服务" class="headerlink" title="1. 安装mysql服务"></a>1. 安装mysql服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br><span class="line"><span class="comment"># 如果后期标记删除mysql,用下面的命令</span></span><br><span class="line">sc delete mysql</span><br></pre></td></tr></table></figure>

<h2 id="2-初始化mysql"><a href="#2-初始化mysql" class="headerlink" title="2. 初始化mysql"></a>2. 初始化mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>

<p>在这里，初始化会产生一个随机密码,如下图框框所示，记住这个密码，后面会用到</p>
<p><img src="/images/mysql2.png"></p>
<h2 id="3-开启mysql服务"><a href="#3-开启mysql服务" class="headerlink" title="3. 开启mysql服务"></a>3. 开启mysql服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br><span class="line"><span class="comment"># 顺便说一下关闭的命令</span></span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<h2 id="4-登录验证"><a href="#4-登录验证" class="headerlink" title="4. 登录验证"></a>4. 登录验证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>然后输入刚刚产生的随机密码，不包括前面的空格，如果出现下面图片的状态代表已经安装配置成功</p>
<p><img src="/images/mysql3.jpg"></p>
<h2 id="5-修改密码"><a href="#5-修改密码" class="headerlink" title="5. 修改密码"></a>5. 修改密码</h2><p>由于初始化产生的随机密码太复杂，不便于我们登录mysql，因此，我们可以修改一个自己能记住的密码，在登录的情况下输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这时登录密码就会改为root，至此大功告成</p>
<h1 id="三-配置文件"><a href="#三-配置文件" class="headerlink" title="三. 配置文件"></a>三. 配置文件</h1><p>在mysql根目录下创建一个名为my.ini的文件，如下图</p>
<p><img src="/images/mysql4.jpg"></p>
<p>你可以参考我的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<h1 id="四-注意事项"><a href="#四-注意事项" class="headerlink" title="四. 注意事项"></a>四. 注意事项</h1><ol>
<li>如果开启服务后，还是不能登录，有可能是没有开系统中mysql的服务，找到设备管理器中的服务选择mysql开启即可如下图<img src="/images/%E6%9C%8D%E5%8A%A1.jpg"></li>
<li>还有默认开放端口为3306，在上面的ini文件里已定义，但我的8080端口也被占了，大家看着改吧，这个没太大影响</li>
</ol>
<p>最后，欢迎评论区讨论</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>配置环境</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinputplus</title>
    <url>/2021/08/16/11-45-08/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputStr() <span class="comment"># 类似于内置的input函数</span></span><br><span class="line">inputNum() <span class="comment"># 确保返回的数是整数或者小数，取决于输入的是否有小数点</span></span><br><span class="line">	- <span class="built_in">min</span></span><br><span class="line">    - <span class="built_in">max</span></span><br><span class="line">    - greaterthan</span><br><span class="line">    - lessthan</span><br><span class="line">    - blank=<span class="literal">True</span>可以输入空格</span><br><span class="line">    - limit=<span class="number">2</span></span><br><span class="line">    - timeout=<span class="number">10</span></span><br><span class="line">    - default=<span class="number">0</span></span><br><span class="line">    - allowRegexes</span><br><span class="line">    - blockRegexes</span><br><span class="line">inputChoice() <span class="comment">#确保输入提供的选项之一</span></span><br><span class="line">inputMenu() <span class="comment"># 类似于Choice但提供一个菜单</span></span><br><span class="line">inputDatetime() <span class="comment">#确保输入日期和时间</span></span><br><span class="line">inputYesNo() <span class="comment">#确保输入yes和no响应</span></span><br><span class="line">inputEmail() <span class="comment">#确保输入有效的邮件地址</span></span><br><span class="line">inputBool() <span class="comment"># 和yesno类似，但接受true或false并返回一个bool值</span></span><br><span class="line">inputFilepath() <span class="comment"># 确保输入有效的文件路径和文件名，并检查是否存在</span></span><br><span class="line">inputPassword() <span class="comment"># 输入时显示为*，保护隐私</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础库</tag>
      </tags>
  </entry>
  <entry>
    <title>python-IO操作</title>
    <url>/2021/08/10/11-50-09/</url>
    <content><![CDATA[<p><strong>python从内存中读取的方法</strong></p>
<span id="more"></span>

<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f.getvalue())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<p><strong>进阶</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">data = urlopen(<span class="string">&quot;https://pythonscraping.com/files/MontyPythonAlbums.csv&quot;</span>).read().decode(<span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">data_file = StringIO(data)</span><br><span class="line">csv_reader = csv.reader(data_file) <span class="comment"># 相当于在内存中创建了一个文件，进行读取</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure>

<h2 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p><strong>读取操作二进制数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>或者用文件初始化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>进阶 读取docx文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipFile</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO, <span class="built_in">open</span></span><br><span class="line">word_file = <span class="built_in">open</span>(<span class="string">&quot;D:\\desktop\\2.docx&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">word_file = BytesIO(word_file)</span><br><span class="line">document = ZipFile(word_file)</span><br><span class="line">xml_content = document.read(<span class="string">&#x27;word/document.xml&#x27;</span>)</span><br><span class="line">word_file.close()</span><br><span class="line"><span class="built_in">print</span>(xml_content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="读取pdf文件"><a href="#读取pdf文件" class="headerlink" title="读取pdf文件"></a>读取pdf文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_pdf</span>(<span class="params">pdf_file</span>):</span></span><br><span class="line">    rsrc_mgr = PDFResourceManager()</span><br><span class="line">    ret_str = StringIO()</span><br><span class="line">    la_params = LAParams()</span><br><span class="line">    device = TextConverter(rsrc_mgr, ret_str, laparams=la_params)</span><br><span class="line">    process_pdf(rsrc_mgr, device, pdf_file)</span><br><span class="line">    device.close()</span><br><span class="line">    content = ret_str.getvalue()</span><br><span class="line">    ret_str.close()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">pdf_file = <span class="built_in">open</span>(<span class="string">&#x27;D:\\desktop\\2.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">output_string = read_pdf(pdf_file)</span><br><span class="line"><span class="built_in">print</span>(output_string)</span><br><span class="line">pdf_file.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>IO</tag>
        <tag>文件处理</tag>
      </tags>
  </entry>
  <entry>
    <title>mathtype与word快捷键冲突</title>
    <url>/2021/08/05/09-00-07/</url>
    <content><![CDATA[<p><strong>mathtype和word都有ctrl+c复制键，但两者的估计是哪里的信号冲突，安装了mathtype后在word里面的ctrl+c组合键就会失效，一般的话按照默认路径是不会出事的</strong></p>
<span id="more"></span>

<p><strong>但如果你改动了路径，而且不巧遇到了冲突的情况，那就只按照这个教程来试试，说不定可以哈哈，<a href="https://blog.csdn.net/qq_39004111/article/details/106322554">原文链接</a>在这，怕作者删了，就留一份</strong></p>
<p><img src="/images/mathtype.png" alt="mathtype与word快捷键冲突"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>answer</tag>
      </tags>
  </entry>
  <entry>
    <title>python-flask</title>
    <url>/2021/08/10/13-11-15/</url>
    <content><![CDATA[<p><strong>继续鸽</strong></p>
<span id="more"></span>

<h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ivan&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_ivan</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello ivan&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/wanstarge&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_wanstarge</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello wanstarge&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/muxing&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_muxing</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello muxing&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>python-PIL</title>
    <url>/2021/08/10/13-11-25/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="图片模糊化"><a href="#图片模糊化" class="headerlink" title="图片模糊化"></a>图片模糊化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line">test = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">blurryTest = test.<span class="built_in">filter</span>(ImageFilter.GaussianBlur)</span><br><span class="line">blurryTest.save(<span class="string">&quot;test_blurred.jpg&quot;</span>)</span><br><span class="line">blurryTest.show()</span><br></pre></td></tr></table></figure>

<h1 id="对图片清洗并识别"><a href="#对图片清洗并识别" class="headerlink" title="对图片清洗并识别"></a>对图片清洗并识别</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clearFile</span>(<span class="params">filePath, newFilePath</span>):</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(filePath)</span><br><span class="line">    <span class="comment"># 对图片进行阈值过滤，然 后保存</span></span><br><span class="line">    image = image.point(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x &lt; <span class="number">143</span> <span class="keyword">else</span> <span class="number">255</span>)</span><br><span class="line">    image.save(newFilePath)</span><br><span class="line">    <span class="comment">#　调用tesseract对图片进行OCR识别</span></span><br><span class="line">    subprocess.call([<span class="string">&quot;tesseract&quot;</span>, newFilePath, <span class="string">&quot;output&quot;</span>])</span><br><span class="line">    <span class="comment"># 打开文件读取结果</span></span><br><span class="line">    outputFile = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(outputFile.read())</span><br><span class="line">    outputFile.close()</span><br><span class="line">clearFile(<span class="string">&quot;test_blurred.jpg&quot;</span>, <span class="string">&quot;text_clear.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>图片处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python-OS</title>
    <url>/2021/08/10/11-56-18/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="基本示例重命名"><a href="#基本示例重命名" class="headerlink" title="基本示例重命名"></a>基本示例重命名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">r&#x27;D:\图片\beautiful&#x27;</span>  <span class="comment"># 填入待修改命名的图片路径</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> old_name <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    num = <span class="built_in">str</span>(num)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(num) == <span class="number">1</span>:</span><br><span class="line">        num = <span class="string">f&#x27;00<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(num) == <span class="number">2</span>:</span><br><span class="line">        num = <span class="string">f&#x27;0<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(num) == <span class="number">3</span>:</span><br><span class="line">        num = <span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line">    new_name = num + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    os.chdir(path)</span><br><span class="line">    os.rename(old_name, new_name)</span><br><span class="line">    num = <span class="built_in">int</span>(num)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>文件处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python-nltk</title>
    <url>/2021/08/10/13-10-46/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="字词组"><a href="#字词组" class="headerlink" title="字词组"></a>字词组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> text6</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> ngrams</span><br><span class="line">four_grams = ngrams(text6, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> four_gram <span class="keyword">in</span> four_grams:</span><br><span class="line">    <span class="keyword">if</span> four_gram[<span class="number">0</span>] == <span class="string">&quot;you&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(four_gram)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础库</title>
    <url>/2021/08/10/13-03-20/</url>
    <content><![CDATA[<p><strong>一些比较基础的库，没有太多内容，就全部放这了</strong></p>
<span id="more"></span>

<h1 id="1-math库"><a href="#1-math库" class="headerlink" title="1. math库"></a>1. math库</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> pi        圆周率</span><br><span class="line"><span class="number">2.</span> e          自然常数</span><br><span class="line"><span class="number">3.</span> ceil(x)     对浮点数向上取整</span><br><span class="line"><span class="number">4.</span> floor(x)   对浮点数向下取整</span><br><span class="line"><span class="number">5.</span> <span class="built_in">pow</span>(x,y) 计算x的y次方</span><br><span class="line"><span class="number">6.</span> log(x)      以e为基的对数</span><br><span class="line"><span class="number">7.</span> log10(x)     以十为基的对数 </span><br><span class="line"><span class="number">8.</span> sqrt(x)         平方根</span><br><span class="line"><span class="number">9.</span> exp(x)       e^<span class="string">&quot;x&quot;</span> </span><br><span class="line"><span class="number">10.</span> degrees(x)    将弧度值转换为角度值</span><br><span class="line"><span class="number">11.</span> radians(x)   将角度值转换为弧度值</span><br><span class="line"><span class="number">12.</span> sin(x)  cos(x)  tan(x)  asin(x)   acos(x)  atan(x)  正弦余弦正切  反正弦余弦正切</span><br><span class="line"><span class="number">13.</span> seed(x)给随机数一个种子值,默认随机种子是系统时钟</span><br><span class="line"><span class="number">14.</span> random()生成一个[<span class="number">0</span>,<span class="number">1.0</span>]之间的小数</span><br><span class="line"><span class="number">15.</span> uniform(a,b)生成一个a到b之间的随机小数</span><br><span class="line"><span class="number">16.</span> randint(a,b) 生成一个a到b之间的随机整数</span><br><span class="line"><span class="number">17.</span> randrange(a,b,c) 随机生成一个从a开始到b以c递增的列表</span><br><span class="line"><span class="number">18.</span> choice(&lt;<span class="built_in">list</span>&gt;) 从列表中随机返回一个元素</span><br><span class="line"><span class="number">19.</span> shuffle(&lt;<span class="built_in">list</span>&gt;) 将列表中元素随机打乱</span><br><span class="line"><span class="number">20.</span> sample(&lt;<span class="built_in">list</span>&gt;,k)从指定列表中随机获取k个元素</span><br></pre></td></tr></table></figure>

<h1 id="2-turtle库"><a href="#2-turtle库" class="headerlink" title="2. turtle库"></a>2. turtle库</h1><pre><code>1. turtle.setup(1300,800,0,0)  表示在屏幕起始坐标为（0，0）的地方建一个1300像素宽 800像素长 的窗口
2. turtle.pensize()表示小乌龟运行轨迹的宽度
3. turtle.pencolor(&quot;&quot;) 表示小乌龟运行轨迹的颜色
4. turtle.seth() 表示小乌龟启动时运动的方向，其表示启动时运行的角度 
5. turtle.circle( rad,angle)   rad表示圆在小乌龟运行的左侧，-rad在小乌龟的右侧，angle表示小乌龟沿着圆形爬行的弧度值
6. turtle.fd() 函数也称为turtle.forward()函数 百事小乌龟向前直线爬行的距离    
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># turtle.screensize(600,800,&quot;blue&quot;)  #turtle.setup(width=0.5,height=0.75,startx=None,starty=None)</span></span><br><span class="line"><span class="comment"># t.pencolor(&#x27;yellow&#x27;) #画笔颜色</span></span><br><span class="line"><span class="comment"># t.pensize(4) #画笔的宽度</span></span><br><span class="line"><span class="comment"># t.speed(1)   #画笔移动速度[0,10]</span></span><br><span class="line"><span class="comment"># t.circle(30) #半径为三十的圆</span></span><br><span class="line"><span class="comment"># t.right(20) #向右转动</span></span><br><span class="line"><span class="comment"># t.fd(100)#向前移动,等同于turtle.forward()</span></span><br><span class="line"><span class="comment"># setx()将x轴移到指定位置</span></span><br><span class="line"><span class="comment"># turtle.sethealding()</span></span><br><span class="line"><span class="comment"># home() 设置当前画笔位置为原点，朝向东</span></span><br><span class="line"><span class="comment"># dot(r) 绘制一个指定直径</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">turtle.screensize(<span class="number">600</span>,<span class="number">800</span>,<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.goto(<span class="number">150</span>,<span class="number">250</span>)</span><br><span class="line">t.goto(<span class="number">200</span>,<span class="number">100</span>)</span><br><span class="line">t.goto(<span class="number">75</span>,<span class="number">175</span>)</span><br><span class="line">t.goto(<span class="number">200</span>,<span class="number">250</span>)</span><br><span class="line">t.goto(<span class="number">150</span>,<span class="number">100</span>)</span><br><span class="line">t.goto(<span class="number">100</span>,<span class="number">250</span>)</span><br><span class="line">t.goto(<span class="number">225</span>,<span class="number">175</span>)</span><br><span class="line">t.goto(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<h1 id="3-random库"><a href="#3-random库" class="headerlink" title="3. random库"></a>3. random库</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(datetime.datetime.now())      <span class="comment"># 随机数种子，随机数原本是大量有规律的数，给定随机数种子后，将会以种子开始进行不断变化产生随机数</span></span><br><span class="line">random.randint(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">list</span>)-<span class="number">1</span>)             <span class="comment"># 产生一个随机数</span></span><br><span class="line">random.choice(<span class="built_in">list</span>)                       <span class="comment"># 从列表中随机取出一个元素</span></span><br><span class="line">random.shuffle()                          <span class="comment"># 随列表进行随机排序，并不是返回新列表</span></span><br></pre></td></tr></table></figure>

<h1 id="4-pyperclip"><a href="#4-pyperclip" class="headerlink" title="4. pyperclip"></a>4. pyperclip</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line">pyperclip.copy()        将一些值复制到粘贴板</span><br><span class="line">pyperclip.paste()       将粘贴板板上的值显示到屏幕上  </span><br></pre></td></tr></table></figure>

<h1 id="5-1smtplib"><a href="#5-1smtplib" class="headerlink" title="5. 1smtplib"></a>5. 1smtplib</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line">msg = MIMEText(<span class="string">&quot;The body of the mail is here&quot;</span>)</span><br><span class="line">msg[<span class="string">&#x27;subject&#x27;</span>] = <span class="string">&quot;an email alert&quot;</span></span><br><span class="line">msg[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&quot;evanmuxing@qq.com&quot;</span></span><br><span class="line">msg[<span class="string">&#x27;to&#x27;</span>] = <span class="string">&quot;wanxingge@foxmail.com&quot;</span></span><br><span class="line">s = smtplib.SMTP(<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">s.send_message(msg)</span><br><span class="line">s.quit()</span><br></pre></td></tr></table></figure>

<h1 id="6-pymysql"><a href="#6-pymysql" class="headerlink" title="6. pymysql"></a>6. pymysql</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;Wdlmms369544#z&#x27;</span>, db=<span class="string">&#x27;mysql&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;use scraping&quot;</span>)</span><br><span class="line">cur.execute(<span class="string">&quot;insert into pages (title, content) values (\&quot;%s\&quot;,\&quot;%s\&quot;)&quot;</span>, (title, content))</span><br><span class="line">cur.connection.commit()</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h1 id="7-unittest"><a href="#7-unittest" class="headerlink" title="7.unittest"></a>7.unittest</h1><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">precise_name</span>(<span class="params">first, last</span>):</span></span><br><span class="line">    precise = <span class="string">f&quot;<span class="subst">&#123;first&#125;</span> <span class="subst">&#123;last&#125;</span>&quot;</span></span><br><span class="line">    precise = precise.title()</span><br><span class="line">    <span class="keyword">return</span> precise</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_precise_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        anticipate = precise_name(<span class="string">&#x27;ivan&#x27;</span>, <span class="string">&#x27;star&#x27;</span>)</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;Ivan Star&#x27;</span>, anticipate)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> restaurant <span class="keyword">import</span> Restaurant   <span class="comment"># 在3.4</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRestaurant</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_increments</span>(<span class="params">self</span>):</span></span><br><span class="line">        lingxiao = Restaurant(<span class="string">&#x27;lingxiao&#x27;</span>, <span class="string">&#x27;eggplant&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">        lingxiao.increment_number_served(<span class="number">5</span>)</span><br><span class="line">        self.assertEqual(<span class="number">5</span>, lingxiao.number_served)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h1 id="8-datetime"><a href="#8-datetime" class="headerlink" title="8.datetime"></a>8.datetime</h1><h2 id="strftime-timedelta-strptime"><a href="#strftime-timedelta-strptime" class="headerlink" title="strftime,timedelta,strptime"></a>strftime,timedelta,strptime</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户输入的日期和时间是字符串，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串：</span></span><br><span class="line">cday = datetime.strptime(<span class="string">&#x27;2017-8-1 18:20:20&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 进行字符串格式化输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(now.strftime(<span class="string">&#x27;%a, %b %d %H:%M&#x27;</span>))</span><br><span class="line">Mon, May 08 <span class="number">20</span>:<span class="number">22</span></span><br><span class="line"><span class="comment"># 加减可以直接用+和-运算符，不过需要导入timedelta这个类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(hours=<span class="number">10</span>)</span><br><span class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础库</tag>
      </tags>
  </entry>
  <entry>
    <title>python可视化</title>
    <url>/2021/08/10/11-53-43/</url>
    <content><![CDATA[<p><strong>用python实现数据可视化</strong></p>
<span id="more"></span>

<h1 id="plotly"><a href="#plotly" class="headerlink" title="plotly"></a>plotly</h1><h3 id="可视化条形图"><a href="#可视化条形图" class="headerlink" title="可视化条形图"></a>可视化条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> Bar, Layout</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> offline</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Die</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_sides=<span class="number">6</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;骰子默认为六面&quot;&quot;&quot;</span></span><br><span class="line">        self.num_sides = num_sides</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个位于1和骰子面数的随机值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> randint(<span class="number">1</span>, self.num_sides)</span><br><span class="line"><span class="comment"># 创建两个D6</span></span><br><span class="line">die1 = Die()</span><br><span class="line">die2 = Die(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 掷几次骰子并将结果存在一个列表中</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    result = die1.roll() + die2.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"><span class="comment"># 分析结果</span></span><br><span class="line">frequencies = []</span><br><span class="line">max_result = die1.num_sides + die2.num_sides</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_result + <span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"><span class="comment"># 对结果进行可视化</span></span><br><span class="line">x_values = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, max_result + <span class="number">1</span>))</span><br><span class="line">data = [Bar(x=x_values, y=frequencies)]</span><br><span class="line">x_axis_config = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;结果&#x27;</span>, <span class="string">&#x27;dtick&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">y_axis_config = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;结果的频率&#x27;</span>&#125;</span><br><span class="line">my_layout = Layout(title=<span class="string">&#x27;掷两个D6,D10 1000次的结果&#x27;</span>, xaxis=x_axis_config, yaxis=y_axis_config)</span><br><span class="line">offline.plot(&#123;<span class="string">&#x27;data&#x27;</span>: data, <span class="string">&#x27;layout&#x27;</span>: my_layout&#125;, filename=<span class="string">&#x27;d6_d10.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> plotly.graph_objs <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> plotly <span class="keyword">import</span> offline</span><br><span class="line"><span class="comment"># 执行api调用并存储响应</span></span><br><span class="line">url = <span class="string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=star&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Status code:: <span class="subst">&#123;r.status_code&#125;</span>&quot;</span>)  <span class="comment"># 响应值</span></span><br><span class="line"><span class="comment"># 处理结果</span></span><br><span class="line">response_dict = r.json()</span><br><span class="line">repo_dicts = response_dict[<span class="string">&#x27;items&#x27;</span>]</span><br><span class="line">repo_links, stars, labels = [], [], []</span><br><span class="line"><span class="keyword">for</span> repo_dict <span class="keyword">in</span> repo_dicts:</span><br><span class="line">    repo_name = repo_dict[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    repo_url = repo_dict[<span class="string">&#x27;html_url&#x27;</span>]</span><br><span class="line">    repo_link = <span class="string">f&quot;&lt;a href=&#x27;<span class="subst">&#123;repo_url&#125;</span>&#x27;&gt;<span class="subst">&#123;repo_name&#125;</span>&lt;/a&gt;&quot;</span></span><br><span class="line">    repo_links.append(repo_link)</span><br><span class="line">    stars.append(repo_dict[<span class="string">&#x27;stargazers_count&#x27;</span>])</span><br><span class="line"><span class="comment"># 可视化</span></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: repo_links,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: stars,</span><br><span class="line">    <span class="string">&#x27;marker&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;rgb(60, 100, 150)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;line&#x27;</span>: &#123;<span class="string">&#x27;width&#x27;</span>: <span class="number">1.5</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;opacity&#x27;</span>: <span class="number">0.6</span>,</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">my_layout=&#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Github上最受欢迎的python项目&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;titlefont&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">28</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;xaxis&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Repository&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;titlefont&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">24</span>&#125;,  <span class="comment"># x轴标签</span></span><br><span class="line">        <span class="string">&#x27;tickfont&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">14</span>&#125;,  <span class="comment"># 刻度标签</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;yaxis&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Stars&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;titlefont&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">24</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;tickfont&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">14</span>&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fig = &#123;<span class="string">&#x27;data&#x27;</span>: data, <span class="string">&#x27;layout&#x27;</span>: my_layout&#125;</span><br><span class="line">offline.plot(fig, filename=<span class="string">&#x27;python_repos.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x_values = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>)</span><br><span class="line">y_values = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line">plt.style.use(<span class="string">&#x27;seaborn&#x27;</span>)   <span class="comment"># 类似的式样还有很多可通过plt.style.available查看 如下表</span></span><br><span class="line">fig, ax = plt.subplots()  <span class="comment"># fig表示整张图片， ax表示图片中的的各个图表</span></span><br><span class="line">ax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues, s=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置图表标题并给坐标轴加上标签</span></span><br><span class="line">ax.set_title(<span class="string">&quot;square&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;value&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;value_square&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 设置刻度标记的大小</span></span><br><span class="line">ax.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, labelsize=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 设置每个坐标轴的取值范围</span></span><br><span class="line">ax.axis([<span class="number">0</span>, <span class="number">1100</span>, <span class="number">0</span>, <span class="number">1100000</span>])</span><br><span class="line"><span class="comment">### 解决不支持中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment">### 绘制倾斜的x标签，避免重复</span></span><br><span class="line">fig.autofmt_xdate()  </span><br><span class="line"><span class="comment"># plt.show() 画图</span></span><br><span class="line"><span class="comment"># 保存图片，第一个为图片名，第二个为裁剪空白区域</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;squares_plot.png&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.style.available</span><br><span class="line">aggrnyl,agsunset,blackbody,bluered,blues,blugrn,bluyl,brwnyl,bugn,bupu,burg,burgyl,cividis,darkmint,electric,emrld,gnbu,greens,greys,hot,inferno,jet,magenta,magma,mint,orrd,oranges,oryel,peach,pinkyl,plasma,plotly3,pubu,pubugn,purd,purp,purples,purpor,rainbow,rdbu,rdpu,redor,reds,sunset,sunsetdark,teal,tealgrn,turbo,viridis,ylgn,ylgnbu,ylorbr,ylorrd,algae,amp,deep,dense,gray,haline,ice,matter,solar,speed,tempo,thermal,turbid,armyrose,brbg,earth,fall,geyser,prgn,piyg,picnic,portland,puor,rdgy,rdylbu,rdylgn,spectral,tealrose,temps,tropic,balance,curl,delta,oxy,edge,hsv,icefire,phase,twilight,mrybm,mygbm</span><br></pre></td></tr></table></figure>

<h3 id="数据封装手段"><a href="#数据封装手段" class="headerlink" title="数据封装手段"></a>数据封装手段</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用zip进行封装数据，籍此可以将对应点的信息完全显示</span></span><br><span class="line">data = pd.DataFrame(data=<span class="built_in">zip</span>(lons, lats, titles, mags), columns=[<span class="string">&#x27;经度&#x27;</span>, <span class="string">&#x27;纬度&#x27;</span>, <span class="string">&#x27;位置&#x27;</span>, <span class="string">&#x27;震级&#x27;</span>])</span><br><span class="line">fig = px.scatter(</span><br><span class="line">    data,</span><br><span class="line">    x=<span class="string">&#x27;经度&#x27;</span>,</span><br><span class="line">    y=<span class="string">&#x27;纬度&#x27;</span>,</span><br><span class="line">    range_x=[-<span class="number">200</span>, <span class="number">200</span>],</span><br><span class="line">    range_y=[-<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">    width=<span class="number">800</span>,</span><br><span class="line">    height=<span class="number">800</span>,</span><br><span class="line">    title=<span class="string">&#x27;全球地震散点图&#x27;</span>,</span><br><span class="line">    <span class="comment"># 使震级可以通过图像上点的大小反映出来</span></span><br><span class="line">    size=<span class="string">&#x27;震级&#x27;</span>,</span><br><span class="line">    size_max=<span class="number">10</span>,</span><br><span class="line">    <span class="comment"># 定制标记颜色，即用渐变表示</span></span><br><span class="line">    color=<span class="string">&#x27;震级&#x27;</span>,  <span class="comment"># 默认越大越黄，越小越蓝</span></span><br><span class="line">    hover_name=<span class="string">&#x27;位置&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">fig.write_html(<span class="string">&#x27;global_earthquakes.html&#x27;</span>)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>python-scrapy</title>
    <url>/2021/08/10/13-11-03/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于终端的持久化存储只能存储csv,json,jsonlines,jl,xml,marshal,pickle等文件中</span><br><span class="line">scrapy crawl name -o filepath</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh服务</title>
    <url>/2021/08/10/17-58-20/</url>
    <content><![CDATA[<p><strong>ssh服务端管理命令，将来应该会有用，先放着</strong> </p>
<span id="more"></span>

<ol>
<li>在openssh-server包里</li>
<li>停止ssh  sudo systemctl stop ssh</li>
<li>启用ssh  sudo systemctl start ssh</li>
<li>ssh-keygen -t rsa 生成密钥文件</li>
<li>通常监听22端口</li>
</ol>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>说明</th>
<th>默认设置</th>
</tr>
</thead>
<tbody><tr>
<td>AcceptEnv</td>
<td>指定客户端发送的哪些环境变量能够被复制到当前会话环境中。客户端需要使用SendEnv选项来指定需要发送的环境变量</td>
<td>不复制任何环境变量</td>
</tr>
<tr>
<td>AddressFamily</td>
<td>指定SSH服务支持的协议族,可以取any、inet以及inet6,分别为所有协议族、IPv4和IPv6</td>
<td>any</td>
</tr>
<tr>
<td>AllowGroups</td>
<td>指定允许访问SSH服务的用户组,多个用户组之间用空格隔开。只能用组名,不可以使用组ID。可以是用户的主用户组,也可以是附加组</td>
<td>允许所有用户组</td>
</tr>
<tr>
<td>AllowUsers</td>
<td>指定允许访问SSH服务的用户,多个用户名之间用空格隔开。只能是用户名,不可以是用户ID</td>
<td>允许所有用户</td>
</tr>
<tr>
<td>AuthenticationMethods</td>
<td>指定认证方式可以是 publickey password、anykeyboard-interactive-等值,多个值之间用逗号隔开</td>
<td>如果设置为any,则表示支持所有的认证方式</td>
</tr>
<tr>
<td>AuthorizedKeysFile</td>
<td>指定包含用户公钥的文件,位于用户主目录中</td>
<td>.ssh/authorized_keys <br />.ssh/authorized keys2</td>
</tr>
<tr>
<td>ClientAlivelnterval</td>
<td>指定客户端无操作时的超时时间,以秒为单位。0表示不超时</td>
<td>0</td>
</tr>
<tr>
<td>Ciphers</td>
<td>指定支持的加密算法,多个算法之间用逗号隔开</td>
<td><a href="mailto:&#x63;&#104;&#97;&#x63;&#104;&#97;&#50;&#48;&#45;&#x70;&#111;&#x6c;&#121;&#x31;&#x33;&#x30;&#x35;&#64;&#x6f;&#x70;&#101;&#x6e;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#109;">&#x63;&#104;&#97;&#x63;&#104;&#97;&#50;&#48;&#45;&#x70;&#111;&#x6c;&#121;&#x31;&#x33;&#x30;&#x35;&#64;&#x6f;&#x70;&#101;&#x6e;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#109;</a>,aes128-ctr,aes 192-ctr,aes256-ctr,<a href="mailto:&#x61;&#x65;&#115;&#x31;&#x32;&#56;&#45;&#x67;&#99;&#x6d;&#64;&#x6f;&#x70;&#x65;&#x6e;&#x73;&#x73;&#104;&#46;&#x63;&#111;&#x6d;">&#x61;&#x65;&#115;&#x31;&#x32;&#56;&#45;&#x67;&#99;&#x6d;&#64;&#x6f;&#x70;&#x65;&#x6e;&#x73;&#x73;&#104;&#46;&#x63;&#111;&#x6d;</a>, <a href="mailto:&#x61;&#101;&#x73;&#50;&#x35;&#x36;&#x2d;&#x67;&#99;&#x6d;&#x40;&#x6f;&#x70;&#x65;&#x6e;&#x73;&#x73;&#104;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#101;&#x73;&#50;&#x35;&#x36;&#x2d;&#x67;&#99;&#x6d;&#x40;&#x6f;&#x70;&#x65;&#x6e;&#x73;&#x73;&#104;&#x2e;&#x63;&#111;&#x6d;</a></td>
</tr>
<tr>
<td>DenyGroups</td>
<td>指定拒绝访问SSH服务的用户组,可以是主组或者附加组,多个组用空格隔开</td>
<td></td>
</tr>
<tr>
<td>HostKey</td>
<td>指定SSH使用的包含主机私钥的文件</td>
<td>/etc/ssh/ssh_host_rsa_key<br/>/etc/ssh/ssh_host_ecdsa_key<br/>/etc/ssh/ssh host ed25519 key</td>
</tr>
<tr>
<td>HostKeyAlgorithms</td>
<td>指定主机私钥的加密算法</td>
<td>ecdsa-sha2-nistp256-cert-v01@<br/>openssh.com<br/>ecdsa-sha2-nistp384-cert-v01@<br/>openssh.com<br/>ecdsa-sha2-nistp521-cert-v1@<br/>openssh.com<br/><a href="mailto:&#x73;&#x73;&#x68;&#45;&#x65;&#x64;&#50;&#53;&#x35;&#49;&#57;&#45;&#99;&#x65;&#114;&#x74;&#x2d;&#118;&#x30;&#x31;&#64;&#111;&#x70;&#101;&#110;&#115;&#x73;&#x68;&#x2e;&#99;&#111;&#109;">&#x73;&#x73;&#x68;&#45;&#x65;&#x64;&#50;&#53;&#x35;&#49;&#57;&#45;&#99;&#x65;&#114;&#x74;&#x2d;&#118;&#x30;&#x31;&#64;&#111;&#x70;&#101;&#110;&#115;&#x73;&#x68;&#x2e;&#99;&#111;&#109;</a><br/><a href="mailto:&#x73;&#115;&#x68;&#x2d;&#114;&#115;&#97;&#45;&#x63;&#x65;&#114;&#116;&#45;&#118;&#x30;&#49;&#64;&#x6f;&#112;&#x65;&#110;&#x73;&#115;&#104;&#46;&#99;&#111;&#109;">&#x73;&#115;&#x68;&#x2d;&#114;&#115;&#97;&#45;&#x63;&#x65;&#114;&#116;&#45;&#118;&#x30;&#49;&#64;&#x6f;&#112;&#x65;&#110;&#x73;&#115;&#104;&#46;&#99;&#111;&#109;</a><br/>ecdsa-sha2-nistp256<br/>ecdsa-sha2-nistp384<br/>ecdsa-sha2-nistp521<br/>ssh-ed25519<br/>ssh-rsa</td>
</tr>
<tr>
<td>ListenAddress</td>
<td>指定SSH服务监听的本地IP地址</td>
<td>所有的本地IP地址</td>
</tr>
<tr>
<td>LogLevelSSH</td>
<td>服务日志级别,可以取 QUIET、INFOFATAL、 ERROR、INFO、 VERBOSE、DEBUG、 DEBUG1、 DEBUG22以及 DEBUG33等值</td>
<td>INFO</td>
</tr>
<tr>
<td>MaxSessions</td>
<td>指定每个网络连接可以打开的会话数</td>
<td>10</td>
</tr>
<tr>
<td>PasswordAuthentication</td>
<td>指定是否允许密码认证</td>
<td>yes</td>
</tr>
<tr>
<td>PermitEmptyPasswords</td>
<td>指定是否允许空密码</td>
<td>no</td>
</tr>
<tr>
<td>PermitRootLogin</td>
<td>指定是否允许root用户登录SSH服务,可以取 yes prohibit-password, without-password、forced-commands–only以及no等值。<br />yes表示允许root用户登录SSH服务<br />prohibit-password和 without-password-表示禁止用户使用密码登录,<br />forced-commands—only表示在使用-o选项指定了命令的情况下,允许root用户使用公钥认证登录,no表示不允许root登录SSH服务</td>
<td>prohibit-password</td>
</tr>
<tr>
<td>PidFile</td>
<td>指定SSH服务进程的进程ID文件</td>
<td>run/sshdpid</td>
</tr>
<tr>
<td>Port</td>
<td>指定SSH服务的监听端口</td>
<td>22</td>
</tr>
<tr>
<td>PrintLastLog</td>
<td>指定是否在用户登录后输出用户最近一次登录的日期和时间</td>
<td>yes</td>
</tr>
<tr>
<td>PubkeyAuthentication</td>
<td>指定是否允许公钥认证</td>
<td>yes</td>
</tr>
<tr>
<td>UsePAM</td>
<td>是否启用PAM认证模块</td>
<td>no</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python文件处理</title>
    <url>/2021/08/10/12-56-19/</url>
    <content><![CDATA[<p><strong>文件批量处理的基础，后续补充</strong></p>
<span id="more"></span>

<h1 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 打开文件<span class="built_in">open</span>()使用方法如下 variable = <span class="built_in">open</span>(name,mode)</span><br><span class="line"><span class="number">2.</span> mode 有这几种格式 </span><br><span class="line">	a. r 只读文件不存在则报错</span><br><span class="line">	b. w 只写 文件不存在则创建文件 </span><br><span class="line">	c. a 附加到文件末尾</span><br><span class="line">	d. rb 只读二进制文件 若不存在则输出错误</span><br><span class="line">	e. rw 只写二进制文件 若不存在则自动创建文件</span><br><span class="line">	f. r+ 表示读写</span><br><span class="line"><span class="number">3.</span> read() 返回值为包含整个文件内容的一个字符串</span><br><span class="line"><span class="number">4.</span> readline() 返回值为文件下一行内容的字符串 以换行符为终止</span><br><span class="line"><span class="number">5.</span> readlines() 返回值为整个文件内容的列表，每项是以换行符为结尾的一行字符串</span><br><span class="line"><span class="number">6.</span> write() 把含有文本数据或二进制数据块的字符串写入文件中</span><br><span class="line"><span class="number">7.</span> writelines() 针对列表操作, 接受一个字符串列表作为参数，将它们写入文件，并且行结束符不会被自动加入</span><br><span class="line"><span class="number">8.</span> python本身将文件作为一个行的序列</span><br></pre></td></tr></table></figure>

<h1 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">csv_file = <span class="built_in">open</span>(<span class="string">&quot;editor.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="literal">None</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">writer = csv.writer(csv_file)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        csv_row = []</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> row.findAll([<span class="string">&#x27;td&#x27;</span>, <span class="string">&#x27;th&#x27;</span>]):</span><br><span class="line">            csv_row.append(cell.get_text())</span><br><span class="line">        writer.writerow(csv_row)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    csv_file.close()</span><br></pre></td></tr></table></figure>

<h1 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">filename= <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(numbers,f)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    numbers=json.load(f)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>文件处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python异步</title>
    <url>/2021/08/10/13-06-10/</url>
    <content><![CDATA[<p><strong>python中实现异步的方式和一些基本知识</strong></p>
<span id="more"></span>

<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dumpy <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(<span class="number">4</span>)     <span class="comment"># 创建四个线程</span></span><br><span class="line">pool.<span class="built_in">map</span>(fun(),parameters)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>

<h1 id="协程对象"><a href="#协程对象" class="headerlink" title="协程对象"></a>协程对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">c = fun()  <span class="comment"># 协程对象</span></span><br><span class="line"><span class="comment">#loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment">#loop.run_until_complete(c)</span></span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">asyncio.run(fun())</span><br></pre></td></tr></table></figure>

<h2 id="task的使用"><a href="#task的使用" class="headerlink" title="task的使用"></a>task的使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(c)</span><br><span class="line">loop.run_until_complete(c)  # 基于loop进行创建</span><br></pre></td></tr></table></figure>

<h2 id="future的使用"><a href="#future的使用" class="headerlink" title="future的使用"></a>future的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.ensure_future(c)</span><br><span class="line">loop.run_until_complete(c)</span><br></pre></td></tr></table></figure>

<h1 id="绑定回调函数"><a href="#绑定回调函数" class="headerlink" title="绑定回调函数"></a>绑定回调函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在请求的url是:&#x27;</span>, url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请求成功&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback_fun</span>(<span class="params">task</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(task.result())</span><br><span class="line">c = request(<span class="string">&#x27;www.baidu.com&#x27;</span>)  <span class="comment"># 协程对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = asyncio.ensure_future(c)</span><br><span class="line">task.add_done_callback(callback_fun)</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure>

<h1 id="多任务异步协程"><a href="#多任务异步协程" class="headerlink" title="多任务异步协程"></a>多任务异步协程</h1><p><strong>基础示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(fun1()),</span><br><span class="line">    asyncio.ensure_future(fun2())</span><br><span class="line">]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<p><strong>进阶示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在下载&#x27;</span>,url)</span><br><span class="line">    <span class="comment"># 在异步协程过程中如果出现了同步模块相关代码，就无法实现异步</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完毕&#x27;</span>, url)</span><br><span class="line">start = time.time()</span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pianku.li&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;google.com&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">tasks = [request(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"><span class="built_in">print</span>(time.time()-start)</span><br></pre></td></tr></table></figure>

<h1 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line">start = time.time()</span><br><span class="line">urls = [     <span class="comment"># 基于flask创建的服务器</span></span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:5000/ivan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:5000/wanstarge&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://127.0.0.1:5000/muxing&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># proxy = &#x27;http://ip:port&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="comment"># text()为字符串</span></span><br><span class="line">            <span class="comment"># read()为二进制</span></span><br><span class="line">            <span class="comment"># json()为json()格式的字符串</span></span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完毕&#x27;</span>, page_text)</span><br><span class="line">tasks = [get_page(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">asyncio.run(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总耗时:&#x27;</span>, time.time()-start)</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>python通用代理配置</title>
    <url>/2021/08/10/12-49-23/</url>
    <content><![CDATA[<p><strong>纪念一下有代理不会用的日子</strong></p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;本地代理&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;127.0.0.1:10809&#x27;</span>  <span class="comment"># 使用本地代理</span></span><br><span class="line"><span class="comment"># proxy=&#x27;username:password@123.58.10.36:8080&#x27;  #购买代理</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#x27;</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.<span class="built_in">open</span>(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)  <span class="comment"># 测试ip的网址</span></span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;selenium&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">&#x27;123.58.10.36:8080&#x27;</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--proxy-server=http://&#x27;</span> + proxy)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;socks5&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">2013</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        response = request.urlopen(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.read().decode())</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ip不能用&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;selenium&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">service_args = [<span class="string">&#x27;--proxy=localhost:9150&#x27;</span>, <span class="string">&#x27;--proxy-type=socks5&#x27;</span>]</span><br><span class="line">driver = webdriver.phantomjs(executable_path=<span class="string">&#x27;&lt;path to PhantomJS&gt;&#x27;</span>, service_args=service_args)</span><br><span class="line">driver.get(<span class="string">&quot;http://icanhazip.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.page_souce)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>, <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>, &#125;</span><br><span class="line">requests.get(<span class="string">&quot;http://example.org&quot;</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">proxyConfig = <span class="string">&#x27;http://%s:%s@%s&#x27;</span> % (<span class="string">&#x27;userName&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;proxy&#x27;</span>)</span><br><span class="line">inforMation = urllib.urlopen(<span class="string">&quot;http://tianya.cn&quot;</span>, proxies=&#123;<span class="string">&#x27;http&#x27;</span>:proxyConfig&#125;)</span><br><span class="line"><span class="built_in">print</span> inforMation.read()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">proxyConfig = <span class="string">&#x27;http://%s:%s@%s&#x27;</span> % (<span class="string">&#x27;userName&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;proxy&#x27;</span>)</span><br><span class="line">opener = urllib2.build_opener( urllib2.ProxyHandler(&#123;<span class="string">&#x27;http&#x27;</span>:proxyConfig&#125;))</span><br><span class="line">urllib2.install_opener(opener)</span><br><span class="line">inforMation = urllib2.urlopen(<span class="string">&quot;http://tianya.cn&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> inforMation.read()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本语法</title>
    <url>/2021/08/10/10-59-02/</url>
    <content><![CDATA[<p><strong>持续补充,欢迎讨论</strong></p>
<span id="more"></span>

<h1 id="python环境配置"><a href="#python环境配置" class="headerlink" title="python环境配置"></a>python环境配置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip命令</span><br><span class="line">	<span class="number">1.</span> pip install -i </span><br><span class="line">	<span class="number">2.</span> 参考镜像网站</span><br><span class="line">	http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">	https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">	http://pypi.hustunique.com/</span><br><span class="line">	http://pypi.sdutlinux.org/</span><br><span class="line">	http://pypi.douban.com/simple/                                                                                            </span><br><span class="line">	https://pypi.python.org/simple</span><br><span class="line">	python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple/ 更新pip下载器</span><br><span class="line">	<span class="comment"># 配置清华PyPI镜像（如无法运行，将pip版本升级到&gt;=10.0.0）</span></span><br><span class="line">	pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h1 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1. 输入输出"></a>1. 输入输出</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;mice&#x27;</span>)    <span class="comment"># 各单词之间默认以空格分隔</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;mice&#x27;</span>,seq=<span class="string">&#x27;,&#x27;</span>)   <span class="comment"># 此时输出的各个单词之间以,分隔</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;请输入:&#x27;</span>)       <span class="comment"># 默认读取到的值为字符串，需要通过int等进行字符转</span></span><br></pre></td></tr></table></figure>

<h1 id="2-错误类型"><a href="#2-错误类型" class="headerlink" title="2. 错误类型"></a>2. 错误类型</h1><h3 id="2-1TypeError-类型错误，对象用来表示值的类型非预期类型时发生的错误"><a href="#2-1TypeError-类型错误，对象用来表示值的类型非预期类型时发生的错误" class="headerlink" title="2.1TypeError:类型错误，对象用来表示值的类型非预期类型时发生的错误"></a>2.1TypeError:类型错误，对象用来表示值的类型非预期类型时发生的错误</h3><p>错误例⼦： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span> (‘我的年龄是’+age)</span><br></pre></td></tr></table></figure>

<p>###</p>
<p>报错信息：TypeError: can only concat enat e st r (not “int “) t o st r这是类型错误，提示必须是⼀个字符串，不能是数字。</p>
<p>###</p>
<p>解决⽅法：在使⽤“+”做拼接的时候，必须使⽤字符串，或者把数字转化成字符串。</p>
<p>###</p>
<p>正确代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span> (‘我的年龄是’+<span class="built_in">str</span>(age))</span><br></pre></td></tr></table></figure>

<h3 id="2-2AttributeError-属性错误，特性引用和赋值失败时会发生属性错误"><a href="#2-2AttributeError-属性错误，特性引用和赋值失败时会发生属性错误" class="headerlink" title="2.2AttributeError: 属性错误，特性引用和赋值失败时会发生属性错误"></a>2.2AttributeError: 属性错误，特性引用和赋值失败时会发生属性错误</h3><p>###</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tp=(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">tp.append(<span class="string">&#x27;7&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span> (tp)</span><br></pre></td></tr></table></figure>

<p>###</p>
<p>报错信息：At t ribut eError: ‘t uple’ object has no at t ribut e ‘append’</p>
<p>提示：属性错误：元组对象没有“append”的属性，简单来说元组是不可变对象，解决⽅法：把元组换成列表。</p>
<h3 id="2-3NameError-试图访问的变量名不存在"><a href="#2-3NameError-试图访问的变量名不存在" class="headerlink" title="2.3NameError: 试图访问的变量名不存在"></a>2.3NameError: 试图访问的变量名不存在</h3><p>举个简单的例⼦，只运⾏⼀⾏print (a)，会报错：NameError: name ‘a’ is not deﬁned。简单来说，就是变量a没有定义，解决⽅法是在前⾯给a赋值，⽐如加上⼀⾏a=’’。</p>
<p>###</p>
<p>还有⼀种需要⼩⼼处理的是：变量或者函数名拼写错误。如： name= ‘卡⻄’</p>
<p>###</p>
<p>print (‘My name is ‘ + nane)</p>
<p>报错信息和上⾯⼀样：NameError: name ‘nane’ is not deﬁned。这类错误只要根据报错信息，细⼼检查下拼写，就能很快解决~</p>
<h3 id="2-4-SyntaxError：语法错误，代码形式错误"><a href="#2-4-SyntaxError：语法错误，代码形式错误" class="headerlink" title="2.4 SyntaxError：语法错误，代码形式错误"></a>2.4 SyntaxError：语法错误，代码形式错误</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;小李&#x27;</span>       <span class="comment"># 缺少冒号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>###</p>
<p>报错信息为：Synt axError: invalid synt ax提示是：语法错误，⾮法的语法。</p>
<p>###</p>
<p>当报错的时候，要注意回到错误信息的那⼀⾏，然后从下往上，慢慢查找，此处这个程序就是因为if语法忘了在判断语句后⾯加“：”，所以导致的错误。</p>
<p>###</p>
<p>另外，初学者写代码时注意：使⽤英⽂符号哦</p>
<p>###</p>
<h3 id="2-5-KeyError-在读取字典中的key和value时，若key不存在，就会触发该错误"><a href="#2-5-KeyError-在读取字典中的key和value时，若key不存在，就会触发该错误" class="headerlink" title="2.5 KeyError: 在读取字典中的key和value时，若key不存在，就会触发该错误"></a>2.5 KeyError: 在读取字典中的key和value时，若key不存在，就会触发该错误</h3><p>###</p>
<p>举个⼩例⼦：    dict ={‘a’:1,’b’:2,’c’:3}</p>
<p>print (dict [‘d’])</p>
<p>报错信息为：KeyError: ‘d’。</p>
<p>###</p>
<p>第⼀种解决⽅法，⾸先测试key是否存在，然后才进⾏下⼀步操作，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;d&#x27;</span> <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(t[<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;not exist&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第⼆种，利⽤dict 内置的get (key[,default ])⽅法，如：print (dict [‘d’])改为print (dict .get (‘d’))</p>
<p>###</p>
<p>如果key存在，则返回其value，否则返回None;使⽤这个⽅法永远不会触发KeyError。</p>
<p>###</p>
<h3 id="2-6-IndexError-索引错误，使用的索引不存在，常常超出序列范围，序列中没有此索引"><a href="#2-6-IndexError-索引错误，使用的索引不存在，常常超出序列范围，序列中没有此索引" class="headerlink" title="2.6 IndexError:索引错误，使用的索引不存在，常常超出序列范围，序列中没有此索引"></a>2.6 IndexError:索引错误，使用的索引不存在，常常超出序列范围，序列中没有此索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">7</span>])</span><br></pre></td></tr></table></figure>

<p>###</p>
<p>报错信息：IndexError: list index out of range提示：索引错误，列表索引超出了范围。</p>
<p>###</p>
<p>解决办法：回头看列表的⻓度，索引是要⼩于列表的⻓度的。上⾯的列表⻓度是5，⽽索引却要打印第七个，所以是超出了列表的⻓度。</p>
<p>###</p>
<h3 id="2-7-IndentationError-缩进错误"><a href="#2-7-IndentationError-缩进错误" class="headerlink" title="2.7 IndentationError: 缩进错误"></a>2.7 IndentationError: 缩进错误</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a&lt;b:</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure>

<p>###</p>
<p>报错：Indent at ionError: expect ed an indent ed block</p>
<p>原因：缩进有误，Python的缩进⾮常严格，⾏⾸多个空格，少个空格都会报错。</p>
<p>###</p>
<p>由于不熟悉python编码规则，不易查找，所以会成为新⼿常犯的⼀个错误。像def，class，if，for，while等代码块都需要缩进。</p>
<p>###</p>
<h3 id="2-8-TabError-Tab和空格混用"><a href="#2-8-TabError-Tab和空格混用" class="headerlink" title="2.8 TabError: Tab和空格混用"></a>2.8 TabError: Tab和空格混用</h3><p>###</p>
<p>相邻的两句的缩进需要统⼀使⽤tab或统⼀使⽤空格，不能混⽤。否则就会出现以下报错： TabError: inconsistent use of tabs and spaces in indentation。</p>
<p>###</p>
<p>tab键本质上是制表符，而不是缩进符，不同的文本编辑器中制表符代表的空格宽度不⼀，如果代码需要跨平台或跨编辑器读写，建议不要使用制表符（tab键）。</p>
<h3 id="2-9-ZeroDivisionError-除以零时导致的报错"><a href="#2-9-ZeroDivisionError-除以零时导致的报错" class="headerlink" title="2.9 ZeroDivisionError: 除以零时导致的报错"></a>2.9 ZeroDivisionError: 除以零时导致的报错</h3><h3 id="2-10-KeyboardInterrupt-程序执行时使用ctrl-c进行终止"><a href="#2-10-KeyboardInterrupt-程序执行时使用ctrl-c进行终止" class="headerlink" title="2.10 KeyboardInterrupt: 程序执行时使用ctrl+c进行终止"></a>2.10 KeyboardInterrupt: 程序执行时使用ctrl+c进行终止</h3><h1 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3.基本数据类型"></a>3.基本数据类型</h1><h3 id="3-1字符串"><a href="#3-1字符串" class="headerlink" title="3.1字符串"></a>3.1字符串</h3><p>python中对字符串的操作只是相当于创建了一个副本，如果不进行赋值，那么字符串不会有任何改变</p>
<pre><code>1. 通过索引值对其中元素进行检索，比如s[3]
2. 也可以使用s[0:13]对一定的区域进行检索输出
3. 可以通过”+“实现两个字符串的拼接， 使用”*“实现两个字符串的重复
4. 使用len()返回字符串的长度
5. 通过str()函数转换为字符串
6. &lt;string&gt;.fun()
    a. &lt;string&gt;.upper() 将字符串中的字母变成大写
    b. &lt;string&gt;.lower 将字符串中的字母变成小写
    c. &lt;string&gt;.capitalize() 首字母大写
    d. &lt;string&gt;.strip 去除两边空格及去除指定字符  rstrip和lstrip对应右边空白或者左边空白
    e. &lt;string&gt;.split 按指定字符分割字符串为数组
    f. &lt;string&gt;.isdigit() 判断字符串是否为数字类型若是则返回True,反之则返回False
    g. &lt;string&gt;.find 搜索指定字符串
    h. &lt;string&gt;.replace 字符串替换
    i. &lt;string&gt;.isupper() 或者islower()判断字符串中的值是否全为大写或者小写
        isalpha(),只包含字母   isalnum(),只包含字母和数字  isdecimal()只包含数字字符  isspace()只包含空格 istitle(),            第一个大写，后面小写   
7. for i in &lt;string&gt; 遍历字符串中的每个字符
8. startswith()和endswith() 判断字符串是否以某个字符串开头或结尾
9. &#39;,&#39;.join([&#39;my&#39;, &#39;name&#39;, &#39;is&#39;, &#39;ivan&#39;])  以,拼接字符串 
10. partition(&#39;w&#39;)        以w分割字符串，若果有多个w按第一个来分割，结果为三个字符串的元组
11. &#39;hello&#39;.rjust(20,&#39;-&#39;)  将hello填充到有二十个-的右端，右对齐，还有ljust(), center()
</code></pre>
<h3 id="3-2列表"><a href="#3-2列表" class="headerlink" title="3.2列表"></a>3.2列表</h3><p>enumerate(list) 函数返回一个对应列表中的索引，另一个是索引所对应的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 列表是有序的元素集合，列表元素可以通过索引访问单个元素</span><br><span class="line"><span class="number">2.</span> a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] ,a[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line"><span class="number">3.</span> 列表的大小可以随时修改</span><br><span class="line"><span class="number">4.</span> 常用操作</span><br><span class="line">	a. &lt;seq&gt;+&lt;seq&gt;            连接两个序列</span><br><span class="line">	b. &lt;seq&gt;*&lt;整数类型&gt;  对序列进行整数次重复</span><br><span class="line">	c. &lt;seq&gt;[&lt;整数类型&gt;]   索引序列中的元素</span><br><span class="line">	d. <span class="built_in">len</span>(&lt;seq&gt;)                    序列中元素的个数</span><br><span class="line">	e. &lt;seq&gt;[&lt;整数类型&gt;:&lt;整数类型&gt;]  取序列中的一个子序列</span><br><span class="line">	f. <span class="keyword">for</span> &lt;var&gt; <span class="keyword">in</span> &lt;seq&gt; 对序列进行循环检举</span><br><span class="line">	g. &lt;expr&gt; <span class="keyword">in</span> &lt;seq&gt;  成员检查，判断&lt;expr&gt;是否在序列中</span><br><span class="line">	h. &lt;<span class="built_in">list</span>&gt;.append(x)          将元素x增加到列表的最后</span><br><span class="line">	i. &lt;<span class="built_in">list</span>&gt;.sort()                   将列表中的元素进行排序 按照ASCII排序，可以设置key=<span class="built_in">str</span>.lower</span><br><span class="line">	j. &lt;<span class="built_in">list</span>&gt;.reverse()             将列表元素反转</span><br><span class="line">	k. &lt;<span class="built_in">list</span>&gt;.index()                 返回第一次出现元素x的索引值</span><br><span class="line">	l. &lt;<span class="built_in">list</span>&gt;.insert(i,x)        在位置i处插入新元素x</span><br><span class="line">	m. &lt;<span class="built_in">list</span>&gt;. count(x)         返回元素x在列表中的数量</span><br><span class="line">	n. &lt;<span class="built_in">list</span>&gt;.remove(x)       删除列表中第一次出现的元素x</span><br><span class="line">	o. &lt;<span class="built_in">list</span>&gt;.pop(i)                    取出列表中位置为i的元素并删除它</span><br><span class="line">	p. “字符串”.split()        可以将字符串拆分成一个列表，元素为一个个单词</span><br><span class="line"><span class="number">5.</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>) 函数返回一个对应列表中的索引，另一个是索引所对应的值</span><br><span class="line"><span class="number">6.</span> new_list = copy.copy(<span class="built_in">list</span>), 如果是嵌套列表，则使用deepcopy，创建了一个副本</span><br></pre></td></tr></table></figure>

<h3 id="3-3字典"><a href="#3-3字典" class="headerlink" title="3.3字典"></a>3.3字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;键&gt;&lt;值&gt;对    比如通过身份证号码检索学生信息此时身份证号码即为键，学生信息即为值</span><br><span class="line"><span class="number">2.</span> python通过字典实现映射，</span><br><span class="line"><span class="number">3.</span> 字典是一个键值对的集合，以键为索引，同一个键信息对应一个值，一个键值对应一项</span><br><span class="line"><span class="number">4.</span> 序列只能用数字类型的键，字典可以用其他类型的键</span><br><span class="line"><span class="number">5.</span> 字典中元素是无序排列的</span><br><span class="line"><span class="number">6.</span> 序列通过地址映射到值，字典直接映射到值</span><br><span class="line"><span class="number">7.</span> 使用大括号可以创建字典并制定初始值</span><br><span class="line"><span class="number">8.</span> 使用中括号可以为字典添加一项 students = &#123;<span class="string">&quot;202-2013&quot;</span>:<span class="string">&quot;John&quot;</span>&#125;             students[<span class="string">&quot;202-1287&quot;</span>]=<span class="string">&quot;Susan&quot;</span></span><br><span class="line"><span class="number">9.</span> 删除字典<span class="keyword">del</span> 字典名</span><br><span class="line"><span class="number">10.</span> python 可以通过字典中的键返回其指定的值 若键不存在返回错误</span><br><span class="line"><span class="number">11.</span> 删除字典中的一项 <span class="keyword">del</span> 字典名称[键]</span><br><span class="line"><span class="number">12.</span> 字典的遍历   <span class="keyword">for</span> key <span class="keyword">in</span> dictionryName: <span class="built_in">print</span>(key+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(dictionaryName[key]))</span><br><span class="line"><span class="number">13.</span> 多种遍历选项</span><br><span class="line"><span class="number">14.</span> 遍历字典的键key      <span class="keyword">for</span> key <span class="keyword">in</span> dictionaryName.keys(): <span class="built_in">print</span>(key)</span><br><span class="line"><span class="number">15.</span> 遍历字典的值value   <span class="keyword">for</span> value <span class="keyword">in</span> dictionaryName.values(): <span class="built_in">print</span>(value)</span><br><span class="line"><span class="number">16.</span> 遍历字典的项      <span class="keyword">for</span> item <span class="keyword">in</span> dictionaryName.items(): <span class="built_in">print</span>(item)</span><br><span class="line"><span class="number">17.</span> 遍历字典的键值对  <span class="keyword">for</span> item , value <span class="keyword">in</span> adict.items(): <span class="built_in">print</span>(item, value)</span><br><span class="line"><span class="number">18.</span> 判断一个键是否在字典中  &lt;键&gt; <span class="keyword">in</span> &lt;字典&gt;   如果有则返回true,反之则返回false。</span><br><span class="line"><span class="number">19.</span> 其支持 -, &lt;, &gt;, &lt;=, &gt;=, ==, !=, <span class="keyword">and</span>, <span class="keyword">or</span>, <span class="keyword">not</span>等运算判断符</span><br><span class="line"><span class="number">20.</span> keys():<span class="built_in">tuple</span> 返回一个包含字典所有key的列表</span><br><span class="line"><span class="number">21.</span> values(): <span class="built_in">tuple</span>  返回一个包含字典所有value的列表 <span class="built_in">tuple</span>(students.values())</span><br><span class="line"><span class="number">22.</span> items():<span class="built_in">tuple</span>     返回一个包含所有键值的列表</span><br><span class="line"><span class="number">23.</span> clear():<span class="literal">None</span>      删除字典中的所有项目students.clear()</span><br><span class="line"><span class="number">24.</span> get(key,<span class="number">0</span>):value   返回字典中key对应的值, 若不存在则返回零</span><br><span class="line"><span class="number">25.</span> pop(key):val      删除并返回字典中key对应的值</span><br><span class="line"><span class="number">26.</span> update(字典)     将字典中的值添加到字典中</span><br><span class="line"><span class="number">27.</span> <span class="built_in">dir</span>.setdefault(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;black&#x27;</span>) 当一个键不存在时对其进行默认值的设定</span><br></pre></td></tr></table></figure>

<h3 id="3-4元组"><a href="#3-4元组" class="headerlink" title="3.4元组"></a>3.4元组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 指包含多个元素的类型 元组之间用逗号分隔  元组可以是空的也可以只包含一个元素，元组外侧可以使用括号也可以不使用</span><br><span class="line">2. 一个元组可以是另一个元素的元组，此时作为元素的元组要注意加一个括号用以区分</span><br><span class="line">3. 元组中各元素存在先后关系，可通过索引进行访问，比如t3=123,456,(&quot;hello&quot;,&quot;中国&quot;）</span><br><span class="line">4. 元组定义以后既不能更改也不能删除</span><br><span class="line">5. 只有一个数据的元组应在该数据之后添加一个逗号以表示其元组的形式</span><br><span class="line">6. 可以使用tuple(),和list()进行与列表之间的转换</span><br></pre></td></tr></table></figure>

<h3 id="3-5-class定义类"><a href="#3-5-class定义类" class="headerlink" title="3.5 class定义类"></a>3.5 class定义类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;餐厅菜谱&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, restaurant_name, *cuisine_type</span>):</span></span><br><span class="line">        self.restaurant_name = restaurant_name</span><br><span class="line">        self.cuisine_type = cuisine_type</span><br><span class="line">        self.number_served = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_restaurant</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The <span class="subst">&#123;self.restaurant_name&#125;</span>&#x27;s cuisine type is <span class="subst">&#123;self.cuisine_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_restaurant</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the <span class="subst">&#123;self.restaurant_name&#125;</span> is now open&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_number_served</span>(<span class="params">self, number</span>):</span></span><br><span class="line">        self.number_served = number</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_number_served</span>(<span class="params">self, increment</span>):</span></span><br><span class="line">        self.number_served += increment</span><br><span class="line"><span class="comment"># 类的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IceCreamStand</span>(<span class="params">Restaurant</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, restaurant_name, *cuisine_type</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(restaurant_name, *cuisine_type)</span><br><span class="line">        self.flavors = [<span class="string">&#x27;peek&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">present_flavors</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> flavor <span class="keyword">in</span> self.flavors:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;there are these flavors:<span class="subst">&#123;flavor&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="编码处理"><a href="#编码处理" class="headerlink" title="编码处理"></a>编码处理</h1><h3 id="对文档进行utf-8编码"><a href="#对文档进行utf-8编码" class="headerlink" title="对文档进行utf-8编码"></a>对文档进行utf-8编码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=urlopen()</span><br><span class="line">bs_oj=BeautifulSoup(html,...)</span><br><span class="line">content=bs_oj.find().get_text()</span><br><span class="line">content=<span class="built_in">bytes</span>(content,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">content=content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基本编码知识"><a href="#基本编码知识" class="headerlink" title="基本编码知识"></a>基本编码知识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">ord</span>()可以实现将字符转换为ASCII码</span><br><span class="line"><span class="number">2.</span> <span class="built_in">chr</span>()可以实现将ASCII码转换为相应的字符</span><br><span class="line"><span class="number">3.</span> Unicode为通用编码 为十六进制编码  采用固定两个字节表示</span><br><span class="line"><span class="number">4.</span> UTF-<span class="number">8</span> 可变长度的Unicode  可以用<span class="number">1</span>到<span class="number">4</span>个字节不同长度表示 中文日文韩文对应其三字节， 英文对应其单字节</span><br><span class="line"><span class="number">5.</span> GBK 编码是双字节编码  《汉字内码扩展规范》针对汉字的编码 为十六进制编码</span><br><span class="line"><span class="number">6.</span> 英文数字为ASCII码，只有ASCII的为文本文件，其他的为二进制文件</span><br><span class="line"><span class="number">7.</span> ISO-<span class="number">8859</span>-<span class="number">1</span>  为拉丁字母设计，会出现小写<span class="number">1</span>/<span class="number">2</span>以及版权标记符号</span><br><span class="line"><span class="number">8.</span> 其他字符集ISO-<span class="number">8859</span>-<span class="number">9</span>(土耳其)， ISO-<span class="number">8859</span>-<span class="number">2</span>(德语)，ISO-<span class="number">8859</span>-<span class="number">15</span>(法语)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime-linux python</title>
    <url>/2021/08/05/09-01-34/</url>
    <content><![CDATA[<p><strong>sublime在linux上调用python执行代码时会报错，找不到python选项，而linux上python2命名为python，而python3则就需要直接写成python3，解决方法</strong></p>
<span id="more"></span>
<h3 id="一-直接用命令创建软链接"><a href="#一-直接用命令创建软链接" class="headerlink" title="一. 直接用命令创建软链接"></a>一. 直接用命令创建软链接</h3><p>将python指向python3，同时将pip指向pip3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/python3 /usr/bin/python</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/pip /usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure>

<p>对了改动应该会需要超级用户权限，在前面加个sudo就行，记得空格</p>
<h3 id="二-改动sublime的源文件"><a href="#二-改动sublime的源文件" class="headerlink" title="二. 改动sublime的源文件"></a>二. 改动sublime的源文件</h3><p>就是这个**<u>Main.sublime-menu</u>**,上sublime对应的根目录里去搜就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;tools&quot;</span>,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>:</span><br><span class="line">        [&#123;</span><br><span class="line">            <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;SublimeREPL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mnemonic&quot;</span>: <span class="string">&quot;r&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;SublimeREPL&quot;</span>,</span><br><span class="line">            <span class="string">&quot;children&quot;</span>:</span><br><span class="line">            [</span><br><span class="line">                &#123;<span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python&quot;</span>,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;Python&quot;</span>,</span><br><span class="line"> </span><br><span class="line">                 <span class="string">&quot;children&quot;</span>:[</span><br><span class="line">                    &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>: <span class="string">&quot;repl_python&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;mnemonic&quot;</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;-u&quot;</span>],</span><br><span class="line">                        <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;extend_env&quot;</span>: &#123;<span class="string">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;python_virtualenv_repl&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>: <span class="string">&quot;python_virtualenv_repl&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python - virtualenv&quot;</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python - PDB current file&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>: <span class="string">&quot;repl_python_pdb&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;mnemonic&quot;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;pdb&quot;</span>, <span class="string">&quot;<span class="variable">$file_basename</span>&quot;</span>],</span><br><span class="line">                        <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;extend_env&quot;</span>: &#123;<span class="string">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python - RUN current file&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>: <span class="string">&quot;repl_python_run&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;mnemonic&quot;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;<span class="variable">$file_basename</span>&quot;</span>],</span><br><span class="line">                        <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;extend_env&quot;</span>: &#123;<span class="string">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;caption&quot;</span>: <span class="string">&quot;Python - IPython&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>: <span class="string">&quot;repl_python_ipython&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;mnemonic&quot;</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;autocomplete_server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="string">&quot;cmd&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;osx&quot;</span>: [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;packages&#125;</span>/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">                            <span class="string">&quot;linux&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;packages&#125;</span>/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">                            <span class="string">&quot;windows&quot;</span>: [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;packages&#125;</span>/SublimeREPL/config/Python/ipy_repl.py&quot;</span>]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;extend_env&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;SUBLIMEREPL_EDITOR&quot;</span>: <span class="string">&quot;<span class="variable">$editor</span>&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>ps: 欢迎提出更多实用的方法，一起讨论，共同提升</strong></p>
]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>配置环境</tag>
        <tag>answer</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu中文件组成</title>
    <url>/2021/08/10/17-29-32/</url>
    <content><![CDATA[<p><strong>记载linux中一些特殊的文件夹</strong></p>
<span id="more"></span>

<h1 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h1><p>包含系统管理员、系统以及普通用户可以使用的各种可执行命令,例如cp、cat、ed以及tar等</p>
<h1 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h1><p>该目录与系统引导有关,包括系统引导程序、 Linux内核文件 vmlinuz、磁盘内存映像文件 initrd.img以及GRUB引导程序和配置文件等</p>
<h1 id="cdrom"><a href="#cdrom" class="headerlink" title="/cdrom"></a>/cdrom</h1><p>光盘挂载点,用户可以通过该挂载点访问光盘上面的文件</p>
<h1 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h1><p>该目录包含当前系统支持的所有的设备文件。例如console表示控制台,mem表示系统的物理内存,sda表示连接到主控制器的第一个磁盘</p>
<h2 id="常见设备名"><a href="#常见设备名" class="headerlink" title="常见设备名"></a>常见设备名</h2><ol>
<li>/dev/hd[a-t] IDE设备，例如IDE磁盘</li>
<li>/dev/sd[a-z] SCSI磁盘</li>
<li>/dev/fd[0-7] 标准软驱</li>
<li>/dev/md[0-31]软RAID设备</li>
<li>/dev/loop[0-7]本地回环设备</li>
<li>/dev/ram[0-15] 内存</li>
<li>/dev/null 空设备，丢弃一切写入的数据，读取会立即得到一个EOF</li>
<li>/dev/zero 零设备， 读取时会提供无限的空字符，如NULL,ASCII NUL,或0x00</li>
<li>/dev/tty[0-63] 虚拟终端设备</li>
<li>/dev/ttyS[0-3] 串口</li>
<li>/dev/lp[0-3] 并口</li>
<li>/dev/console 控制台</li>
<li>/dev/fb[0-31] 帧缓冲设备</li>
<li>/dev/cdrom 指向/dev/sr0的符号链接</li>
<li>/dev/random 随机设备</li>
</ol>
<h1 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h1><p>该目录可以说是 Linux的控制中心,包含了与系统和应用程序有关的各种配置文件。例如 passwd、rc、host.conf以及init等</p>
<h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h2><p> <strong>账号和UID对应关系</strong><br>文件中会显示七个字段分别<strong>登录名:口令:用户标识号:组标识号:注释:用户主目录:Shell程序</strong></p>
<ol>
<li><strong>登录名</strong>:唯一，大小写敏感</li>
<li><strong>口令</strong>:用以验证用户合法性超级用户root或某些高级用户可以使用passwd修改系统中的所有用户口令，普通用户仅能修改自己的口令<pre><code>    该字段为可选字段，为空表示无密码，如果用小写字母x表示表明存储在/etc/shadow文件中，如果为其他表示为加密过的密码
</code></pre>
</li>
<li><strong>用户标识号</strong>:一个数值用以区分不同的用户，是系统中唯一的用户标识</li>
<li><strong>组标识号</strong>:具有相似属性的多个用户被分到同一个组内，每个组有自己的标识号以组名区分主组标识号也存在passwd文件中，每个用户可属于多个组，除了在passwd中指明用户归属的组还在/etc/group中指明一个组包含的用户</li>
<li><strong>注释</strong>:包含一些用户真实信息，姓名，地址，电话等 mail和finger会用到这些信息</li>
<li><strong>用户主目录</strong>:除超级用户为/root,其他的均在/home下有自己的独立工作目录    </li>
<li><strong>Shell程序</strong>:指定登录后默认启动的shell程序，要指定绝对路径</li>
</ol>
<h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h2><p><strong>影子文件，密码及过期时间</strong></p>
<p><strong>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:密码禁用期:账户失效时间:保留字段</strong></p>
<ol>
<li><p><strong>加密口令</strong>:若为空，表示登陆不需要密码；若含*或!等特殊字符表明无法密码登录 *表示账户锁定，!表示密码锁定<br>!之后为原有密码<br>以6$开头的表示用SHA-512加密<br>以$1$开头表示MD5加密<br>以$2$开头表示Blowfish加密<br>以$5$开头表明SHA-256加密</p>
</li>
<li><p><strong>最后改</strong>:表示最近一次修改时间，以天为单位，从1970年1月1日算起<br>0表示下次登录需修改密码<br>空串表示禁用该功能</p>
</li>
<li><p><strong>最小间隔</strong>:表示修改密码后，至少要再等多少天才能修改，空串或0表示无限制</p>
</li>
<li><p><strong>最大间隔</strong>:密码有效最长时间，到期后会要求修改，但仍可以使用，空串表示无限制</p>
<p>​    <strong>注:最大间隔若小于最小间隔会无法修改密码</strong></p>
</li>
<li><p><strong>警告时间</strong>:密码过期之前，发出警告的天数，0或空串表示无警告时间    </p>
</li>
<li><p><strong>密码禁用期</strong>:密码过期之后，仍接受该密码的天数，超过该时间，用户将无法通过密码登录，空串表示无限制    </p>
</li>
<li><p><strong>账户失效时间</strong>:从1970年1月1日算起，空串表示永不过期    </p>
</li>
<li><p><strong>保留字段</strong>:保留将来使用</p>
</li>
</ol>
<h2 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h2><p><strong>用户信息</strong><br>    <strong>组名:口令:组标识号:成员列表</strong></p>
<ol>
<li><strong>组名</strong>:即用户组的名称</li>
<li><strong>口令</strong>:linux用户组无口令，故常用x或空表示</li>
<li><strong>组标识号</strong>:为一个整数值，唯一确定一个组，也称GID</li>
<li><strong>成员列表</strong>:是用逗号分隔开的一系列用户的登录名</li>
</ol>
<h2 id="etc-fstab"><a href="#etc-fstab" class="headerlink" title="/etc/fstab"></a>/etc/fstab</h2><p><strong>文件系统静态配置</strong></p>
<h2 id="etc-ufw-applications-d"><a href="#etc-ufw-applications-d" class="headerlink" title="/etc/ufw/applications.d"></a>/etc/ufw/applications.d</h2><p><strong>存储有某些应用系统所需的端口信息</strong></p>
<h2 id="etc-iproute2-rt-tables"><a href="#etc-iproute2-rt-tables" class="headerlink" title="/etc/iproute2/rt_tables"></a>/etc/iproute2/rt_tables</h2><p>命名路由表 </p>
<p>每一行对应一个编号 和一个路由表名称默认情况下所有路由都会被插入到编号为254的main表中，查询时内核也只会访问main路由表信息</p>
<h2 id="etc-resolv-conf"><a href="#etc-resolv-conf" class="headerlink" title="/etc/resolv.conf"></a>/etc/resolv.conf</h2><p><strong>保留dns服务器的配置信息</strong></p>
<h2 id="etc-network-interfaces"><a href="#etc-network-interfaces" class="headerlink" title="/etc/network/interfaces"></a>/etc/network/interfaces</h2><p><strong>静态IP地址配置</strong><br>    source 用于指定接口文件的位置 source<br>    auto 表示系统启动时该接口自动启动 eth1<br>    iface 定义接口的选项  eth1<br>    inet 指定网络接口的配置方式<br>        dhcp 表示从DHCP服务器获得 IP地址，子网掩码，网关等参数<br>            dns-nameservers 192.168.0.1 指定192.168.0.1为域名服务器，进行解析（即将域名转换为ip地址）<br>        static 表示用户会为该接口提供静态的ip地址<br>            address ip地址<br>            netmask 子网掩码<br>            gateway 默认网关<br>    配置完后若使其生效 需重启该网络接口 ifdown eth1    ifup eth1n </p>
<h1 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h1><p>​    用户主目录的根目录。每创建一个新的用户,就会在该目录下面创建一个新的子目录,<br>​    子目录以用户账号命名</p>
<h1 id="lib和lib64"><a href="#lib和lib64" class="headerlink" title="/lib和lib64"></a>/lib和lib64</h1><p>​    该目录包含所有的与系统和应用程序有关的,可以共享的库文件。前者为32位,后者<br>​    为64位</p>
<h1 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h1><p>​    每个文件系统都会包含一个该目录,用来存放fsck命令在检测和修复文件系统时删除的<br>​    目录或者文件</p>
<h1 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h1><p>​    该目录为移动介质的挂载点。例如当用户插入U盘或者移动硬盘时, Linux系统会自动<br>​    将该设备挂载到该目录下面的一个子目录中</p>
<h1 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h1><p>​    文件系统的临时挂载点。用户可以临时将其他的文件系统挂载到该目录下使用</p>
<h1 id="lopt"><a href="#lopt" class="headerlink" title="/lopt"></a>/lopt</h1><p>​    各可选应用程序的安装位置</p>
<h1 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h1><p>​    各进程文件的存放位置。该目录比较特殊,是一个虚拟的文件系统,其中不包括任何物<br>​    理文件,而是可以访问的当前系统的各种信息,例如CPU、内存、各进程对应的文件以<br>​    及系统运行时间等。例如,通过/proc/cpuinfo文件可以了解到当前系统的CPU信息,通<br>​    过/proc/meminfo可以了解到当前系统的内存信息等</p>
<h1 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h1><p>root用户的主目录</p>
<h1 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h1><p>该目录包含了与系统管理有关的可执行文件,普通用户不可以使用</p>
<h1 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h1><p>该目录包含了各种系统设备的配置信息例如/ss/bus目录包含了与系统总线有关的配置信息</p>
<h1 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h1><p>系统临时目录</p>
<h1 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h1><p>该目录比较特殊,可以作为根目录下面的一个子目录,也可以作为一个单独的文件系统。其中包含了多种共享数据文件,例如命令、库函数、头文件以及各种应用程序的文档等</p>
<h1 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h1><p>该目录同样可以作为根目录的子目录,也可以单独作为一个文件系统。包含了各种可变的数据文件,例如日志文件</p>
<h2 id="防火墙日志文件"><a href="#防火墙日志文件" class="headerlink" title="防火墙日志文件"></a>防火墙日志文件</h2><ol>
<li>/var/log/messages</li>
<li>/var/log/syslog</li>
<li>/var/log/kern.log</li>
</ol>
<h1 id="系统单元类型"><a href="#系统单元类型" class="headerlink" title="系统单元类型"></a>系统单元类型</h1><h2 id="sysytemd"><a href="#sysytemd" class="headerlink" title="sysytemd"></a>sysytemd</h2><p>综合软件包  配置文件/etc/systemd，若配置系统级别的服务，可以修改system.conf文件若配置用户级别的服务，可以修改user.conf文件</p>
<table>
<thead>
<tr>
<th>单元类型</th>
<th>描述</th>
<th>帮助手册</th>
</tr>
</thead>
<tbody><tr>
<td>service</td>
<td>systemd.service</td>
<td>服务类单元,例如服务器应用系统,这些服务可以被启动和停止</td>
</tr>
<tr>
<td>socket</td>
<td>systemd.socket</td>
<td>服务的套接字,例如AF-inET</td>
</tr>
<tr>
<td>devices</td>
<td>systemd.device</td>
<td>设备类单元</td>
</tr>
<tr>
<td>mount</td>
<td>systemd.mount</td>
<td>文件系统挂载点</td>
</tr>
<tr>
<td>automount</td>
<td>systemd.automount</td>
<td>文件系统自动挂载点,与</td>
</tr>
<tr>
<td>target</td>
<td>systemd.target</td>
<td>用来组织单元</td>
</tr>
<tr>
<td>path</td>
<td>systemd.path</td>
<td>管理目录</td>
</tr>
<tr>
<td>snapshot</td>
<td>systemd.snapshot</td>
<td>systemd运行状态快照</td>
</tr>
<tr>
<td>swap</td>
<td>systemd.swap</td>
<td>systemd为交换分区文件系统创建的交换单元文件</td>
</tr>
<tr>
<td>timer</td>
<td>systemd.timer</td>
<td>systemd提供的定时器</td>
</tr>
<tr>
<td>scope</td>
<td>systemd.scope</td>
<td>不是由systemd启动的外部进程</td>
</tr>
<tr>
<td>slice</td>
<td>systemd.slice</td>
<td>进程组</td>
</tr>
<tr>
<td></td>
<td>systemd.unit</td>
<td>systemd所有单元的配置选项手册</td>
</tr>
<tr>
<td></td>
<td>systemd.exec</td>
<td>systemd的 service、 socket、 mount以及swap等单元执行环境选项帮助手册</td>
</tr>
<tr>
<td></td>
<td>systemd.special</td>
<td>systemd的 multi–usr. target以及 printer. target等特殊目标的帮助手册</td>
</tr>
<tr>
<td></td>
<td>systemd.time</td>
<td>systemd的时间、日期格式帮助手册</td>
</tr>
<tr>
<td></td>
<td>systemd.directives</td>
<td>列出所有的 systemd选项及其帮助手册</td>
</tr>
</tbody></table>
<h1 id="linux系统启动过程"><a href="#linux系统启动过程" class="headerlink" title="linux系统启动过程"></a>linux系统启动过程</h1><p>BIOS担负着初始化硬件，检测硬件功能，以及引导操作系统的责任</p>
<h2 id="1-加电自检"><a href="#1-加电自检" class="headerlink" title="1.加电自检"></a>1.加电自检</h2><p>​                CPU,内存，主板，CMOS存储器，串并口，显卡，磁盘，键盘，<br>​                如果有问题则会给出提示信息或者声音报警</p>
<h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><p>​                创建中断向量，设置寄存器，对外部设备进行初始化和检测<br>​                重在读取CMOS中保存的配置信息，并和实际情况比较，<br>​                若不符合会影响系统的启动</p>
<h2 id="3-加载引导程序"><a href="#3-加载引导程序" class="headerlink" title="3.加载引导程序"></a>3.加载引导程序</h2><p>当BIOS检查到硬件正常并和CMOS的设置相符后按照CMOS中对启动设备的设置顺序检测可用的启动设备，BIOS将相应启动设备的第一个扇区读入内存，根据主引导记录中的引导代码启动引导程序</p>
<h2 id="4-引导程序阶段"><a href="#4-引导程序阶段" class="headerlink" title="4.引导程序阶段"></a>4.引导程序阶段</h2><p>是指用来加载操作系统的程序<br>第一部分主引导记录，用以加载第二部分引导程序<br>第二部分引导程序可位于其他分区，常见有NTLDR,BOOTMGR,GNU,GRUB<br>    通常情况下一个扇区大小为512字节盘片以中心为圆心，不同轨道的同心圆称为磁道启动设备的0磁道0柱面1扇区称为引导扇区即MBR大小446字节</p>
<p>第二部分为磁盘分区表，即DPT 大小为64字节其中每个磁盘分区表需要占用十六字节来描述，所以最多可以描述四个分区，这也是一个磁盘最多包含四个基本分区的原因，最后两个字节为十六进制的55AA是结束标志，如果该位置不是55AA，则表示不含MBR，即不可从此磁盘启动计算机</p>
<h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h2><p>原版内核由grub加载，内核之后会加载初始化程序(init),进程ID为1<br>init加载 运行级别、系统服务、引导Shell以及图形化界面，当启动完成后init便一直以守护进程的形式存在，直到系统关闭</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用端口</title>
    <url>/2021/08/09/21-02-56/</url>
    <content><![CDATA[<p><strong>记住一些端口号有时候真的特别有用，防止误用埋下隐患，下表收录自己常见的一些端口号</strong></p>
<span id="more"></span>


<table>
<thead>
<tr>
<th>端口号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>21</td>
<td>下载; ftp中用以控制数据流</td>
</tr>
<tr>
<td>80</td>
<td>上网</td>
</tr>
<tr>
<td>121</td>
<td>oracle</td>
</tr>
<tr>
<td>3306</td>
<td>mysql</td>
</tr>
<tr>
<td>20</td>
<td>ftp中用以传输数据流</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime使用说明</title>
    <url>/2021/08/09/17-46-39/</url>
    <content><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><span id="more"></span>

<h2 id="1-选择类"><a href="#1-选择类" class="headerlink" title="1.选择类"></a>1.选择类</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+D</td>
<td>选中光标所占的文本，继续操作则会选中下一个相同的文本</td>
</tr>
<tr>
<td>Alt+F3</td>
<td>选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样</td>
</tr>
<tr>
<td>Ctrl+Shift+L</td>
<td>先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>光标移动至括号内结束或开始的位置</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行</td>
</tr>
<tr>
<td>Ctrl+Shift+[</td>
<td>选中代码，按下快捷键，折叠代码</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>选中代码，按下快捷键，展开代码</td>
</tr>
<tr>
<td>Ctrl+K+0</td>
<td>展开所有折叠代码</td>
</tr>
<tr>
<td>Ctrl+←</td>
<td>向左单位性地移动光标，快速移动光标</td>
</tr>
<tr>
<td>Ctrl+→</td>
<td>向右单位性地移动光标，快速移动光标</td>
</tr>
<tr>
<td>shift+↑</td>
<td>向上选中多行</td>
</tr>
<tr>
<td>shift+↓</td>
<td>向下选中多行</td>
</tr>
<tr>
<td>Shift+←</td>
<td>向左选中文本</td>
</tr>
<tr>
<td>Shift+→</td>
<td>向右选中文本</td>
</tr>
<tr>
<td>Ctrl+Shift+←</td>
<td>向左单位性地选中文本</td>
</tr>
<tr>
<td>Ctrl+Shift+→</td>
<td>向右单位性地选中文本</td>
</tr>
<tr>
<td>Ctrl+Shift+↑</td>
<td>将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）</td>
</tr>
<tr>
<td>Ctrl+Shift+↓</td>
<td>将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）</td>
</tr>
<tr>
<td>Ctrl+Alt+↑</td>
<td>向上添加多行光标，可同时编辑多行</td>
</tr>
<tr>
<td>Ctrl+Alt+↓</td>
<td>向下添加多行光标，可同时编辑多行</td>
</tr>
</tbody></table>
<h2 id="2-编辑类"><a href="#2-编辑类" class="headerlink" title="2.编辑类"></a>2.编辑类</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+J</td>
<td>合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>复制光标所在整行，插入到下一行</td>
</tr>
<tr>
<td>Tab</td>
<td>向右缩进</td>
</tr>
<tr>
<td>Shift+Tab</td>
<td>向左缩进</td>
</tr>
<tr>
<td>Ctrl+K+K</td>
<td>从光标处开始删除代码至行尾</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>删除整行</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释单行</td>
</tr>
<tr>
<td>Ctrl+Shift+/</td>
<td>注释多行</td>
</tr>
<tr>
<td>Ctrl+K+U</td>
<td>转换大写</td>
</tr>
<tr>
<td>Ctrl+K+L</td>
<td>转换小写</td>
</tr>
<tr>
<td>Ctrl+Z</td>
<td>撤销</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>恢复撤销</td>
</tr>
<tr>
<td>Ctrl+U</td>
<td>软撤销，感觉和 Gtrl+Z 一样</td>
</tr>
<tr>
<td>Ctrl+F2</td>
<td>设置书签</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>左右字母互换</td>
</tr>
<tr>
<td>F6</td>
<td>单词检测拼写</td>
</tr>
</tbody></table>
<h2 id="3-搜索类"><a href="#3-搜索类" class="headerlink" title="3.搜索类"></a>3.搜索类</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+F</td>
<td>打开底部搜索框，查找关键字</td>
</tr>
<tr>
<td>Ctrl+shift+F</td>
<td>在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>打开搜索框。举个例子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位</td>
</tr>
<tr>
<td>Ctrl+R</td>
<td>打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数</td>
</tr>
<tr>
<td>Ctrl+：</td>
<td>打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。Ctrl+Shift+P    打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件</td>
</tr>
<tr>
<td>Esc</td>
<td>退出光标多行选择，退出搜索框，命令框等</td>
</tr>
</tbody></table>
<h2 id="4-显示类"><a href="#4-显示类" class="headerlink" title="4.显示类"></a>4.显示类</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+Tab</td>
<td>按文件浏览过的顺序，切换当前窗口的标签页</td>
</tr>
<tr>
<td>Ctrl+PageDown</td>
<td>向左切换当前窗口的标签页</td>
</tr>
<tr>
<td>Ctrl+PageUp</td>
<td>向右切换当前窗口的标签页</td>
</tr>
<tr>
<td>Alt+Shift+1</td>
<td>窗口分屏，恢复默认1屏（非小键盘的数字）</td>
</tr>
<tr>
<td>Alt+Shift+2</td>
<td>左右分屏-2列</td>
</tr>
<tr>
<td>Alt+Shift+3</td>
<td>左右分屏-3列</td>
</tr>
<tr>
<td>Alt+Shift+4</td>
<td>左右分屏-4列</td>
</tr>
<tr>
<td>Alt+Shift+5</td>
<td>等分4屏</td>
</tr>
<tr>
<td>Alt+Shift+8</td>
<td>垂直分屏-2屏</td>
</tr>
<tr>
<td>Alt+Shift+9</td>
<td>垂直分屏-3屏</td>
</tr>
<tr>
<td>Ctrl+K+B</td>
<td>开启/关闭侧边栏</td>
</tr>
<tr>
<td>F11</td>
<td>全屏模式</td>
</tr>
<tr>
<td>Shift+F11</td>
<td>免打扰模式</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>使用说明</tag>
      </tags>
  </entry>
  <entry>
    <title>正则</title>
    <url>/2021/08/10/11-59-33/</url>
    <content><![CDATA[<p><strong>最有趣，也是特别重要的一个知识，感觉应该都需要掌握，哈哈</strong></p>
<span id="more"></span>

<h1 id="一般字符组"><a href="#一般字符组" class="headerlink" title="一般字符组"></a>一般字符组</h1><table>
<thead>
<tr>
<th>字符组</th>
<th>表示类型</th>
</tr>
</thead>
<tbody><tr>
<td>[^regex]</td>
<td>排除型字符组，省略号所包含的东西都不会出现</td>
</tr>
<tr>
<td>\d</td>
<td>[0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>[0-9a-zA-Z_]</td>
</tr>
<tr>
<td>\s</td>
<td>[\t\r\n] 等一系列空白</td>
</tr>
<tr>
<td>\D \W \S</td>
<td>分别与上述互补</td>
</tr>
</tbody></table>
<h1 id="POSIX字符组"><a href="#POSIX字符组" class="headerlink" title="POSIX字符组"></a>POSIX字符组</h1><p> <strong>主要用在UNIX中</strong></p>
<table>
<thead>
<tr>
<th>POSIX字符组</th>
<th>对应值</th>
</tr>
</thead>
<tbody><tr>
<td>[:alnum:]</td>
<td>[a-zA-Z0-9]</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>[a-zA-Z]</td>
</tr>
<tr>
<td>[:ASCII:]</td>
<td>[\x00-\x7f] ASCII字符</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>[ \t]</td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>[\x00-\x1f\x7f]  控制字符</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>[0-9]</td>
</tr>
<tr>
<td>[:graph:]</td>
<td>[\x21-\x7e]    空白符之外的字符</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>[a-z]</td>
</tr>
<tr>
<td>[:print:]</td>
<td>[\x20-\x7e]</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>[][!”#$%&amp;’()*+,./:;&lt;=&gt;?@^_`{}~-] 标点符号</td>
</tr>
<tr>
<td>[:sapce:]</td>
<td>[ \t\r\n\v\f] 空白字符</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>[A-Z]  大写字母字符</td>
</tr>
<tr>
<td>[:word:]</td>
<td>[A-Za-z0-9]</td>
</tr>
<tr>
<td>[:xdigit:]</td>
<td>[A-Fa-f0-9] 十六进制字符</td>
</tr>
</tbody></table>
<h1 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h1><table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>{m,n}</td>
<td>出现次数最低m次，最高n次</td>
</tr>
<tr>
<td>*</td>
<td>表示{0,}      贪婪量词</td>
</tr>
<tr>
<td>+</td>
<td>表示{1,}      贪婪量词</td>
</tr>
<tr>
<td>?</td>
<td>表示{0,1}    贪婪量词</td>
</tr>
<tr>
<td>*?   +?   ??</td>
<td>上述贪婪量词对应的非贪婪量词</td>
</tr>
<tr>
<td>.</td>
<td>可以匹配任意字符，但无法匹配换行符\n re.compile(regex, re.DOTALL)</td>
</tr>
</tbody></table>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(p,s)			         发现所有匹配的项，以列表形式显示出</span><br><span class="line">group(<span class="comment">#)                         是以括号进行的排序</span></span><br><span class="line">re.search(p,s).group(num)        只发现一个项,捕获型字符组只会显示捕获的即括号中的,group(<span class="number">0</span>)默认全部,按括号从左往右排</span><br><span class="line">re.sub(p,p,s)                    第一个正则表达式匹配原来的，第二个表示将要替换成的，最后表示要处理的字符串 </span><br><span class="line">re.<span class="built_in">compile</span>(p)                    根据表达式产生对象</span><br><span class="line">re.split(p,s)                    字符串的切分</span><br></pre></td></tr></table></figure>

<h1 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h1><p><strong>对于捕获分组</strong></p>
<p>\1   反向引用第一个捕获分组<br>\g<num>   是python的一种特殊反向引用方式避免了\10的尴尬</p>
<table>
<thead>
<tr>
<th>编程语言</th>
<th>表达式中反向引用</th>
<th>替换中反向引用</th>
</tr>
</thead>
<tbody><tr>
<td>python</td>
<td>\num       或者\g<num></td>
<td>\num  或者\g<num></td>
</tr>
<tr>
<td>JAVA</td>
<td>\num</td>
<td>$num</td>
</tr>
<tr>
<td>.NET</td>
<td>\num</td>
<td>$num</td>
</tr>
<tr>
<td>objective-c</td>
<td>\num</td>
<td>$num</td>
</tr>
<tr>
<td>js</td>
<td>$num</td>
<td>$num</td>
</tr>
<tr>
<td>php</td>
<td>\num</td>
<td>\num</td>
</tr>
<tr>
<td>ruby</td>
<td>\num</td>
<td>\num</td>
</tr>
<tr>
<td>golang</td>
<td>xxx</td>
<td>$num</td>
</tr>
</tbody></table>
<h1 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">repattern=<span class="string">r&quot;(?P&lt;name1&gt;regex)-(?P&lt;name2&gt;regex)&quot;</span></span><br><span class="line">result=re.search(repattern,string)</span><br><span class="line"><span class="built_in">print</span>(result.group(name1))</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>编程语言</th>
<th>命名分组</th>
<th>表达式中反向引用</th>
<th>替换中反向引用</th>
</tr>
</thead>
<tbody><tr>
<td>.NET</td>
<td>(?P<name>regex)</td>
<td>\k<name></td>
<td>$<name></td>
</tr>
<tr>
<td>Objective-C</td>
<td>(?P<name>regex)</td>
<td>\k<name></td>
<td>\k<name></td>
</tr>
<tr>
<td>PHP</td>
<td>(?P<name>regex)</td>
<td>(?P=name)</td>
<td>不支持只能用${num}</td>
</tr>
<tr>
<td>Python</td>
<td>(?P<name>regex)</td>
<td>(?P=name)</td>
<td>\g<name></td>
</tr>
<tr>
<td>JavaScript</td>
<td>(?P<name>regex)</td>
<td>\k<name></td>
<td>$<name></td>
</tr>
<tr>
<td>Ruby</td>
<td>(?P<name>regex)</td>
<td>\k<name></td>
<td>\k<name></td>
</tr>
<tr>
<td>Golang</td>
<td>(?P<name>regex)</td>
<td>xxx</td>
<td>xxx</td>
</tr>
</tbody></table>
<h1 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(?:regex)    只是确定位置而不需要将其捕获</span><br><span class="line">                     定位符</span><br><span class="line">\b单词边界(断言)避免想匹配to却匹配today， 断言捕获在反向引用时要重新断言比如\b\<span class="number">1</span>\b</span><br><span class="line">^       单行下字符串的绝对开始位置                       </span><br><span class="line">$       单行下字符串的绝对结束位置，即最后一个字符</span><br><span class="line">        可以通过定位替换为空字符串实现首尾空白的删除</span><br><span class="line">\Z      包含换行符的最后绝对结束位置</span><br><span class="line">(?m)    开启多行匹配模式</span><br></pre></td></tr></table></figure>

<h1 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h1><table>
<thead>
<tr>
<th>模式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>(?&lt;!regex)</td>
<td>在当前结果左侧不允许出现regex所匹配的字符</td>
</tr>
<tr>
<td>(?!regex)</td>
<td>在当前结果右侧不允许出现regex所匹配的字符</td>
</tr>
<tr>
<td>(?=regex)</td>
<td>在当前结果右侧必须出现regex所匹配的字符</td>
</tr>
<tr>
<td>(?&lt;=regex)</td>
<td>在当前结果左侧必须出现regex所匹配的字符</td>
</tr>
</tbody></table>
<h1 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h1><table>
<thead>
<tr>
<th>模式</th>
<th>对应含义</th>
</tr>
</thead>
<tbody><tr>
<td>(?i)</td>
<td>不区分大小写模式</td>
</tr>
<tr>
<td>(?s)</td>
<td>单行模式(.此模式下可以匹配包括换行符的所有字符)</td>
</tr>
<tr>
<td>(?m)</td>
<td>多行模式</td>
</tr>
<tr>
<td>(?#注释)或者(?x)</td>
<td>注释模式   或使用””””””</td>
</tr>
<tr>
<td>re.U()</td>
<td>此时可以匹配中文，为默认模式</td>
</tr>
<tr>
<td>re.A()</td>
<td>ASCII匹配模式</td>
</tr>
<tr>
<td>(?u)</td>
<td>unicode模式</td>
</tr>
</tbody></table>
<h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p><strong>(?modify.regex)有括号只在括号内部，其他的从哪使用就从哪开始直到遇见模式失效符为止(?-modify)</strong></p>
<h1 id="编码模式"><a href="#编码模式" class="headerlink" title="编码模式"></a>编码模式</h1><p>​    python2默认ASCII,而python3默认Unicode从而\w \s \d 也有了新的定义,如果不使用Unicode会导致是按字节匹配从而匹配错误</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">id_card = <span class="string">&quot;499876300423423243 48876546534536325x 8734932684383568 343425431123432434 24543532352535x 023235345325235&quot;</span></span><br><span class="line">phone_num = <span class="string">&quot;sdj152843943902jkdnv15290647603xnvdf181032873844793divides39218003298ruffed13467354238&quot;</span></span><br><span class="line">cn = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">s = <span class="string">&quot;aabbsbbsaiiqo&quot;</span></span><br><span class="line">html1 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;../../resource/gif/latchet1.gif&quot; width=&quot;300&quot; height=&quot;400&quot; align=&quot;center&quot; alt=&quot;花样系鞋带&quot; border=&quot;1&quot; vspace=&quot;1&quot; hspace=&quot;1&quot; usemap=&quot;鞋带&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;map name=&quot;鞋带&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;area shape=&quot;circle&quot; coords=&quot;180,104,22&quot; href=&quot;assit.html&quot; ismap=&quot;ismap&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;http://tool.liumingye.cn/&quot;&gt;&lt;img src=&quot;../../resource/gif/latchet2.gif&quot; width=&quot;300&quot; height=&quot;400&quot; align=&quot;center&quot; alt=&quot;花样系鞋带&quot; border=&quot;1&quot; vspace=&quot;1&quot; hspace=&quot;1&quot;&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;../../resource/gif/hair.gif&quot; width=&quot;300&quot; height=&quot;400&quot; align=&quot;center&quot; border=&quot;1&quot; vspace=&quot;1&quot; hspace=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;../../resource/gif/rainy.gif&quot; width=&quot;300&quot; height=&quot;400&quot; align=&quot;center&quot; border=&quot;1&quot; vspace=&quot;1&quot; hspace=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;../../resource/gif/windy.gif&quot; width=&quot;300&quot; height=&quot;400&quot; align=&quot;center&quot; border=&quot;1&quot; vspace=&quot;1&quot; hspace=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">previous = <span class="string">&quot;2020-12-25&quot;</span></span><br><span class="line">num = <span class="string">&quot;1239827418932439821840921&quot;</span></span><br><span class="line">result1 = re.findall(<span class="string">r&quot;(?&lt;![0-9])1[0-9]&#123;10&#125;(?![0-9])&quot;</span>, phone_num)</span><br><span class="line">result2 = re.findall(<span class="string">r&quot;[^0-9]1[0-9]&#123;10&#125;[^0-9]&quot;</span>, phone_num)</span><br><span class="line">result3 = re.findall(<span class="string">r&#x27;([1-9]\d&#123;14&#125;)(\d&#123;2&#125;[0-9x])?&#x27;</span>, id_card)</span><br><span class="line">result4 = re.findall(<span class="string">r&#x27;(ab)+&#x27;</span>, s)</span><br><span class="line">result5 = re.findall(<span class="string">r&quot;&lt;img src=(.*?)&gt;&quot;</span>, html1)</span><br><span class="line">result6 = re.sub(<span class="string">r&quot;(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&quot;</span>, <span class="string">r&quot;\1年\2月\3日&quot;</span>, previous)</span><br><span class="line">result7 = re.sub(<span class="string">r&quot;(?&lt;=\d)(?=(\d&#123;3&#125;)+(?!\d))&quot;</span>, <span class="string">r&quot;,&quot;</span>, num)</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;^(?=(ab|cd))&quot;</span>, <span class="string">&quot;abcd&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime环境搭建</title>
    <url>/2021/08/05/07-28-06/</url>
    <content><![CDATA[<p><strong>首先最近在用sublime这款软件但其环境配置着实麻烦不得已就全部看了一遍，也是一篇总结，在此分享给友友们希望能帮到你。</strong></p>
<span id="more"></span>
<p><strong>以下出现的.sublime-build文件都可以通过<u>packageresourcesviewer</u>这个插件来实现，安装后在命令面板输入open resource回车打开你要配置的语言即可，或者仿照下面go语言的方法做下不了这个插件的我把文件打包的链接扔在这了，下载:<a href="https://wwi.lanzoui.com/i2Rdapmferi">https://wwi.lanzoui.com/i2Rdapmferi</a> 密码:52pj解压后放入自己资源包的文件中就可以用了</strong><br>                                    <strong>一切基于自己的编译环境配置好的情况下(也就是可以在命令行时使用的情况下)</strong></p>
<h1 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h1><p><strong>在csingle.sublime-build或者c++.sublime-build中更改配置如下，一般改一个就行了这个要装<u>mingw</u>且配置好环境变量，具体自行百度</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span> &amp; echo. &amp; pause&quot;</span>],</span><br><span class="line">    <span class="string">&quot;file_regex&quot;</span>: <span class="string">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span>, <span class="string">&quot;working_dir&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;selector&quot;</span>: <span class="string">&quot;source.c, source.c++&quot;</span>, <span class="string">&quot;shell&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;cp936&quot;</span>,</span><br><span class="line">    <span class="string">&quot;variants&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Build Only&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span>:[<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Run Only&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span> &amp; echo. &amp; pause&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Pipe Build and Run&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span>:[<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>,<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>, <span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\in&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\out&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Pipe Run Only&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>, <span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;in&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;out&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Project Build &amp; Run&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\*.cpp&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span> &amp; echo. &amp; pause&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Project Build Only&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>\\\\*.cpp&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Project Run Only&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span> &amp; echo. &amp; pause&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="javac"><a href="#javac" class="headerlink" title="javac"></a>javac</h1><p><strong>javac.sublime-build</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;shell_cmd&quot;</span>: <span class="string">&quot;runJava.bat \&quot;<span class="variable">$file</span>\&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;file_regex&quot;</span>: <span class="string">&quot;^(...*?):([0-9]*):?([0-9]*)&quot;</span>,</span><br><span class="line"><span class="string">&quot;selector&quot;</span>: <span class="string">&quot;source.java&quot;</span>,</span><br><span class="line"><span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中runjava.bat应配置文件如下,记得放到自己的jdk的bin目录下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line"><span class="built_in">cd</span> %~dp1</span><br><span class="line">ECHO Compiling %~nx1.......</span><br><span class="line">IF EXIST %~n1.class (</span><br><span class="line">DEL %~n1.class</span><br><span class="line">)</span><br><span class="line">javac %~nx1</span><br><span class="line">IF EXIST %~n1.class (</span><br><span class="line">ECHO -----------OUTPUT-----------</span><br><span class="line">java %~n1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><p><strong><u>这个自己在自己安装的sublime路径下\Data\Packages中创建一个文件夹，而后在该文件中创建一个Go.sublime-build文件</u></strong></p>
<p><strong>Go.sublime-build内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;<span class="variable">$file_name</span>&quot;</span>], </span><br><span class="line">    <span class="string">&quot;file_regex&quot;</span>: <span class="string">&quot;^[ ]*File \&quot;(…*?)\&quot;, line ([0-9]*)&quot;</span>, </span><br><span class="line">    <span class="string">&quot;working_dir&quot;</span>: <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>, </span><br><span class="line">    <span class="string">&quot;selector&quot;</span>: <span class="string">&quot;source.go&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><p><strong>这个需要装linux子系统，在设置中启用适用于linux的windows子系统,而后在shellscript.sublime-build中改为如下配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash <span class="variable">$&#123;file_name&#125;</span>&quot;</span>],</span><br><span class="line">  <span class="string">&quot;shell&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;working_dir&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;file_path&#125;</span>&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p><strong>在python.sublime-build文件中改为</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;-u&quot;</span>,<span class="string">&quot;<span class="variable">$file</span>&quot;</span>],</span><br><span class="line"><span class="string">&quot;file_regex&quot;</span>: <span class="string">&quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;</span>,</span><br><span class="line"><span class="string">&quot;selector&quot;</span>: <span class="string">&quot;source.python&quot;</span>,</span><br><span class="line"><span class="string">&quot;shell&quot;</span>:<span class="string">&quot;true&quot;</span>,</span><br><span class="line"><span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;cp936&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>配置环境</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2021/08/10/11-36-42/</url>
    <content><![CDATA[<p><strong>最想学的一个东西，也是学的最充实的一个，稍微整一下</strong></p>
<span id="more"></span>

<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BeatifulSoup(urlopen(html)).findAll(tag, attribute, recursive, text, limit, keywords)      其中关键字可以通过括号和冒号进行替代</span><br><span class="line">mytag.attrs     获取标签对应的所有属性</span><br><span class="line">myimgtag.attrs[<span class="string">&quot;src&quot;</span>]  获取图片对应的链接属性</span><br><span class="line"><span class="keyword">lambda</span> 参数列表: 表达式            结果只有布尔类型</span><br><span class="line">	students.sort[key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;age&#x27;</span>]]      对student字典按年龄大小升序排列</span><br><span class="line">BY 定位器的策略</span><br><span class="line">	ID	通过html的<span class="built_in">id</span>元素查找</span><br><span class="line">	CLASS_NAME  通过<span class="class"><span class="keyword">class</span>属性来查找元素</span></span><br><span class="line"><span class="class">	<span class="title">CSS_SELECTOR</span>	通过<span class="title">css</span>的<span class="title">class</span>,<span class="title">id</span>,<span class="title">tag</span>来查找元素用#<span class="title">idName</span>, .<span class="title">className</span>, <span class="title">tagName</span></span></span><br><span class="line"><span class="class">	<span class="title">LINK_TEXT</span>	通过链接文字查找&lt;<span class="title">a</span>&gt;标签</span></span><br><span class="line"><span class="class">	<span class="title">PARTIAL_LINK_TEXT</span>	与上述类似，只不过是以部分链接文字进行查找</span></span><br><span class="line"><span class="class">	<span class="title">NAME</span>	通过标签的<span class="title">name</span>属性进行查找</span></span><br><span class="line"><span class="class">	<span class="title">TAG_NAME</span>	通过<span class="title">tag</span>的名称进行查找</span></span><br><span class="line"><span class="class">	<span class="title">XPATH</span>	用<span class="title">xpath</span>表达式选择匹配</span></span><br></pre></td></tr></table></figure>

<h3 id="urlparse的使用"><a href="#urlparse的使用" class="headerlink" title="urlparse的使用"></a>urlparse的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlparse.urlparse(url).***</span><br><span class="line">	url = <span class="string">&quot;http://localhost/test.py?a=hello&amp;b=world &quot;</span></span><br><span class="line">	scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;localhost&#x27;</span>, path=<span class="string">&#x27;/test.py&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;a=hello&amp;b=world &#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	result.scheme : 网络协议</span><br><span class="line">	result.netloc: 服务器位置（也有可能是用户信息）</span><br><span class="line">	result.path: 网页文件在服务器中的位置</span><br><span class="line">	result.params: 可选参数</span><br><span class="line">	result.query: &amp;连接键值对</span><br><span class="line">	result.fragment: </span><br></pre></td></tr></table></figure>

<h1 id="XPATH表达式"><a href="#XPATH表达式" class="headerlink" title="XPATH表达式"></a>XPATH表达式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//跨越多行或者上上级</span><br><span class="line">/text()取出对象里面的文本内容</span><br><span class="line">/@attr 获取某个标签属性里面的值</span><br></pre></td></tr></table></figure>

<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [</span><br><span class="line">	&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ROSE&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line">			]</span><br><span class="line"><span class="comment"># 按name值升序排列列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="comment"># 按name值降序排列列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="comment"># 按age值升序排列列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br></pre></td></tr></table></figure>

<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/&#x27;</span>)</span><br><span class="line">page_text = driver.page_source</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">dics = []</span><br><span class="line">li_lists = tree.xpath(<span class="string">&quot;//ul[@id=&#x27;gzlist&#x27;]/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_lists:</span><br><span class="line">    name = li.xpath(<span class="string">&quot;./dl/@title&quot;</span>)</span><br><span class="line">    url = li.xpath(<span class="string">&quot;./dl/a/@href&quot;</span>)</span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: url</span><br><span class="line">    &#125;</span><br><span class="line">    dics.append(dic)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">15</span>):</span><br><span class="line">    <span class="built_in">print</span>(dics[i])</span><br></pre></td></tr></table></figure>

<h2 id="自动化操作"><a href="#自动化操作" class="headerlink" title="自动化操作"></a>自动化操作</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 标签定位</span></span><br><span class="line">search_input = driver.find_element_by_id(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="comment"># 标签交互</span></span><br><span class="line">search_input.send_keys(<span class="string">&#x27;男士内裤&#x27;</span>)</span><br><span class="line"><span class="comment"># 执行一组js代码</span></span><br><span class="line">driver.execute_script(<span class="string">&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;</span>)</span><br><span class="line">btn = driver.find_element_by_css_selector(<span class="string">&#x27;.btn-search&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">btn.click()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.pianku.li&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 返回上个标签页</span></span><br><span class="line">driver.back()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 向前进一个标签页</span></span><br><span class="line">driver.forward()</span><br></pre></td></tr></table></figure>

<h2 id="拖动动作"><a href="#拖动动作" class="headerlink" title="拖动动作"></a>拖动动作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span>)</span><br><span class="line"><span class="comment"># 标签定位 如果标签是定义在iframe标签之中的则必须通过如下方法进行标签定位</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;iframeResult&#x27;</span>)</span><br><span class="line">drag = driver.find_element_by_id(<span class="string">&#x27;draggable&#x27;</span>)</span><br><span class="line">drop = driver.find_element_by_id(<span class="string">&#x27;droppable&#x27;</span>)</span><br><span class="line"><span class="comment"># 动作链</span></span><br><span class="line">action = ActionChains(driver)</span><br><span class="line"><span class="comment"># 点击并长按</span></span><br><span class="line">action.click_and_hold(drag)</span><br><span class="line"><span class="comment"># action.drag_and_drop(drag, drop).perform()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="comment"># 移动偏移17个像素</span></span><br><span class="line">    <span class="comment"># perform 表示立即执行动作</span></span><br><span class="line">    action.move_by_offset(<span class="number">17</span>, <span class="number">0</span>).perform()</span><br><span class="line">    sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="comment"># 释放动作链</span></span><br><span class="line">action.release()</span><br></pre></td></tr></table></figure>

<h2 id="登录QQ空间"><a href="#登录QQ空间" class="headerlink" title="登录QQ空间"></a>登录QQ空间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://i.qq.com/&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)</span><br><span class="line">pc = driver.find_element_by_id(<span class="string">&#x27;switcher_plogin&#x27;</span>)</span><br><span class="line">pc.click()</span><br><span class="line">username = driver.find_element_by_id(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">password = driver.find_element_by_id(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">username.send_keys(<span class="string">&#x27;QQ号&#x27;</span>)</span><br><span class="line">password.send_keys(<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&#x27;login_button&#x27;</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure>

<h2 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 实现无可视化</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="comment"># 实现无可视化</span></span><br><span class="line">chrome_options = ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置下载路径</span></span><br><span class="line">prefs = &#123;<span class="string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;download.default_directory&#x27;</span>: <span class="string">r&#x27;d:\&#x27;&#125;</span></span><br><span class="line"><span class="string">options.add_experimental_option(&#x27;</span>prefs<span class="string">&#x27;, prefs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">driver = webdriver.Chrome(options=chrome_options)</span></span><br><span class="line"><span class="string">driver.get(&#x27;</span>https://www.baidu.com<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">print(driver.page_source)</span></span><br><span class="line"><span class="string">driver.quit()</span></span><br></pre></td></tr></table></figure>

<h2 id="规避检测"><a href="#规避检测" class="headerlink" title="规避检测"></a>规避检测</h2><p>根据WebDriver规范(<a href="https://w3c.github.io/webdriver/#x4-interface)%E7%9A%84%E6%8F%8F%E8%BF%B0%EF%BC%8CWebDriver%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E6%A0%87%E5%87%86%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BB%A5%E4%BE%BF%E4%BA%8E%E6%96%87%E6%A1%A3%EF%BC%88document%EF%BC%89%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%84%E4%BA%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A7%E5%88%B6%E4%B9%8B%E4%B8%AD%E3%80%82">https://w3c.github.io/webdriver/#x4-interface)的描述，WebDriver定义了一个标准方法，以便于文档（document）判断当前浏览器处于自动化控制之中。</a><br>这个方法就是检测window.navigator.webdriver的值，正常情况下其值为undefined，自动化控制下为true。注意，正常情况下不是false，在JavaScript中undefined为未定义，即该值不存在，而false表示一布尔值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">script = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">    get: () =&gt; undefined</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;<span class="string">&quot;source&quot;</span>: script&#125;)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 在控制台中验证window.navigator.webdriver的值为undefined。</span></span><br></pre></td></tr></table></figure>

<h2 id="模拟登录测验"><a href="#模拟登录测验" class="headerlink" title="模拟登录测验"></a>模拟登录测验</h2><h2 id="页面元素监测"><a href="#页面元素监测" class="headerlink" title="页面元素监测"></a>页面元素监测</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> StaleElementReferenceException</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitForLoad</span>(<span class="params">driver</span>):</span></span><br><span class="line">    elem = driver.find_element_by_tag_name(<span class="string">&quot;html&quot;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;timeout after 10 secs and returning&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        time.sleep(<span class="number">.5</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            elem == driver.find_element_by_tag_name(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> StaleElementReferenceException:  <span class="comment"># 监视某个元素，如果该元素消失则进行操作</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">&#x27;D://APP//phantomjs//bin//phantomjs&#x27;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://pythonscraping.com/pages/javascript/redirectDemo1.html&quot;</span>)</span><br><span class="line">waitForLoad(driver)</span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://pythonscraping.com/pages/javascript/ajaxDemo.html&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(     <span class="comment"># 最大等待时间间隔为十秒</span></span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">&quot;loadedButton&quot;</span>))      <span class="comment"># 触发条件</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(driver.find_element_by_id(<span class="string">&quot;content&quot;</span>).text)</span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>

<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a>requests.get()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(url, params, headers)</span><br><span class="line">.content 获得其二进制数据</span><br><span class="line">.text    获得字符串文本</span><br></pre></td></tr></table></figure>

<h2 id="requests-post"><a href="#requests-post" class="headerlink" title="requests.post()"></a>requests.post()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.post(url, data, headers)</span><br></pre></td></tr></table></figure>

<p><strong>网络认证</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> AuthBase</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">auth = HTTPBasicAuth(<span class="string">&#x27;ivan&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">r = requests.post(url=<span class="string">&#x27;http://pythonscraping.com/pages/auth/login.php&#x27;</span>, auth=auth)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p><strong>上传文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = &#123;<span class="string">&#x27;uploadFile&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;../../../../desktop/河南.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">&quot;http://pythonscraping.com/pages/files/processing2.php&quot;</span>, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h2 id="requests-session"><a href="#requests-session" class="headerlink" title="requests.session()"></a>requests.session()</h2><p><strong>保持用户登录时使用该方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">session.get()和session.post()就和原先的requests对应的模块类似了</span><br></pre></td></tr></table></figure>

<p><strong>cookies</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.Session()</span><br><span class="line">params = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ivan&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&quot;http://pythonscraping.com/pages/cookies/welcome.php&quot;</span>, params)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cookie is set to:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.cookies.get_dict())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;going to profile page...&quot;</span>)</span><br><span class="line">r = session.get(<span class="string">&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;</span>, cookies=r.cookies)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>信道基础</title>
    <url>/2021/08/06/22-26-08/</url>
    <content><![CDATA[<p><strong>对复杂信道下无线通信学习的归纳</strong></p>
<h1 id="一-无线通信系统"><a href="#一-无线通信系统" class="headerlink" title="一. 无线通信系统"></a>一. 无线通信系统</h1><p>首先看一张图也是无线系统框图</p>
<span id="more"></span>

<p><img src="/images/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%A1%86%E5%9B%BE.jpg" alt="无线通信系统框图"></p>
<h1 id="二-复杂信道"><a href="#二-复杂信道" class="headerlink" title="二. 复杂信道"></a>二. 复杂信道</h1><h2 id="1-加性高斯白噪声（AWGN）信道"><a href="#1-加性高斯白噪声（AWGN）信道" class="headerlink" title="(1) 加性高斯白噪声（AWGN）信道"></a>(1) 加性高斯白噪声（AWGN）信道</h2><p><strong>信道特性</strong></p>
<p>加性高斯白噪声（Additive White Gaussian Noise， AWGN）是最基本的<br>噪声模型</p>
<p>加性噪声：叠加在信号上的一种噪声，通常记为 n(t)，而且无论有无信<br>号，噪声 n(t)都是始终存在的。因此通常称它为加性噪声或者加性干扰</p>
<p>白噪声：噪声的功率谱密度在所有的频率上均为一常数，则称这样的噪<br>声为白噪声。如果白噪声取值的概率分布服从高斯分布(又称正态分布)，<br>则称这样的噪声为高斯白噪声</p>
<p>信噪比（Signal to Noise Ratio， SNR）是 AWGN 信道性能的关键指标。<br>AWGN 信道中的许多不同性能指标是 SNR 的函数，包括误码率和信道容量。<br>定义为 SNR = E<sub>x</sub> / N<sub>0</sub></p>
<h2 id="2-卫星信道"><a href="#2-卫星信道" class="headerlink" title="(2) 卫星信道"></a>(2) 卫星信道</h2><p>卫星信道充足的带宽允许通信系统以较低的码速率传输数据，数据间的符号间干扰可以忽略，信道引入的加性噪声和干扰可以用高速白噪声来建模,并且这种噪声在符号间是相互独立的，是一种典型的 AWGN信道</p>
<p>卫星信道传输距离远，由于衰减和噪声干扰的影响， 信道在传输过程中将产生畸变，如果要保证通信质量，就需要提高信噪比，但通常卫星通信系统是非实时的、功率受限的，所以必须使用相应的信道编码技术进行检错和纠错。在卫星通信系统中应用差错控制编码，不仅可以给系统提供高的可靠性和传输稳定性，同于由于编码增益的增加，系统传输信息所需的能量可大为降低，这对于功率受限的卫星信道具有重要的意义</p>
<h2 id="3-衰落信道"><a href="#3-衰落信道" class="headerlink" title="(3) 衰落信道"></a>(3) 衰落信道</h2><p><img src="/images/%E4%BF%A1%E9%81%93%E8%A1%B0%E5%BC%B1%E7%89%B9%E6%80%A7.jpg" alt="衰弱信道的分类"></p>
<h3 id="大尺度衰落"><a href="#大尺度衰落" class="headerlink" title="大尺度衰落"></a>大尺度衰落</h3><h4 id="路径损耗："><a href="#路径损耗：" class="headerlink" title="路径损耗："></a>路径损耗：</h4><ol>
<li>由空间传播造成，由发射功率的辐射扩散和信道的传播特性造成的</li>
<li>反映宏观范围内接收信号功率均值的变化  </li>
<li>理论上认为对于相同的收发距离，路径损耗也相同</li>
<li>但实际上相同距离的不同接受点上接收功率存在较大变化</li>
<li>甚至同一接受点不同时间的接收功率也有较大波动 </li>
</ol>
<h4 id="阴影效应："><a href="#阴影效应：" class="headerlink" title="阴影效应："></a>阴影效应：</h4><ol>
<li>指在无线通信系统中，移动台在运动的情况下，由于大型建筑物和其他物体对电波的传输路径的阻挡而在传播接收区域上形成半盲区，从而形成电磁场阴影。 </li>
<li><strong>这种随移动台位置的不断变化而引起的接收点场强中值的起伏变化叫做阴影效应</strong>  </li>
</ol>
<h3 id="小尺度衰落"><a href="#小尺度衰落" class="headerlink" title="小尺度衰落"></a>小尺度衰落</h3><h4 id="多径效应："><a href="#多径效应：" class="headerlink" title="多径效应："></a>多径效应：</h4><p>多径效应指电磁波经不同路径传播后，各分量场到达接收端时间不同，按各自相位相互叠加而造成干扰，使得原来的信号失真，或者产生错误。  </p>
<p>多径效应产生时延扩展（信号最快和最慢到达接收端的时差），导致多路信号叠加后产生多径衰落，对该衰落建的模有比如瑞利型衰落，指接收端信号的振幅 V(t)的一维分布服从瑞利分布（即在任意时刻 ti，V(ti)都是一个服从瑞利分布的随机值）。从频谱上看，多径效应使单一谱线变成了窄带频谱，即多径传播引起了频率弥散。   </p>
<h5 id="平坦衰落"><a href="#平坦衰落" class="headerlink" title="平坦衰落"></a>平坦衰落</h5><p>若信号带宽（如 LTE 的子载波带宽 15kHz）小于信道的相干带宽，则在信号自身的频带内经历的信道基本一样，则为平坦衰落；  </p>
<h5 id="选择性衰落"><a href="#选择性衰落" class="headerlink" title="选择性衰落"></a>选择性衰落</h5><p>反之，信号在自身的频带内不同频率经历的信道差别很大，导致不同频<br>率的衰落不同，称之为频率选择性衰落  </p>
<h5 id="消除方法"><a href="#消除方法" class="headerlink" title="消除方法"></a>消除方法</h5><p>由于多径效应的影响，信号到达时间会产生变化。由于到达时间的变化，同一载波内的符号之间会相互干扰，形成符号间干扰（ISI）。为了消除符号问干扰(ISl)，应该在符号间插入保护间隔。  </p>
<h4 id="多普勒时延"><a href="#多普勒时延" class="headerlink" title="多普勒时延"></a>多普勒时延</h4><p>多普勒效应是指随着观察者距离波源距离远近而发生的频率变化。多普勒效应带来了多普勒扩展（即多普勒频移），信道的相干时间与最大多普勒频移成反比，  </p>
<h5 id="慢衰落"><a href="#慢衰落" class="headerlink" title="慢衰落"></a>慢衰落</h5><p>若发射信号的符号周期小于相干时间，那么认为接收信号经历的是慢衰落（时间非选择性衰落）  </p>
<h5 id="快衰落"><a href="#快衰落" class="headerlink" title="快衰落"></a>快衰落</h5><p>若发射信号的符号周期大于相干时间，那么认为接收信号经历的是快衰落（时间选择性衰落）</p>
<h5 id="消除方法-1"><a href="#消除方法-1" class="headerlink" title="消除方法"></a>消除方法</h5><p>由于中心频率的频移，信号会对其他载波造成干扰，形成载波间干扰（ICI）。在 OFDM 中，为了消除 ICI，通常保护间隔是由循环前缀 CP 来充当（这样既能消除 ICI，又能消除 ISI）。  </p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h5 id="乡村信道："><a href="#乡村信道：" class="headerlink" title="乡村信道："></a>乡村信道：</h5><p>乡村场景，地势开阔，具有山区、平原、圩区等地形。为了覆盖更多的用户，基站一般建设较远。信号经过乡村信道后，将受到地形、天气、湿度、移动台位置等因素影响。</p>
<h5 id="郊区信道："><a href="#郊区信道：" class="headerlink" title="郊区信道："></a>郊区信道：</h5><p>郊区场景，一般建筑物不像城市那么密集，但通信用户也不像乡村场景那样分散。信号经过郊区信道后，将受到 TR 距离、天气、湿度、移动台位置等因素影响。</p>
<h5 id="城市信道："><a href="#城市信道：" class="headerlink" title="城市信道："></a>城市信道：</h5><p>城市场景，建筑密集，基站覆盖广。信号经过城市信道后，将受到建筑物的反射绕射、天气、湿度、移动台位置等因素影响，产生衰落和多径。</p>
<h5 id="室内信道："><a href="#室内信道：" class="headerlink" title="室内信道："></a>室内信道：</h5><p>室内场景，研究时一般会考虑装修材料、 TR 楼层间隔等因素。 信号经过室内场景后，将因为穿过不同材料的装饰物而发生衰减、多径。同时， TR 在不同楼层时，将发生大幅度衰减  </p>
<h2 id="3-干扰信道"><a href="#3-干扰信道" class="headerlink" title="(3) 干扰信道"></a>(3) 干扰信道</h2><p><strong>人为干扰</strong>， 特别是蓄意干扰,是无线通信系统面临的最大和最直接的威胁  </p>
<p>无论是数字通信还是模拟通信， 对通信接收端的高效干扰有<strong>两种方面</strong>：</p>
<ol>
<li>一方面可以直接地表现为对通信信号的信噪比或信干噪比的有效影响,即通过干扰使其低于正常通信的最低门限即可</li>
<li>另一方面， 高效干扰的效果可以间接地表现为对通信信号在“功率-频率-时间冶三维空间的影响,即通过干扰使得在一定的时间、一定的频率上， 使用尽可能低的功率对通信信号进行有效压制。  </li>
</ol>
<h4 id="大致类别"><a href="#大致类别" class="headerlink" title="大致类别"></a>大致类别</h4><ol>
<li>采用瞬时较窄的干扰信号带宽， 以集中干扰功率对干扰目标频率进行有效压制,如<strong>部分频带干扰</strong>  </li>
<li>采用动态频率干扰以有效干扰尽可能宽的频段， 如<strong>扫频干扰</strong>  </li>
<li>采用单频率或几个频率的高速碰撞干扰， 如<strong>单音、多音干扰</strong>等等  </li>
</ol>
<h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><ol>
<li>单音干扰：单音干扰在频谱上表现为单/多个频点上的强干扰信号。</li>
<li>宽带干扰： 远大于系统带宽的干扰源。</li>
<li>梳状干扰： 干扰频带呈梳形的干扰信号，仅落入这此频带内的通信信号受干扰，干扰频带可为固定的或者移动的。</li>
<li>扫频干扰： 扫频干扰利用一个相对较窄的窄带信号在一定的周期内，重复扫描某个较宽的干扰频带。</li>
</ol>
<h1 id="三-通信系统性能及其评估"><a href="#三-通信系统性能及其评估" class="headerlink" title="三.通信系统性能及其评估"></a>三.通信系统性能及其评估</h1><p>通信的基本目的是及时准确地完成传递、交换信息的任务。 衡量一个无线数字通信系统性能好坏的指标有多种，但最为主要的是<strong>有效性</strong>和<strong>可靠性</strong>。</p>
<p>有效性是指传输一定信息量所占用的频带宽度，即频带利用率；</p>
<p>可靠性是指传输信息的准确程度。</p>
<p>不同的通信系统对有效性和可靠性的要求及度量方法也不尽相同。 针对数字通信系统， 通常可以从误码率、 频带利用率、对信道的适应能力等几个方面进行性能评估。  </p>
<h2 id="1-抗噪声性能"><a href="#1-抗噪声性能" class="headerlink" title="(1) 抗噪声性能"></a>(1) 抗噪声性能</h2><p>通信系统的抗噪声性能是指系统克服加性白噪声影响的能力。 分析条件：假设信道特性是恒参信道，在信号的频带范围内具有理想矩形的传输特性（可取其传输系数为 K） ； 信道噪声是加性高斯白噪声。并且认为噪声只对信号的接收带来影响，因而分析系统性能是在接收端进行的。  </p>
<h2 id="2-误码率"><a href="#2-误码率" class="headerlink" title="(2) 误码率"></a>(2) 误码率</h2><p>误码率是衡量一个通信系统性能的重要指标。 在数字无线通信系统中，信道噪声及干扰有可能使传输码元产生错误， 而错误程度通常用误码率来衡量。 在信道高斯白噪声的干扰下，各种数字调制系统的误码率取决于解调端的输入信噪比，而误码率表达式的形式则取决于解调方式 </p>
<p>相干解调为互补误差函数 ,如下图，非相干解调时，为指数函数形式。  </p>
<p><img src="/images/tex1.png"></p>
<p>常见的数字调制系统 ASK、 FSK、 PSK、 DPSK、 MPSK、 MDPSK 的误码率计算<br>公式如表 1 所示。 表中的误码率公式是在以下前提条件下得到。</p>
<ol>
<li>二进制数字信号“1” 和“0” 是独立且等概率出现的；</li>
<li>信道加性噪声n(t)是零均值高斯白噪声，单边功率谱密度为n<sub>0</sub>, 信道参数恒定；</li>
<li>通过接收滤波器后的噪声为窄带高斯噪声， 其均值为零，方差为σ<sup>2</sup><sub>n</sub>;</li>
<li>由接收滤波器引起的码间串扰很小，忽略不计；  </li>
<li>接收端产生的相干载波的相位差为 0。  </li>
</ol>
<h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><p><img src="/images/%E6%95%B0%E5%AD%97%E8%A7%A3%E8%B0%83%E8%AF%AF%E7%A0%81%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.jpg"></p>
<h1 id="四-无线通信系统反向设计"><a href="#四-无线通信系统反向设计" class="headerlink" title="四. 无线通信系统反向设计"></a>四. 无线通信系统反向设计</h1><p>无线通信系统的设计是工程应用中面临的一个基本问题。 基于不同的无线信道特性，考虑系统性能要求， 需要反向考虑和设计无线通信系统中的各个模块。  </p>
<p><strong>针对通信系统的有效性，需要考虑信源编码模块的设计。</strong></p>
<h2 id="信源编码"><a href="#信源编码" class="headerlink" title="信源编码"></a>信源编码</h2><ol>
<li>设法减少码元数目和降低码元速率，即通常所说的数据压缩。码元速率将直接影响传输所占的带宽，而传输带宽又直接反映了通信的有效性  </li>
<li>当信息源给出的是模拟语音信号时，信源编码器将其转换成数字信号，以实现模<br>拟信号的<strong>数字化传输</strong> </li>
</ol>
<h2 id="数字化传输"><a href="#数字化传输" class="headerlink" title="数字化传输"></a>数字化传输</h2><h3 id="脉冲编码调制-PCM"><a href="#脉冲编码调制-PCM" class="headerlink" title="脉冲编码调制(PCM)"></a>脉冲编码调制(PCM)</h3><p>简称脉码调制:一种用一组二进制数字代码来代替连续信号的抽样值，从而实现通信的方式。由于这种通信方式抗干扰能力强，它在光纤通信、数字微波通信、卫星通信中均获得了极为广泛的应用  </p>
<h3 id="增量调制-ΔM"><a href="#增量调制-ΔM" class="headerlink" title="增量调制(ΔM)"></a>增量调制(ΔM)</h3><p>将差值编码传输，同样可传输模拟信号所含的信息。此差值又称“增量” ，其值可正可负。这种用差值编码进行通信的方式，就称为“增量调制” ，缩写为 DM 或 ΔM，主要用于军方通信中。信源编码为了减少信源输出符号序列中的剩余度、提高符号的平均信息量，对信源输出的符号序列所施行的变换  </p>
<p><strong>数字化传输具体来说就是针对信源输出符号序列的统计特性来寻找某种方法，把信源输出符号序列变换为最短的码字序列，使后者的各码元所载荷的平均信息量最大，同时又能保证无失真地恢复原来的符号序列</strong> </p>
<h3 id="消除干扰"><a href="#消除干扰" class="headerlink" title="消除干扰"></a>消除干扰</h3><p>信道编码数字信号在信道传输时，由于噪声、衰落以及人为干扰等，将会引起差错。为了减少差错，信道编码器对传输的信息码元按一定的规则加入保护成分（监督元），组成所谓“抗干扰编码”。接收端的信道译码器按一定规则进行解码，从解码过程中发现错误或纠正错误，从而提高通信系统抗干扰能力，实现可靠通信。信道编码是针对无线信道的干扰太多，把你要传送的数据加上些信息，来纠正信道的干扰。  </p>
<p>值得注意的是，信源编码和信道编码并不是单独分离的两个模块，他们对于通信<br>系统的影响是相辅相成的，因此在进行实际通信系统的设计时，需要找到两种编<br>码方案的折中，兼顾系统的有效性和可靠性。  </p>
]]></content>
      <categories>
        <category>通信工程</category>
      </categories>
      <tags>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑综合记录</title>
    <url>/2021/08/06/22-31-10/</url>
    <content><![CDATA[<p><strong>Windows里面有好多东西想自己定制，为此不免要涉及到好多系统对应的源文件，在这里稍微整理一下，欢迎讨论补充</strong></p>
<span id="more"></span>

<h1 id="一-注册表"><a href="#一-注册表" class="headerlink" title="一.注册表"></a>一.注册表</h1><h2 id="1-桌面右键新建"><a href="#1-桌面右键新建" class="headerlink" title="1. 桌面右键新建"></a>1. 桌面右键新建</h2><p>添加鼠标右键新建项：对应单击桌面空白处，新建菜单中的项目对应注册表<br>中的位置 ：</p>
<p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion<br>Explorer\Discardable\PostSetup\ShellNew</p>
<p>直接注册表修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\.pptx]</span><br><span class="line">@=<span class="string">&quot;.pptx&quot;</span></span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\.pptx\ShellNew]</span><br><span class="line"><span class="string">&quot;NullFile&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;FileName&quot;</span>=<span class="string">&quot;temp.pptx&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-桌面右键菜单"><a href="#2-桌面右键菜单" class="headerlink" title="2. 桌面右键菜单"></a>2. 桌面右键菜单</h2><p>鼠标单击桌面：桌面空白处点击右键菜单对应注册表位置：</p>
<p>HKEY_CLASSES_ROOT\Directory\Background\shellex<br>ContextMenuHandlers</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Terminal]</span><br><span class="line">@=<span class="string">&quot;Open with Terminal&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Terminal\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;\&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe\&quot; \&quot;%1\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\Terminal]</span><br><span class="line">@=<span class="string">&quot;Open with Terminal&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\Terminal\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;\&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe\&quot; \&quot;%V\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Terminal]</span><br><span class="line">@=<span class="string">&quot;Open with Terminal&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Terminal\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;\&quot;C:\\Users\\evanmuxing\\AppData\\Local\\Microsoft\\WindowsApps\\flute.exe\&quot; \&quot;%V\&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-文件右键菜单"><a href="#3-文件右键菜单" class="headerlink" title="3. 文件右键菜单"></a>3. 文件右键菜单</h2><p>右键单击文件：鼠标右键文件，弹出的菜单项对应注册表中的位置：</p>
<p>HKEY_CLASSES_ROOT*\shellex\ContextMenuHandlers</p>
<h2 id="4-文件夹右键菜单"><a href="#4-文件夹右键菜单" class="headerlink" title="4. 文件夹右键菜单"></a>4. 文件夹右键菜单</h2><p>单击文件夹：鼠标右键文件夹，弹出的菜单项对应注册表中的位置：</p>
<p>HKEY_CLASSES_ROOT\Directory\shellex\ContextMenuHandlers</p>
<h2 id="5-IE浏览器右键"><a href="#5-IE浏览器右键" class="headerlink" title="5. IE浏览器右键"></a>5. IE浏览器右键</h2><p>鼠标单击ie浏览器里：鼠标右键在IE浏览器里，弹出的菜单明细对应注册<br>表中的位置：</p>
<p>HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer<br>MenuExt</p>
<h1 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h1><p>顾名思义就是无论你在那个应用程序里面正在干着什么事(除了关机)，都能<br>通过快捷键进行调用</p>
<p>主要步骤如下</p>
<ol>
<li>首先win+r打开运行，在里面输入control打开控制面板</li>
<li>搜索并打开管理工具，这时会打开一个文件夹，先放在这别关</li>
<li>在桌面右键新建一个快捷方式，指向你希望快捷键打开的程序</li>
<li>然后对该快捷方式右键属性，点中快捷键框，在键盘上按下<br> 你想定义的快捷键，这时基本上就算成功了，之前没要管理员程序<br> 所以还有第五步，如果要了第五步就可以省了，自己找个文件夹藏着<br> 还有记得不要与系统快捷键冲突</li>
<li>然后将该快捷方式拖入你第二步打开的那个文件夹里，大功告成</li>
</ol>
<h1 id="特殊文件夹"><a href="#特殊文件夹" class="headerlink" title="特殊文件夹"></a>特殊文件夹</h1><p><strong>windows里有一些不为人知的文件夹，命名的名字为它时能触发菜单哟</strong></p>
<ol>
<li>上帝模式，命名为这个时可以管控电脑上几乎所有设置如下：<br> <strong>.{ED7BA470-8E54-465E-825C-99712043E01C}</strong><br> 自己新建一个文件夹命名为它试试看</li>
</ol>
<h1 id="电池计划"><a href="#电池计划" class="headerlink" title="电池计划"></a>电池计划</h1><p><strong>其实电池除了开发商提供的最佳性能外，<br>微软本身也提供了高级电池选项，下面是卓越模式的开启方法</strong></p>
<ol>
<li>win+r 输入powershell</li>
<li>在powershell里面输入<br> <strong>powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61</strong><br> 以打开卓越模式</li>
</ol>
<h1 id="转换分区引导"><a href="#转换分区引导" class="headerlink" title="转换分区引导"></a>转换分区引导</h1><ol>
<li>legacy引导对应MBR分区的磁盘（性能较差）</li>
<li>UEFI引导对应GPT分区的磁盘（性能较好）</li>
<li>需要开机进入某个模式(应该是高级bios)后shift+F10打开cmd<br> 后依次输入<br> a. Diskpart<br> b. lisk disk<br> c. select disk 0(选中所要改变格式的磁盘)<br> d. clean(清空磁盘全部分区)<br> e. convert GPT    </li>
<li>取消管理权限</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00  </span><br><span class="line">[-HKEY_CLASSES_ROOT\*\shell\runas]  </span><br><span class="line">[-HKEY_CLASSES_ROOT\exefile\shell\runas2]  </span><br><span class="line">[-HKEY_CLASSES_ROOT\Directory\shell\runas]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\runas]</span><br><span class="line">@=<span class="string">&quot;获取管理员所有权&quot;</span></span><br><span class="line"><span class="string">&quot;NoWorkingDirectory&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\runas\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;</span></span><br><span class="line"><span class="string">&quot;IsolatedCommand&quot;</span>=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\exefile\shell\runas2]</span><br><span class="line">@=<span class="string">&quot;获取管理员所有权&quot;</span></span><br><span class="line"><span class="string">&quot;NoWorkingDirectory&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\exefile\shell\runas2\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;</span></span><br><span class="line"><span class="string">&quot;IsolatedCommand&quot;</span>=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\runas]</span><br><span class="line">@=<span class="string">&quot;获取管理员所有权&quot;</span></span><br><span class="line"><span class="string">&quot;NoWorkingDirectory&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\runas\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;</span></span><br><span class="line"><span class="string">&quot;IsolatedCommand&quot;</span>=<span class="string">&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>配置环境</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码</title>
    <url>/2021/08/10/11-22-58/</url>
    <content><![CDATA[<p><strong>在做一些事情的时候，比如爬虫文件操作时特别容易遇见乱码，这时真的特别无语，下面收录一些自己见过用过的编码，具体慢慢补充</strong></p>
<span id="more"></span>

<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><p>英文数字为ASCII码，只有ASCII的为文本文件，其他的为二进制文件</p>
<p><img src="/images/ascii.jpg" alt="ASCII"></p>
<h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p>可变长度的Unicode  可以用1到4个字节不同长度表示 中文日文韩文对应其三字节， 英文对应其单字节</p>
<h1 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h1><p>编码是双字节编码  《汉字内码扩展规范》针对汉字的编码 为十六进制编码</p>
<h1 id="其他编码"><a href="#其他编码" class="headerlink" title="其他编码"></a>其他编码</h1><p>ISO-8859-1  为拉丁字母设计，会出现小写1/2以及版权标记符号</p>
<p>其他字符集ISO-8859-9(土耳其)， ISO-8859-2(德语)，ISO-8859-15(法语)</p>
]]></content>
      <categories>
        <category>编码</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据表</title>
    <url>/2021/08/09/16-39-13/</url>
    <content><![CDATA[<p>创建数据表的过程是规定数据列的属性的过程，同时也是实施数据完整性（包括实体完整性、引用完整性和域完整性）约束的过程。接下来我们介绍一下创建数据表的语法形式。</p>
<span id="more"></span>

<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><p>在 MySQL 中，可以使用 <strong>CREATE TABLE</strong> 语句创建表。其语法格式为：</p>
<p>CREATE TABLE &lt;表名&gt; ([表定义选项])[表选项][分区选项];</p>
<p>其中，<code>[表定义选项]</code>的格式为：</p>
<p>&lt;列名1&gt; &lt;类型1&gt; [,…] &lt;列名n&gt; &lt;类型n&gt;</p>
<p>CREATE TABLE 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。</p>
<p>这里首先描述一个简单的新建表的例子，然后重点介绍 CREATE TABLE 命令中的一些主要的语法知识点。</p>
<p>CREATE TABLE 语句的主要语法及使用说明如下：</p>
<ul>
<li>CREATE TABLE：用于创建给定名称的表，必须拥有表CREATE的权限。</li>
<li>&lt;表名&gt;：指定要创建表的名称，在 CREATE TABLE 之后给出，必须符合标识符命名规则。表名称被指定为 db_name.tbl_name，以便在特定的数据库中创建表。无论是否有当前数据库，都可以通过这种方式创建。在当前数据库中创建表时，可以省略 db-name。如果使用加引号的识别名，则应对数据库和表名称分别加引号。例如，’mydb’.’mytbl’ 是合法的，但 ‘mydb.mytbl’ 不合法。</li>
<li>&lt;表定义选项&gt;：表创建定义，由列名（col_name）、列的定义（column_definition）以及可能的空值说明、完整性约束或表索引组成。</li>
<li>默认的情况是，表被创建到当前的数据库中。若表已存在、没有当前数据库或者数据库不存在，则会出现错误。</li>
</ul>
<blockquote>
<p>提示：使用 CREATE TABLE 创建表时，必须指定以下信息：</p>
<ul>
<li>要创建的表的名称不区分大小写，不能使用SQL语言中的关键字，如DROP、ALTER、INSERT等。</li>
<li>数据表中每个列（字段）的名称和数据类型，如果创建多个列，要用逗号隔开。</li>
</ul>
</blockquote>
<p><strong>创建约束表格</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table pages (id bigint(7) not null auto_increment, title varchar(200), content varchar(10000), created timestamp default current_timestamp, primary key(id));</span><br></pre></td></tr></table></figure>

<p><strong>创建连接表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table `wikipedia`.`pages`(`id` int not null auto_increment,`url` varchar(255) not null,`created` timestamp not null default current_timestamp,primary key (`id`));</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>数据表属于数据库，在创建数据表之前，应使用语句“USE&lt;数据库&gt;”指定操作在哪个数据库中进行，如果没有选择数据库，就会抛出 No database selected 的错误。</p>
<h1 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h1><p>在 MySQL 中可以使用 <strong>ALTER TABLE</strong> 语句来改变原有表的结构，例如增加或删减列、更改原有列类型、重新命名列或表等。</p>
<p>其语法格式如下：</p>
<p>ALTER TABLE &lt;表名&gt; [修改选项]</p>
<p>修改选项的语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; ADD COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class="line">| CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt;</span><br><span class="line">| ALTER COLUMN &lt;列名&gt; &#123; SET DEFAULT &lt;默认值&gt; | DROP DEFAULT &#125;</span><br><span class="line">| MODIFY COLUMN &lt;列名&gt; &lt;类型&gt;</span><br><span class="line">| DROP COLUMN &lt;列名&gt;</span><br><span class="line">| RENAME TO &lt;新表名&gt;</span><br><span class="line">| CHARACTER SET &lt;字符集名&gt;</span><br><span class="line">| COLLATE &lt;校对规则名&gt; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>MySQL 通过 ALTER TABLE 语句来实现表名的修改，语法规则如下：</p>
<p>ALTER TABLE &lt;旧表名&gt; RENAME [TO] &lt;新表名&gt;；</p>
<p>其中，TO 为可选参数，使用与否均不影响结果。</p>
<h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h4><p>使用 ALTER TABLE 将数据表 student 改名为 tb_students_info，SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student RENAME TO tb_students_info;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_test   |</span><br><span class="line">+------------------+</span><br><span class="line">| tb_students_info |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：修改表名并不修改表的结构，因此修改名称后的表和修改名称前的表的结构是相同的。用户可以使用 DESC 命令查看修改后的表结构，</p>
</blockquote>
<h2 id="修改表字符集"><a href="#修改表字符集" class="headerlink" title="修改表字符集"></a>修改表字符集</h2><p>MySQL 通过 ALTER TABLE 语句来实现表字符集的修改，语法规则如下：</p>
<p>ALTER TABLE 表名 [DEFAULT] CHARACTER SET &lt;字符集名&gt; [DEFAULT] COLLATE &lt;校对规则名&gt;;</p>
<p>其中，DEFAULT 为可选参数，使用与否均不影响结果。</p>
<h4 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h4><p>使用 ALTER TABLE 将数据表 tb_students_info 的字符集修改为 gb2312，校对规则修改为 gb2312_chinese_ci。SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb_students_info CHARACTER SET gb2312  DEFAULT COLLATE gb2312_chinese_ci;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW CREATE TABLE tb_students_info \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: tb_students_info</span><br><span class="line">Create Table: CREATE TABLE `tb_students_info` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=gb2312</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="修改-删除字段"><a href="#修改-删除字段" class="headerlink" title="修改|删除字段"></a>修改|删除字段</h1><h2 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h2><p>MySQL 中修改表字段名的语法规则如下：</p>
<p>ALTER TABLE &lt;表名&gt; CHANGE &lt;旧字段名&gt; &lt;新字段名&gt; &lt;新数据类型&gt;；</p>
<p>其中：</p>
<ul>
<li>旧字段名：指修改前的字段名；</li>
<li>新字段名：指修改后的字段名；</li>
<li>新数据类型：指修改后的数据类型，如果不需要修改字段的数据类型，可以将新数据类型设置成与原来一样，但数据类型不能为空。</li>
</ul>
<h4 id="例-1-1"><a href="#例-1-1" class="headerlink" title="例 1"></a>例 1</h4><p>使用 ALTER TABLE 修改表 tb_emp1 的结构，将 col1 字段名称改为 col3，同时将数据类型变为 CHAR(30)，SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb_emp1</span><br><span class="line">    -&gt; CHANGE col1 col3 CHAR(30);</span><br><span class="line">Query OK, 0 rows affected (0.76 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; DESC tb_emp1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| col3   | char(30)    | YES  |     | NULL    |       |</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| deptId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | float        | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>CHANGE 也可以只修改数据类型，实现和 MODIFY 同样的效果，方法是将 SQL 语句中的“新字段名”和“旧字段名”设置为相同的名称，只改变“数据类型”。</p>
<blockquote>
<p>提示：由于不同类型的数据在机器中的存储方式及长度并不相同，修改数据类型可能会影响数据表中已有的数据记录，因此，当数据表中已经有数据时，不要轻易修改数据类型。</p>
</blockquote>
<h2 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h2><p>修改字段的数据类型就是把字段的数据类型转换成另一种数据类型。在 MySQL 中修改字段数据类型的语法规则如下：</p>
<p>ALTER TABLE &lt;表名&gt; MODIFY &lt;字段名&gt; &lt;数据类型&gt;</p>
<p>其中：</p>
<ul>
<li>表名：指要修改数据类型的字段所在表的名称；</li>
<li>字段名：指需要修改的字段；</li>
<li>数据类型：指修改后字段的新数据类型。</li>
</ul>
<h4 id="例-2-1"><a href="#例-2-1" class="headerlink" title="例 2"></a>例 2</h4><p>使用 ALTER TABLE 修改表 tb_emp1 的结构，将 name 字段的数据类型由 VARCHAR(22) 修改成 VARCHAR(30)，SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb_emp1</span><br><span class="line">    -&gt; MODIFY name VARCHAR(30);</span><br><span class="line">Query OK, 0 rows affected (0.15 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; DESC tb_emp1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| col1   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| col2   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| deptId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | float        | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>语句执行后，发现表 tb_emp1 中 name 字段的数据类型已经修改成 VARCHAR(30)，修改成功。</p>
<h2 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h2><p>删除字段是将数据表中的某个字段从表中移除，语法格式如下：</p>
<p>ALTER TABLE &lt;表名&gt; DROP &lt;字段名&gt;；</p>
<p>其中，“字段名”指需要从表中删除的字段的名称。</p>
<h4 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h4><p>使用 ALTER TABLE 修改表 tb_emp1 的结构，删除 col2 字段，SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb_emp1</span><br><span class="line">    -&gt; DROP col2;</span><br><span class="line">Query OK, 0 rows affected (0.53 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC tb_emp1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| col1   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(30) | YES  |     | NULL    |       |</span><br><span class="line">| deptId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | float        | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p>在 <a href="http://c.biancheng.net/mysql/">MySQL</a> 数据库中，对于不再需要的数据表，我们可以将其从数据库中删除。</p>
<p>在删除表的同时，表的结构和表中所有的数据都会被删除，因此在删除数据表之前最好先备份，以免造成无法挽回的损失。</p>
<p>下面我们来了解一下 MySQL 数据库中数据表的删除方法。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>使用 <strong>DROP TABLE</strong> 语句可以删除一个或多个数据表，语法格式如下：</p>
<p>DROP TABLE [IF EXISTS] 表名1 [ ,表名2, 表名3 …]</p>
<p>对语法格式的说明如下：</p>
<ul>
<li><code>表名1, 表名2, 表名3 ...</code>表示要被删除的数据表的名称。DROP TABLE 可以同时删除多个表，只要将表名依次写在后面，相互之间用逗号隔开即可。</li>
<li>IF EXISTS 用于在删除数据表之前判断该表是否存在。如果不加 IF EXISTS，当数据表不存在时 MySQL 将提示错误，中断 SQL 语句的执行；加上 IF EXISTS 后，当数据表不存在时 SQL 语句可以顺利执行，但是会发出警告（warning）。</li>
</ul>
<p>两点注意：</p>
<ul>
<li>用户必须拥有执行 DROP TABLE 命令的权限，否则数据表不会被删除。</li>
<li>表被删除时，用户在该表上的权限不会自动删除。</li>
</ul>
<h2 id="删除表的实例"><a href="#删除表的实例" class="headerlink" title="删除表的实例"></a>删除表的实例</h2><p>选择数据库 test_db，创建 tb_emp3 数据表，输入的 SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE test_db;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE tb_emp3</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT(11),</span><br><span class="line">    -&gt; name VARCHAR(25),</span><br><span class="line">    -&gt; deptId INT(11),</span><br><span class="line">    -&gt; salary FLOAT</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.27 sec)</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_test_db  |</span><br><span class="line">+--------------------+</span><br><span class="line">| tb_emp2            |</span><br><span class="line">| tb_emp3            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看出，test_tb 数据库中有 tb_emp2 和 tb_emp3 两张数据表。</p>
<p>我们来删除数据表 tb_emp3，输入的 SQL 语句和运行结果如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE tb_emp3;</span><br><span class="line">Query OK, 0 rows affected (0.22 sec)</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Tables_in_test_db  |</span><br><span class="line">+--------------------+</span><br><span class="line">| tb_emp2            |</span><br><span class="line">+--------------------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>执行结果可以看到，test_db 数据库的数据表列表中已经不存在名称为 tb_emp3 的表，删除操作成功。</p>
<h1 id="删除关联主表"><a href="#删除关联主表" class="headerlink" title="删除关联主表"></a>删除关联主表</h1><p>数据表之间经常存在外键关联的情况，这时如果直接删除父表，会破坏数据表的完整性，也会删除失败。</p>
<p>删除父表有以下两种方法：</p>
<ul>
<li>先删除与它关联的子表，再删除父表；但是这样会同时删除两个表中的数据。</li>
<li>将关联表的外键约束取消，再删除父表；适用于需要保留子表的数据，只删除父表的情况。</li>
</ul>
<p>下面介绍了如何取消关联表的外键约束并删除主表，也就是上面所说的删除父表的第二种方法。</p>
<p>在数据库中创建两个关联表。创建表 tb_emp4 的 SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_emp4</span><br><span class="line">(</span><br><span class="line">id INT(11) PRIMARY KEY,</span><br><span class="line">name VARCHAR(22),</span><br><span class="line">location VARCHAR (50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接下来创建表 tb_emp5，SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_emp5</span><br><span class="line">(</span><br><span class="line">id INT(11) PRIMARY KEY,</span><br><span class="line">name VARCHAR(25),</span><br><span class="line">deptId INT(11),</span><br><span class="line">salary FLOAT,</span><br><span class="line">CONSTRAINT fk_emp4_emp5 FOREIGN KEY (deptId) REFERENCES tb_emp4(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p>使用 SHOW CREATE TABLE 命令查看表 tb_ emp5 的外键约束，SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE tb_emp5\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: tb_emp5</span><br><span class="line">Create Table: CREATE TABLE `tb_emp5` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(25) DEFAULT NULL,</span><br><span class="line">  `deptId` int(11) DEFAULT NULL,</span><br><span class="line">  `salary` float DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `fk_emp4_emp5` (`deptId`),</span><br><span class="line">  CONSTRAINT `fk_emp4_emp5` FOREIGN KEY (`deptId`) REFERENCES `tb_emp4` (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看出，tb_emp5 表为子表，具有名称为 fk_emp4_emp5 的外键约束；tb_emp4 为父表，其主键 id 被子表 tb_ emp5 所关联。</p>
<p>删除被数据表 tb_emp5 关联的数据表 tb_emp4，SQL 语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE tb_emp4;</span><br><span class="line">ERROR 1217 (23000): Cannot delete or update a parent row: a foreign key constraint fails</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看出，当主表在存在外键约束时，不能被直接删除。<br>下面解除子表 tb_emp5 的外键约束，SQL语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tb_emp5 DROP FOREIGN KEY fk_emp4_emp5;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>语句成功执行后，会取消表 tb_emp4 和表 tb_emp5 之间的关联关系。</p>
<p>解除关联关系后，可以使用 DROP TABLE 语句直接删除父表 tb_emp4，SQL 语句如下：</p>
<p>DROP TABLE tb_emp4;</p>
<p>最后通过 SHOW TABLES 命令查看数据表列表，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| tb_emp5        |</span><br><span class="line">| temp           |</span><br><span class="line">+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>可以发现，数据库列表中已经不存在名称为 tb_emp4 的表，删除成功。</p>
<h1 id="查看表结构命令"><a href="#查看表结构命令" class="headerlink" title="查看表结构命令"></a>查看表结构命令</h1><p>创建完数据表之后，经常需要查看表结构（表信息）。在 <a href="http://c.biancheng.net/mysql/">MySQL</a> 中，可以使用 DESCRIBE 和 SHOW CREATE TABLE 命令来查看数据表的结构。</p>
<h2 id="DESCRIBE：以表格的形式展示表结构"><a href="#DESCRIBE：以表格的形式展示表结构" class="headerlink" title="DESCRIBE：以表格的形式展示表结构"></a>DESCRIBE：以表格的形式展示表结构</h2><p>DESCRIBE/DESC 语句会以表格的形式来展示表的字段信息，包括字段名、字段数据类型、是否为主键、是否有默认值等，语法格式如下：</p>
<p>DESCRIBE &lt;表名&gt;;</p>
<p>或简写成：</p>
<p>DESC &lt;表名&gt;;</p>
<p>【实例1】分别使用 DESCRIBE 和 DESC 查看表 tb_emp1 的表结构，SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESCRIBE tb_emp1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(25) | YES  |     | NULL    |       |</span><br><span class="line">| deptId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | float       | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.14 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC tb_emp1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(25) | YES  |     | NULL    |       |</span><br><span class="line">| deptId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| salary | float       | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.14 sec)</span><br></pre></td></tr></table></figure>

<p>其中，各个字段的含义如下：</p>
<ul>
<li>Null：表示该列是否可以存储 NULL 值。</li>
<li>Key：表示该列是否已编制索引。PRI 表示该列是表主键的一部分，UNI 表示该列是 UNIQUE 索引的一部分，MUL 表示在列中某个给定值允许出现多次。</li>
<li>Default：表示该列是否有默认值，如果有，值是多少。</li>
<li>Extra：表示可以获取的与给定列有关的附加信息，如 AUTO_INCREMENT 等。</li>
</ul>
<h2 id="SHOW-CREATE-TABLE：以SQL语句的形式展示表结构"><a href="#SHOW-CREATE-TABLE：以SQL语句的形式展示表结构" class="headerlink" title="SHOW CREATE TABLE：以SQL语句的形式展示表结构"></a>SHOW CREATE TABLE：以SQL语句的形式展示表结构</h2><p>SHOW CREATE TABLE 命令会以 SQL 语句的形式来展示表信息。和 DESCRIBE 相比，SHOW CREATE TABLE 展示的内容更加丰富，它可以查看表的存储引擎和字符编码；另外，你还可以通过<code>\g</code>或者<code>\G</code>参数来控制展示格式。</p>
<p>SHOW CREATE TABLE 的语法格式如下：</p>
<p>SHOW CREATE TABLE &lt;表名&gt;;</p>
<p>在 SHOW CREATE TABLE 语句的结尾处（分号前面）添加<code>\g</code>或者<code>\G</code>参数可以改变展示形式。</p>
<p>【实例2】使用 SHOW CREATE TABLE 语句查看表 tb_emp1 的详细信息，一次使用<code>\g</code>结尾，一次不使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE tb_emp1;</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">| Table   | Create Table                                   |</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">| tb_emp1 | CREATE TABLE `tb_emp1` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(25) DEFAULT NULL,</span><br><span class="line">  `salary` float DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gb2312 |</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW CREATE TABLE tb_emp1 \g;</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">| Table   | Create Table                                   |</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">| tb_emp1 | CREATE TABLE `tb_emp1` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(25) DEFAULT NULL,</span><br><span class="line">  `salary` float DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gb2312 |</span><br><span class="line">+---------+------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>SHOW CREATE TABLE 使用<code>\G</code>结尾的 SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE tb_emp1\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: tb_emp1</span><br><span class="line">Create Table: CREATE TABLE `tb_emp1` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(25) DEFAULT NULL,</span><br><span class="line">  `deptId` int(11) DEFAULT NULL,</span><br><span class="line">  `salary` float DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gb2312</span><br><span class="line">1 row in set (0.03 sec)</span><br></pre></td></tr></table></figure>

<h1 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h1><p>数据表是由行和列构成的，通常把表的“列”称为字段（Field），把表的“行”称为记录（Record）。随着业务的变化，可能需要在已有的表中添加新的字段。</p>
<p>MySQL 允许在开头、中间和结尾处添加字段。</p>
<h2 id="在末尾添加字段"><a href="#在末尾添加字段" class="headerlink" title="在末尾添加字段"></a>在末尾添加字段</h2><p>一个完整的字段包括字段名、数据类型和约束条件。MySQL 添加字段的语法格式如下：</p>
<p>ALTER TABLE &lt;表名&gt; ADD &lt;新字段名&gt;&lt;数据类型&gt;[约束条件];</p>
<p>对语法格式的说明如下：                    </p>
<ul>
<li>&lt;表名&gt; 为数据表的名字；</li>
<li>&lt;新字段名&gt; 为所要添加的字段的名字；</li>
<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>
<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>
</ul>
<p>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段。</p>
<p>注意：本节我们只添加新的字段，不关注它的约束条件。</p>
<h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>在 test 数据库中新建 student 数据表，SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE student (</span><br><span class="line">    -&gt; id INT(4),</span><br><span class="line">    -&gt; name VARCHAR(20),</span><br><span class="line">    -&gt; sex CHAR(1));</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)                           </span><br></pre></td></tr></table></figure>


<p>使用 DESC 查看 student 表结构，SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC student;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>使用 ALTER TABLE 语句添加一个 INT 类型的字段 age，SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student ADD age INT(4);</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>


<p>使用 DESC 查看 student 表结构，检验 age 字段是否添加成功。SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC student;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看到，student 表已经添加了 age 字段，且该字段在表的最后一个位置，添加字段成功。</p>
<h2 id="在开头添加字段"><a href="#在开头添加字段" class="headerlink" title="在开头添加字段"></a>在开头添加字段</h2><p>MySQL 默认在表的最后位置添加新字段，如果希望在开头位置（第一列的前面）添加新字段，那么可以使用 FIRST 关键字，语法格式如下：</p>
<p>ALTER TABLE &lt;表名&gt; ADD &lt;新字段名&gt; &lt;数据类型&gt; [约束条件] FIRST;</p>
<p>FIRST 关键字一般放在语句的末尾。</p>
<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p>使用 ALTER TABLE 语句在表的第一列添加 INT 类型的字段 stuId，SQL 语句和运行结果如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student ADD stuId INT(4) FIRST;</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC student;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| stuId | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| id    | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看到，student 表中已经添加了 stuId 字段，且该字段在表中的第一个位置，添加字段成功。</p>
<h2 id="在中间位置添加字段"><a href="#在中间位置添加字段" class="headerlink" title="在中间位置添加字段"></a>在中间位置添加字段</h2><p>MySQL 除了允许在表的开头位置和末尾位置添加字段外，还允许在中间位置（指定的字段之后）添加字段，此时需要使用 AFTER 关键字，语法格式如下：</p>
<p>ALTER TABLE &lt;表名&gt; ADD &lt;新字段名&gt; &lt;数据类型&gt; [约束条件] AFTER &lt;已经存在的字段名&gt;;</p>
<p>AFTER 的作用是将新字段添加到某个已有字段后面。</p>
<p>注意，只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段。</p>
<h4 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h4><p>使用 ALTER TABLE 语句在 student 表中添加名为 stuno，数据类型为 INT 的字段，stuno 字段位于 name 字段的后面。SQL 语句和运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student ADD stuno INT(11) AFTER name;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"> </span><br><span class="line">mysql&gt; DESC student;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| stuId | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| id    | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| stuno | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| sex   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| age   | int(4)      | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由运行结果可以看到，student 表中已经添加了 stuId 字段，且该字段在 name 字段后面的位置，添加字段成功。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据类型</title>
    <url>/2021/08/08/16-09-31/</url>
    <content><![CDATA[<h1 id="一-整数类型"><a href="#一-整数类型" class="headerlink" title="一.整数类型"></a>一.整数类型</h1><p>MySQL 主要提供的整数类型有 <strong>TINYINT</strong>、<strong>SMALLINT</strong>、<strong>MEDIUMINT</strong>、<strong>INT</strong>、<strong>BIGINT</strong>，其属性字段可以添加 AUTO_INCREMENT 自增约束条件。下表中列出了 MySQL 中的数值类型。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>很小的整数-128〜127   (2<sup>7</sup>-1)</td>
<td>1个字节(8bit)  0~ 2<sup>8</sup>-1</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>小的整数</td>
<td>2个宇节</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>中等大小的整数</td>
<td>3个字节</td>
</tr>
<tr>
<td>INT (INTEGER)</td>
<td>普通大小的整数</td>
<td>4个字节</td>
</tr>
<tr>
<td>BIGINT</td>
<td>大整数</td>
<td>8个字节</td>
</tr>
</tbody></table>
<h1 id="二-小数类型"><a href="#二-小数类型" class="headerlink" title="二.小数类型"></a>二.小数类型</h1><p>mysql中使用浮点数和定点数来表示小数浮点类型有两种，分别是单精度浮点数（<strong>FLOAT</strong>）和双精度浮点数（<strong>DOUBLE</strong>）；定点类型只有一种，就是 <strong>DECIMAL</strong>。浮点类型和定点类型都可以用(M, D)来表示，其中M称为精度，表示总共的位数；D称为标度，表示小数的位数</p>
<p>浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。</p>
<p>下表中列出了 MySQL 中的小数类型和存储需求。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>单精度浮点数</td>
<td>4个字节</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>双精度浮点数</td>
<td>8 个字节</td>
</tr>
<tr>
<td>DECIMAL (M, D)，DEC</td>
<td>压缩的“严格”定点数</td>
<td>M+2 个字节</td>
</tr>
</tbody></table>
<p>DECIMAL 类型不同于 FLOAT 和 DOUBLE。DOUBLE 实际上是以字符串的形式存放的，DECIMAL 可能的最大取值范围与 DOUBLE 相同，但是有效的取值范围由 M 和 D 决定。如果改变 M 而固定 D，则取值范围将随 M 的变大而变大</p>
<p>从上表中可以看到，DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。</p>
<p>FLOAT 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-3.402823466E+38～-1.175494351E-38。</li>
<li>无符号的取值范围：0 和 -1.175494351E-38～-3.402823466E+38。</li>
</ul>
<p>DOUBLE 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-1.7976931348623157E+308～-2.2250738585072014E-308。</li>
<li>无符号的取值范围：0 和 -2.2250738585072014E-308～-1.7976931348623157E+308。</li>
</ul>
<blockquote>
<p>提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。</p>
</blockquote>
<h1 id="三-日期和时间类型"><a href="#三-日期和时间类型" class="headerlink" title="三. 日期和时间类型"></a>三. 日期和时间类型</h1><p>MySQL中有多处表示日期的数据类型：<strong>YEAR</strong>、<strong>TIME</strong>、<strong>DATE</strong>、<strong>DTAETIME</strong>、<strong>TIMESTAMP</strong>。当只记录年信息的时候，可以只使用 YEAR 类型。</p>
<p>每一个类型都有合法的取值范围，当指定确定不合法的值时，系统将“零”值插入数据库中。</p>
<p>下表中列出了 MySQL 中的日期与时间类型。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>日期格式</th>
<th>日期范围</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>YYYY</td>
<td>1901 ~ 2155</td>
<td>1 个字节</td>
</tr>
<tr>
<td>TIME</td>
<td>HH:MM:SS</td>
<td>-838:59:59 ~ 838:59:59</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATE</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01 ~ 9999-12-3</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATETIME</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td>8 个字节</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>
<td>4 个字节</td>
</tr>
</tbody></table>
<h2 id="YEAR-类型"><a href="#YEAR-类型" class="headerlink" title="YEAR 类型"></a>YEAR 类型</h2><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEAR，如下所示：</p>
<ul>
<li>以 4 位字符串或者 4 位数字格式表示的 YEAR，范围为 ‘1901’～’2155’。输入格式为 ‘YYYY’ 或者 YYYY，例如，输入 ‘2010’ 或 2010，插入数据库的值均为 2010。</li>
<li>以 2 位字符串格式表示的 YEAR，范围为 ‘00’ 到 ‘99’。’00’～’69’ 和 ‘70’～’99’ 范围的值分别被转换为 2000～2069 和 1970～1999 范围的 YEAR 值。’0’ 与 ‘00’ 的作用相同。插入超过取值范围的值将被转换为 2000。</li>
<li>以 2 位数字表示的 YEAR，范围为 1～99。1～99 和 70～99 范围的值分别被转换为 2001～2069 和 1970～1999 范围的 YEAR 值。注意，在这里 0 值将被转换为 0000，而不是 2000。</li>
</ul>
<blockquote>
<p>提示：两位整数范围与两位字符串范围稍有不同。例如，插入 3000 年，读者可能会使用数字格式的 0 表示 YEAR，实际上，插入数据库的值为 0000，而不是所希望的 3000。只有使用字符串格式的 ‘0’ 或 ‘00’，才可以被正确解释为 3000，非法 YEAR值将被转换为 0000。</p>
</blockquote>
<h2 id="TIME-类型"><a href="#TIME-类型" class="headerlink" title="TIME 类型"></a>TIME 类型</h2><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<p>TIME 类型的取值范围为 -838：59：59～838：59：59，小时部分如此大的原因是 TIME 类型不仅可以用于表示一天的时间（必须小于 24 小时），还可能是某个事件过去的时间或两个事件之间的时间间隔（可大于 24 小时，或者甚至为负）。</p>
<p>可以使用各种格式指定 TIME 值，如下所示。</p>
<ul>
<li>‘D HH：MM：SS’ 格式的字符串。还可以使用这些“非严格”的语法：’HH：MM：SS’、’HH：MM’、’D HH’ 或 ‘SS’。这里的 D 表示日，可以取 0～34 之间的值。在插入数据库时，D 被转换为小时保存，格式为 “D*24+HH”。</li>
<li>‘HHMMSS’ 格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，’101112’ 被理解为’10：11：12’，但是 ‘106112’ 是不合法的（它有一个没有意义的分钟部分），在存储时将变为 00：00：00。</li>
</ul>
<blockquote>
<p>提示：为 TIME 列分配简写值时应注意：如果没有冒号，MySQL 解释值时，假定最右边的两位表示秒。（MySQL 解释 TIME 值为过去的时间而不是当前的时间）。例如，读者可能认为 ‘1112’ 和 1112 表示 11：12：00（即 11 点过 12 分钟），但MySQL 将它们解释为 00：11：12（即 11 分 12 秒）。同样 ‘12’ 和 12 被解释为00：00：12。相反，TIME 值中如果使用冒号则肯定被看作当天的时间，也就是说，’11：12’ 表示 11：12：00，而不是 00：11：12。</p>
</blockquote>
<h2 id="DATE-类型"><a href="#DATE-类型" class="headerlink" title="DATE 类型"></a>DATE 类型</h2><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。</p>
<p>在给 DATE 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATE 的日期格式即可。如下所示：</p>
<ul>
<li>以 ‘YYYY-MM-DD’ 或者 ‘YYYYMMDD’ 字符中格式表示的日期，取值范围为 ‘1000-01-01’～’9999-12-3’。例如，输入 ‘2015-12-31’ 或者 ‘20151231’，插入数据库的日期为2015-12-31。</li>
<li>以 ‘YY-MM-DD’ 或者 ‘YYMMDD’ 字符串格式表示日期，在这里YY表示两位的年值。MySQL 解释两位年值的规则：’00～69’ 范围的年值转换为 ‘2000<del>2069’，’70</del>99’ 范围的年值转换为 ‘1970～1999’。例如，输入 ‘15-12-31’，插入数据库的日期为 2015-12-31；输入 ‘991231’，插入数据库的日期为 1999-12-31。</li>
<li>以 YYMMDD 数字格式表示的日期，与前面相似，00~69 范围的年值转换为 2000～2069，80～99 范围的年值转换为 1980～1999。例如，输入 151231，插入数据库的日期为 2015-12-31，输入 991231，插入数据库的日期为 1999-12-31。</li>
<li>使用 CURRENT_DATE 或者 NOW()，插入当前系统日期。</li>
</ul>
<blockquote>
<p>提示：MySQL 允许“不严格”语法：任何标点符号都可以用作日期部分之间的间隔符。例如，’98-11-31’、’98.11.31’、’98/11/31’和‘98@11@31’ 是等价的，这些值也可以正确地插入数据库。</p>
</blockquote>
<h2 id="DATETIME-类型"><a href="#DATETIME-类型" class="headerlink" title="DATETIME 类型"></a>DATETIME 类型</h2><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<p>在给 DATETIME 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATETIME 的日期格式即可，如下所示。</p>
<ul>
<li>以 ‘YYYY-MM-DD HH：MM：SS’ 或者 ‘YYYYMMDDHHMMSS’ 字符串格式表示的日期，取值范围为 ‘1000-01-01 00：00：00’～’9999-12-3 23：59：59’。例如，输入 ‘2014-12-31 05：05：05’ 或者 ‘20141231050505’，插入数据库的 DATETIME 值都为 2014-12-31 05：05：05。</li>
<li>以 ‘YY-MM-DD HH：MM：SS’ 或者 ‘YYMMDDHHMMSS’ 字符串格式表示的日期，在这里 YY 表示两位的年值。与前面相同，’00～79’ 范围的年值转换为 ‘2000～2079’，’80～99’ 范围的年值转换为 ‘1980～1999’。例如，输入 ‘14-12-31 05：05：05’，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
<li>以 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 数字格式表示的日期和时间。例如，输入 20141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 140505050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
</ul>
<blockquote>
<p>提示：MySQL 允许“不严格”语法：任何标点符号都可用作日期部分或时间部分之间的间隔符。例如，’98-12-31 11：30：45’、’98.12.31 11+30+35’、’98/12/31 11<em>30</em>45’ 和 ‘98@12@31 11^30^45’ 是等价的，这些值都可以正确地插入数据库。</p>
</blockquote>
<h2 id="TIMESTAMP-类型"><a href="#TIMESTAMP-类型" class="headerlink" title="TIMESTAMP 类型"></a>TIMESTAMP 类型</h2><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 ‘1970-01-01 00：00：01’UTC～’2038-01-19 03：14：07’UTC。在插入数据时，要保证在合法的取值范围内。</p>
<blockquote>
<p>提示：协调世界时（英：Coordinated Universal Time，法：Temps Universel Coordonné）又称为世界统一时间、世界标准时间、国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称 UTC。</p>
</blockquote>
<p>TIMESTAMP 与 DATETIME 除了存储字节和支持的范围不同外，还有一个最大的区别是：</p>
<ul>
<li>DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li>
<li>而 TIMESTAMP 值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</li>
</ul>
<blockquote>
<p>提示：如果为一个 DATETIME 或 TIMESTAMP 对象分配一个 DATE 值，结果值的时间部分被设置为 ‘00：00：00’，因此 DATE 值未包含时间信息。如果为一个 DATE 对象分配一个 DATETIME 或 TIMESTAMP 值，结果值的时间部分被删除，因此DATE 值未包含时间信息。</p>
</blockquote>
<h1 id="四-字符串类型"><a href="#四-字符串类型" class="headerlink" title="四. 字符串类型"></a>四. 字符串类型</h1><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找。</p>
<p><a href="http://c.biancheng.net/mysql/">MySQL</a> 中的字符串类型有 <strong>CHAR</strong>、<strong>VARCHAR</strong>、<strong>TINYTEXT</strong>、<strong>TEXT</strong>、<strong>MEDIUMTEXT</strong>、<strong>LONGTEXT</strong>、<strong>ENUM</strong>、<strong>SET</strong> 等。</p>
<p>下表中列出了 MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度非二进制字符串</td>
<td>M 字节，1&lt;=M&lt;=255</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>变长非二进制字符串</td>
<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的非二进制字符串</td>
<td>L+1字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>TEXT</td>
<td>小的非二进制字符串</td>
<td>L+2字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等大小的非二进制字符串</td>
<td>L+3字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>大的非二进制字符串</td>
<td>L+4字节，在此，L&lt;2^32</td>
</tr>
<tr>
<td>ENUM</td>
<td>枚举类型，只能有一个枚举字符串值</td>
<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>
</tr>
<tr>
<td>SET</td>
<td>一个设置，字符串对象可以有零个或 多个SET成员</td>
<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>
</tr>
</tbody></table>
<p>VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。</p>
<p>例如，一个 VARCHAR(10) 列能保存一个最大长度为 10 个字符的字符串，实际的存储需要字符串的长度 L 加上一个字节以记录字符串的长度。对于字符 “abcd”，L 是 4，而存储要求 5 个字节。</p>
<h2 id="CHAR-和-VARCHAR-类型"><a href="#CHAR-和-VARCHAR-类型" class="headerlink" title="CHAR 和 VARCHAR 类型"></a>CHAR 和 VARCHAR 类型</h2><p>CHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。</p>
<p>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。</p>
<p>VARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p>
<p>例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。</p>
<p>【实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。</p>
<table>
<thead>
<tr>
<th>插入值</th>
<th>CHAR(4)</th>
<th>存储需求</th>
<th>VARCHAR(4)</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>‘ ‘</td>
<td>‘  ‘</td>
<td>4字节</td>
<td>‘’</td>
<td>1字节</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab ‘</td>
<td>4字节</td>
<td>‘ab’</td>
<td>3字节</td>
</tr>
<tr>
<td>‘abc’</td>
<td>‘abc ‘</td>
<td>4字节</td>
<td>‘abc’</td>
<td>4字节</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘abcd’</td>
<td>4字节</td>
<td>‘abcd’</td>
<td>5字节</td>
</tr>
<tr>
<td>‘abcdef’</td>
<td>‘abcd’</td>
<td>4字节</td>
<td>‘abcd’</td>
<td>5字节</td>
</tr>
</tbody></table>
<p>对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。</p>
<h2 id="TEXT-类型"><a href="#TEXT-类型" class="headerlink" title="TEXT 类型"></a>TEXT 类型</h2><p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。</p>
<p>TEXT 类型分为 4 种：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。不同的 TEXT 类型的存储空间和数据长度不同。</p>
<ul>
<li>TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。</li>
<li>TEXT 表示长度为 65535（216-1）字符的 TEXT 列。</li>
<li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li>
<li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li>
</ul>
<h2 id="ENUM-类型"><a href="#ENUM-类型" class="headerlink" title="ENUM 类型"></a>ENUM 类型</h2><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;字段名&gt; ENUM( &#x27;值1&#x27;, &#x27;值1&#x27;, …, &#x27;值n&#x27; )</span><br></pre></td></tr></table></figure>

<p>字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。</p>
<p>ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。</p>
<p>ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p>
<p>例如，定义 ENUM 类型的列（’first’，’second’，’third’），该列可以取的值和每个值的索引如下表所示。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>索引</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>NULL</td>
</tr>
<tr>
<td>‘’</td>
<td>0</td>
</tr>
<tr>
<td>’first</td>
<td>1</td>
</tr>
<tr>
<td>second</td>
<td>2</td>
</tr>
<tr>
<td>third</td>
<td>3</td>
</tr>
</tbody></table>
<p>ENUM 值依照列索引顺序排列，并且空字符串排在非空字符串前，NULL 值排在其他所有枚举值前</p>
<blockquote>
<p>提示：ENUM 列总有一个默认值。如果将 ENUM 列声明为 NULL，NULL 值则为该列的一个有效值，并且默认值为 NULL。如果 ENUM 列被声明为 NOT NULL，其默认值为允许的值列表的第 1 个元素</p>
</blockquote>
<h2 id="SET-类型"><a href="#SET-类型" class="headerlink" title="SET 类型"></a>SET 类型</h2><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号<code>,</code>隔开，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET( &#x27;值1&#x27;, &#x27;值2&#x27;, …, &#x27;值n&#x27; )</span><br></pre></td></tr></table></figure>

<p>与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。</p>
<p>但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。</p>
<blockquote>
<p>提示：如果插入 SET 字段中的列值有重复，则 MySQL 自动删除重复的值；插入 SET 字段的值的顺序并不重要，MySQL 会在存入数据库时，按照定义的顺序显示；如果插入了不正确的值，默认情况下，MySQL 将忽视这些值，给出警告。</p>
</blockquote>
<h1 id="五-二进制类型"><a href="#五-二进制类型" class="headerlink" title="五. 二进制类型"></a>五. 二进制类型</h1><p>MySQL 中的二进制字符串有 <strong>BIT</strong>、<strong>BINARY</strong>、<strong>VARBINARY</strong>、<strong>TINYBLOB</strong>、<strong>BLOB</strong>、<strong>MEDIUMBLOB</strong> 和 <strong>LONGBLOB</strong>。</p>
<p>下表中列出了 MySQL 中的二进制数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>BIT(M)</td>
<td>位字段类型</td>
<td>大约 (M+7)/8 字节</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>固定长度二进制字符串</td>
<td>M 字节</td>
</tr>
<tr>
<td>VARBINARY (M)</td>
<td>可变长度二进制字符串</td>
<td>M+1 字节</td>
</tr>
<tr>
<td>TINYBLOB (M)</td>
<td>非常小的BLOB</td>
<td>L+1 字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>BLOB (M)</td>
<td>小 BLOB</td>
<td>L+2 字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMBLOB (M)</td>
<td>中等大小的BLOB</td>
<td>L+3 字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGBLOB (M)</td>
<td>非常大的BLOB</td>
<td>L+4 字节，在此，L&lt;2^32</td>
</tr>
</tbody></table>
<h2 id="BIT-类型"><a href="#BIT-类型" class="headerlink" title="BIT 类型"></a>BIT 类型</h2><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。例如，为 BIT(6) 列分配一个值 b’101’，其效果与分配 b’000101’ 相同。</p>
<p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。</p>
<blockquote>
<p>提示：默认情况下，MySQL 不可以插入超出该列允许范围的值，因而插入数据时要确保插入的值在指定的范围内。</p>
</blockquote>
<h2 id="BINARY-和-VARBINARY-类型"><a href="#BINARY-和-VARBINARY-类型" class="headerlink" title="BINARY 和 VARBINARY 类型"></a>BINARY 和 VARBINARY 类型</h2><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p>
<p>列名称 BINARY(M) 或者 VARBINARY(M)</p>
<p>BINARY 类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充 “\0” 补齐，以达到指定长度。例如，指定列数据类型为 BINARY(3)，当插入 a 时，存储的内容实际为 “\a0\0”，当插入 ab 时，实际存储的内容为“ab\0”，无论存储的内容是否达到指定的长度，存储空间均为指定的值 M。</p>
<p>VARBINARY 类型的长度是可变的，指定好长度之后，长度可以在 0 到最大值之间。例如，指定列数据类型为 VARBINARY(20)，如果插入的值长度只有 10，则实际存储空间为 10 加 1，实际占用的空间为字符串的实际长度加 1。</p>
<h2 id="BLOB-类型"><a href="#BLOB-类型" class="headerlink" title="BLOB 类型"></a>BLOB 类型</h2><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB，它们可容纳值的最大长度不同，如下表所示。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>存储范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYBLOB</td>
<td>最大长度为255 (28-1)字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>最大长度为65535 (216-1)字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>最大长度为16777215 (224-1)字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>最大长度为4294967295或4GB (231-1)字节</td>
</tr>
</tbody></table>
<p>BLOB 列存储的是二进制字符串（字节字符串），TEXT 列存储的是非进制字符串（字符字符串）。BLOB 列是字符集，并且排序和比较基于列值字节的数值；TEXT 列有一个字符集，并且根据字符集对值进行排序和比较。</p>
<h1 id="六-转义类型"><a href="#六-转义类型" class="headerlink" title="六. 转义类型"></a>六. 转义类型</h1><p>转义字符一般以反斜杠符号<code>\</code>开头，用来说明后面的字符不是字符本身的含义，而是表示其它的含义。MySQL 中常见的转义字符如下表所示。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>转义后的字符</th>
</tr>
</thead>
<tbody><tr>
<td>&quot;</td>
<td>双引号（”）</td>
</tr>
<tr>
<td>&#39;</td>
<td>单引号（’）</td>
</tr>
<tr>
<td>\</td>
<td>反斜线（\）</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\0</td>
<td>ASCII 0（NUL）</td>
</tr>
<tr>
<td>\b</td>
<td>退格符</td>
</tr>
</tbody></table>
<p>转义字符区分大小写，例如：’\b’ 解释为退格，但 ‘\B’ 解释为 ‘B’。</p>
<p>有以下几点需要注意：</p>
<ul>
<li>字符串的内容包含单引号<code>&#39;</code>时，可以用单引号<code>&#39;</code>或反斜杠<code>\</code>来转义。</li>
<li>字符串的内容包含双引号<code>&quot;</code>时，可以用双引号<code>&quot;</code>或反斜杠<code>\</code>来转义。</li>
<li>一个字符串用双引号<code>&quot;</code>引用时，该字符串中的单引号<code> &#39;</code>不需要特殊对待，且不必被重复转义。同理，一个字符串用单引号<code>&#39;</code>引用时，该字符串中的双引号<code>&quot;</code>不需要特殊对待，且不必被重复转义。</li>
</ul>
<h1 id="七-系统变量"><a href="#七-系统变量" class="headerlink" title="七. 系统变量"></a>七. 系统变量</h1><p>在 MySQL 数据库，变量分为系统变量和用户自定义变量。系统变量以 @@ 开头，用户自定义变量以 @ 开头。</p>
<p>服务器维护着两种系统变量，即全局变量（GLOBAL VARIABLES）和会话变量（SESSION VARIABLES）。全局变量影响 MySQL 服务的整体运行方式，会话变量影响具体客户端连接的操作。</p>
<p>每一个客户端成功连接服务器后，都会产生与之对应的会话。会话期间，MySQL 服务实例会在服务器内存中生成与该会话对应的会话变量，这些会话变量的初始值是全局变量值的拷贝。</p>
<h2 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h2><p>可以使用以下命令查看 MySQL 中所有的全局变量信息。</p>
<p>SHOW GLOBAL VARIABLES; </p>
<p>可以使用以下命令查看与当前会话相关的所有会话变量以及全局变量。</p>
<p>SHOW SESSION VARIABLES;</p>
<p>其中，SESSION 关键字可以省略。</p>
<p>MySQL 中的系统变量以两个“@”开头。</p>
<ul>
<li>@@global 仅仅用于标记全局变量；</li>
<li>@@session 仅仅用于标记会话变量；</li>
<li>@@ 首先标记会话变量，如果会话变量不存在，则标记全局变量。</li>
</ul>
<p>MySQL 中有一些系统变量仅仅是全局变量，例如 innodb_data_file_path，可以使用以下 3 种方法查看：</p>
<p>SHOW GLOBAL VARIABLES LIKE ‘innodb_data_file_path’;<br>SHOW SESSION VARIABLES LIKE ‘innodb_data_file_path’;<br>SHOW VARIABLES LIKE ‘innodb_data_file_path’;</p>
<p>MySQL 中有一些系统变量仅仅是会话变量，例如 MySQL 连接 ID 会话变量 pseudo_thread_id，可以使用以下 2 种方法查看。</p>
<p>SHOW SESSION VARIABLES LIKE ‘pseudo_thread_id’;<br>SHOW VARIABLES LIKE ‘pseudo_thread_id’;</p>
<p>MySQL 中有一些系统变量既是全局变量，又是会话变量，例如系统变量 character_set_client 既是全局变量，又是会话变量。</p>
<p>SHOW SESSION VARIABLES LIKE ‘character_set_client’;<br>SHOW VARIABLES LIKE ‘character_set_client’;</p>
<p>此时查看全局变量的方法如下：</p>
<p>SHOW GLOBAL VARIABLES LIKE ‘character_set_client’;</p>
<h2 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a>设置系统变量</h2><p>可以通过以下方法设置系统变量：</p>
<ol>
<li>修改 MySQL 源代码，然后对 MySQL 源代码重新编译（该方法适用于 MySQL 高级用户，这里不做阐述）。</li>
<li>在 MySQL 配置文件（mysql.ini 或 mysql.cnf）中修改 MySQL 系统变量的值（需要重启 MySQL 服务才会生效）。</li>
<li>在 MySQL 服务运行期间，使用 SET 命令重新设置系统变量的值。</li>
</ol>
<p>服务器启动时，会将所有的全局变量赋予默认值。这些默认值可以在选项文件中或在命令行中对执行的选项进行更改。</p>
<p>更改全局变量，必须具有 SUPER 权限。设置全局变量的值的方法如下：</p>
<ul>
<li>SET @@global.innodb_file_per_table=default;</li>
<li>SET @@global.innodb_file_per_table=ON;</li>
<li>SET global innodb_file_per_table=ON;</li>
</ul>
<p>需要注意的是，更改全局变量只影响更改后连接客户端的相应会话变量，而不会影响目前已经连接的客户端的会话变量（即使客户端执行 SET GLOBAL 语句也不影响）。也就是说，对于修改全局变量之前连接的客户端只有在客户端重新连接后，才会影响到客户端。</p>
<p>客户端连接时，当前全局变量的值会对客户端的会话变量进行相应初始化。设置会话变量不需要特殊权限，但客户端只能更改自己的会话变量，而不能更改其它客户端的会话变量。设置会话变量的值的方法如下：</p>
<ul>
<li>SET @@session.pseudo_thread_id=5;</li>
<li>SET session pseudo_thread_id=5;</li>
<li>SET @@pseudo_thread_id=5;</li>
<li>SET pseudo_thread_id = 5;</li>
</ul>
<p>如果没有指定修改全局变量还是会话变量，服务器会当作会话变量来处理。比如：</p>
<p>SET @@sort_buffer_size = 50000;</p>
<p>上面语句没有指定是 GLOBAL 还是 SESSION，服务器会当做 SESSION 处理。</p>
<p>使用 SET 设置全局变量或会话变量成功后，如果 MySQL 服务重启，数据库的配置就又会重新初始化。一切按照配置文件进行初始化，全局变量和会话变量的配置都会失效。</p>
<p>MySQL 中还有一些特殊的全局变量，如 log_bin、tmpdir、version、datadir，在 MySQL 服务实例运行期间它们的值不能动态修改，也就是不能使用 SET 命令进行重新设置，这种变量称为静态变量。数据库管理员可以使用前面提到的修改源代码或更改配置文件来重新设置静态变量的值。</p>
<h1 id="八-存储引擎概述"><a href="#八-存储引擎概述" class="headerlink" title="八. 存储引擎概述"></a>八. 存储引擎概述</h1><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。简而言之，存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>
<p>现在许多数据库管理系统都支持多种不同的存储引擎。<a href="http://c.biancheng.net/mysql/">MySQL</a> 的核心就是存储引擎。</p>
<p>MySQL 提供了多个不同的存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。在 MySQL 中，不需要在整个服务器中使用同一种存储引擎，针对具体的要求，可以对每一个表使用不同的存储引擎。</p>
<p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、CSV、BLACKHOLE 等。可以使用<code>SHOW ENGINES;</code>语句查看系统所支持的引擎类型，结果如图所示。</p>
<p><img src="/images/mysql%E5%BC%95%E6%93%8E.png" alt="MySQL数据库中的存储引擎"><br>Support 列的值表示某种引擎是否能使用，<code>YES</code>表示可以使用，<code>NO</code>表示不能使用，<code>DEFAULT</code>表示该引擎为当前默认的存储引擎。</p>
<p>下面简要描写几种存储引擎，后面会对其中的几种（主要是 InnoDB 和 MyISAM ）进行详细讲解。像 NDB 这样的需要更多扩展性的讨论，这超出了本教程的介绍范畴，所以在教程后面对它们不会介绍太多。</p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ARCHIVE</td>
<td>用于数据存档的引擎，数据被插入后就不能在修改了，且不支持索引。</td>
</tr>
<tr>
<td>CSV</td>
<td>在存储数据时，会以逗号作为数据项之间的分隔符。</td>
</tr>
<tr>
<td>BLACKHOLE</td>
<td>会丢弃写操作，该操作会返回空内容。</td>
</tr>
<tr>
<td>FEDERATED</td>
<td>将数据存储在远程数据库中，用来访问远程表的存储引擎。</td>
</tr>
<tr>
<td>InnoDB</td>
<td>具备外键支持功能的事务处理引擎</td>
</tr>
<tr>
<td>MEMORY</td>
<td>置于内存的表</td>
</tr>
<tr>
<td>MERGE</td>
<td>用来管理由多个 MyISAM 表构成的表集合</td>
</tr>
<tr>
<td>MyISAM</td>
<td>主要的非事务处理存储引擎</td>
</tr>
<tr>
<td>NDB</td>
<td>MySQL 集群专用存储引擎</td>
</tr>
</tbody></table>
<p>有几种存储引擎的名字还有同义词，例如，MRG_MyISAM 和 NDBCLUSTER 分别是 MERGE 和 NDB 的同义词。存储引擎 MEMORY 和 InnoDB 在早期分别称为 HEAP 和 Innobase。虽然后面两个名字仍能被识别，但是已经被废弃了</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>python-opencv</title>
    <url>/2021/08/10/13-11-34/</url>
    <content><![CDATA[<h1 id="简单认识"><a href="#简单认识" class="headerlink" title="简单认识"></a>简单认识</h1><p><strong>感觉比较有用，参考<a href="https://www.cnblogs.com/silence-cho/p/10926248.html">这篇文章</a>进行学习记录</strong></p>
<span id="more"></span>

<h2 id="图像存储形式"><a href="#图像存储形式" class="headerlink" title="图像存储形式"></a>图像存储形式</h2><p><strong>对于只有黑白颜色的灰度图，为单通道，一个像素块对应矩阵中一个数字，数值为0到255, 其中0表示最暗（黑色） ，255表示最亮（白色）</strong></p>
<!--more-->

<p><img src="/images/cv1.png"></p>
<p><strong>对于采用RGB模式的彩色图片，为三通道图，Red、Green、Blue三原色，按不同比例相加，一个像素块对应矩阵中的一个向量, 如[24,180, 50]，分别表示三种颜色的比列, 即对应深度上的数字，如下图所示</strong></p>
<p><img src="/images/cv2.png"></p>
<p><strong>需要注意的是，由于历史遗留问题，opencv采用BGR模式，而不是RGB</strong></p>
<h1 id="图像的读取和写入"><a href="#图像的读取和写入" class="headerlink" title="图像的读取和写入"></a>图像的读取和写入</h1><h2 id="imread"><a href="#imread" class="headerlink" title="imread"></a>imread</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># imread(img_path,flag) 读取图片，返回图片对象</span></span><br><span class="line">    img_path: 图片的路径，即使路径错误也不会报错，但打印返回的图片对象为<span class="literal">None</span></span><br><span class="line">    flag：cv2.IMREAD_COLOR，读取彩色图片，图片透明性会被忽略，为默认参数，也可以传入<span class="number">1</span></span><br><span class="line">          cv2.IMREAD_GRAYSCALE,按灰度模式读取图像，也可以传入<span class="number">0</span></span><br><span class="line">          也可以如此cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">          cv2.IMREAD_UNCHANGED,读取图像，包括其alpha通道，也可以传入-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>注：有时会报错，一方面是路径不能有中文，二是文件夹下的图片不能以数字顺序命名，不然会报错,实在不行用pycharm运行一下就全解决了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv2.error: OpenCV(4.5.2) C:\Users\runneradmin\AppData\Local\Temp\pip-req-build-_8k9tw8n\opencv\modules\highgui\src\window.cpp:404: error: (-215:Assertion failed) size.width&gt;0 &amp;&amp; size.height&gt;0 in function &#x27;cv::imshow&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="imshow"><a href="#imshow" class="headerlink" title="imshow"></a>imshow</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#　imshow(window_name,img)：显示图片，窗口自适应图片大小</span></span><br><span class="line">    window_name: 指定窗口的名字</span><br><span class="line">    img：显示的图片对象</span><br><span class="line">    可以指定多个窗口名称，显示多个图片</span><br><span class="line">waitKey(millseconds)  键盘绑定事件，阻塞监听键盘按键，返回一个数字（不同按键对应的数字不同）</span><br><span class="line">    millseconds: 传入时间毫秒数，在该时间内等待键盘事件；传入<span class="number">0</span>时，会一直等待键盘事件,此时任意按键均会使程序进行下一步操作    </span><br><span class="line">destroyAllWindows(window_name) </span><br><span class="line">    window_name: 需要关闭的窗口名字，不传入时关闭所有窗口</span><br></pre></td></tr></table></figure>

<h2 id="imwrite"><a href="#imwrite" class="headerlink" title="imwrite"></a>imwrite</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># imwrite(img_path_name,img)</span></span><br><span class="line">    img_path_name:保存的文件名</span><br><span class="line">    img：文件对象</span><br></pre></td></tr></table></figure>

<h1 id="图像像素获取和编辑"><a href="#图像像素获取和编辑" class="headerlink" title="图像像素获取和编辑"></a>图像像素获取和编辑</h1><h2 id="像素值获取"><a href="#像素值获取" class="headerlink" title="像素值获取"></a>像素值获取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取和设置</span></span><br><span class="line">pixel = img[<span class="number">100</span>,<span class="number">100</span>]  <span class="comment">#[57 63 68],获取(100,100)处的像素值</span></span><br><span class="line">img[<span class="number">100</span>,<span class="number">100</span>]=[<span class="number">57</span>,<span class="number">63</span>,<span class="number">99</span>] <span class="comment">#设置像素值</span></span><br><span class="line">b = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>]    <span class="comment">#57, 获取(100,100)处，blue通道像素值</span></span><br><span class="line">g = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">1</span>]    <span class="comment">#63</span></span><br><span class="line">r = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>]      <span class="comment">#68</span></span><br><span class="line">r = img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>]=<span class="number">99</span>    <span class="comment">#设置red通道值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#另一种获取和设置方式</span></span><br><span class="line">piexl = img.item(<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line">img.itemset((<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>),<span class="number">99</span>)</span><br></pre></td></tr></table></figure>

<h2 id="图片性质"><a href="#图片性质" class="headerlink" title="图片性质"></a>图片性质</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">r&quot;./code.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rows,cols,channels</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)   <span class="comment">#返回(42, 120, 3), 长42(cols)，宽120(rows)，3通道(channels)</span></span><br><span class="line"><span class="comment">#size</span></span><br><span class="line"><span class="built_in">print</span>(img.size)    <span class="comment">#返回15120，所有像素数量，=42*120*3</span></span><br><span class="line"><span class="comment">#type</span></span><br><span class="line"><span class="built_in">print</span>(img.dtype)   <span class="comment">#dtype(&#x27;uint8&#x27;) 数字整型</span></span><br></pre></td></tr></table></figure>

<h2 id="ROI截取"><a href="#ROI截取" class="headerlink" title="ROI截取"></a>ROI截取</h2><p>ROI（region of interest），感兴趣区域。机器视觉、图像处理中，从被处理的图像以方框、圆、椭圆、不规则多边形等方式勾勒出需要处理的区域，称为感兴趣区域，ROI。在Halcon、OpenCV、Matlab等机器视觉软件上常用到各种算子（Operator）和函数来求得感兴趣区域ROI，并进行图像的下一步处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">roi = img[<span class="number">100</span>:<span class="number">200</span>,<span class="number">300</span>:<span class="number">400</span>]  <span class="comment">#截取100行到200行，列为300到400列的整块区域</span></span><br><span class="line">img[<span class="number">50</span>:<span class="number">150</span>,<span class="number">200</span>:<span class="number">300</span>] = roi   <span class="comment">#将截取的roi移动到该区域 （50到100行，200到300列）</span></span><br><span class="line">b = img[:,:,<span class="number">0</span>]  <span class="comment">#截取整个蓝色通道</span></span><br><span class="line"></span><br><span class="line">b,g,r = cv2.split(img) <span class="comment">#截取三个通道，比较耗时</span></span><br><span class="line">img = cv2.merge((b,g,r))</span><br></pre></td></tr></table></figure>

<h1 id="添加边界"><a href="#添加边界" class="headerlink" title="添加边界"></a>添加边界</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.copyMakeBorder() <span class="comment"># 也是属于创建一个中间副本</span></span><br><span class="line">    参数：</span><br><span class="line">        img:图像对象</span><br><span class="line">        top,bottom,left,right: 上下左右边界宽度，单位为像素值</span><br><span class="line">        borderType:</span><br><span class="line">            cv2.BORDER_CONSTANT, 带颜色的边界，需要传入另外一个颜色值</span><br><span class="line">            cv2.BORDER_REFLECT, 边缘元素的镜像反射做为边界</span><br><span class="line">            cv2.BORDER_REFLECT_101/cv2.BORDER_DEFAULT</span><br><span class="line">            cv2.BORDER_REPLICATE, 边缘元素的复制做为边界</span><br><span class="line">            CV2.BORDER_WRAP</span><br><span class="line">        value: borderType为cv2.BORDER_CONSTANT时，传入的边界颜色值，如[<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h1 id="像素算术运算"><a href="#像素算术运算" class="headerlink" title="像素算术运算"></a>像素算术运算</h1><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.add()</span><br><span class="line">    参数：</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        img2:图片对象<span class="number">2</span></span><br><span class="line">        mask:<span class="literal">None</span> （掩膜，一般用灰度图做掩膜，img1和img2相加后，和掩膜与运算，从而达到掩盖部分区域的目的）</span><br><span class="line">        dtype:-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">注意：图像相加时应该用cv2.add(img1,img2)代替img1+img2  </span><br><span class="line">        &gt;&gt;&gt; x = np.uint8([<span class="number">250</span>])</span><br><span class="line">        &gt;&gt;&gt; y = np.uint8([<span class="number">10</span>])</span><br><span class="line">        &gt;&gt;&gt; <span class="built_in">print</span> cv2.add(x,y) <span class="comment"># 250+10 = 260 =&gt; 255  #相加，opencv超过255的截取为255</span></span><br><span class="line">        [[<span class="number">255</span>]]</span><br><span class="line">        &gt;&gt;&gt; <span class="built_in">print</span> x+y          <span class="comment"># 250+10 = 260 % 256 = 4  #相加，np超过255的会取模运算 （uint8只能表示0-255，所以取模）</span></span><br><span class="line">        [<span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<h2 id="addWeight"><a href="#addWeight" class="headerlink" title="addWeight()"></a>addWeight()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.addWeighted() 两张图片相加，分别给予不同权重，实现图片融合和透明背景等效果</span><br><span class="line">    参数：</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        alpha:img1的权重</span><br><span class="line">        img2:图片对象<span class="number">2</span></span><br><span class="line">        beta:img1的权重</span><br><span class="line">        gamma：常量值，图像相加后再加上常量值</span><br><span class="line">        dtype：返回图像的数据类型，默认为-<span class="number">1</span>，和img1一样</span><br><span class="line">    (img1*alpha+img2*beta+gamma)</span><br><span class="line">    </span><br><span class="line">    cv.addWeighted(img,<span class="number">0.5</span>,img2,<span class="number">0.9</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="图像位运算"><a href="#图像位运算" class="headerlink" title="图像位运算"></a>图像位运算</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.btwise_and(): 与运算</span><br><span class="line">    参数：</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        img2:图片对象<span class="number">2</span></span><br><span class="line">        mask:掩膜</span><br><span class="line">    cv2.bitwise_or()：或运算</span><br><span class="line">    参数：</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        img2:图片对象<span class="number">2</span></span><br><span class="line">        mask:掩膜</span><br><span class="line">    cv2.bitwise_not(): 非运算</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        mask:掩膜</span><br><span class="line">    cv2.bitwise_xor():异或运算，相同为<span class="number">1</span>，不同为<span class="number">0</span>（<span class="number">1</span>^<span class="number">1</span>=<span class="number">0</span>,<span class="number">1</span>^<span class="number">0</span>=<span class="number">1</span>）</span><br><span class="line">        img1:图片对象<span class="number">1</span></span><br><span class="line">        img2:图片对象<span class="number">2</span></span><br><span class="line">        mask:掩膜</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">im1 = cv2.imread(<span class="string">r&#x27;D:/img/comic/014.jpg&#x27;</span>)</span><br><span class="line">im2 = cv2.imread(<span class="string">r&#x27;D:/img/comic/star.jpg&#x27;</span>)</span><br><span class="line">rows,cols = im1.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 插入区域选取</span></span><br><span class="line">roi = im2[<span class="number">0</span>:rows,<span class="number">0</span>:cols]</span><br><span class="line">im1_gray = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 获得插入图片的前景图，二值化函数见下面</span></span><br><span class="line">ret,im1_thres = cv2.threshold(im1_gray, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line">im1_fg = cv2.add(im1,im1,mask=im1_thres)</span><br><span class="line"><span class="comment"># 获取原来对应区域的背景,即在将要插入的背景图处创建一个对应的空缺</span></span><br><span class="line">im1_thres_inv = cv2.bitwise_not(im1_thres)</span><br><span class="line">roi_bg = cv2.add(roi, roi, mask=im1_thres_inv)</span><br><span class="line"><span class="comment"># 前景和背景进行合并，然后对原图区域进行替换</span></span><br><span class="line">im_add = cv2.add(im1_fg, roi_bg)</span><br><span class="line">im2[<span class="number">0</span>:rows,<span class="number">0</span>:rows] = im_add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;action&#x27;</span>,im1)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;dest&#x27;</span>, im2)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;frontpg&#x27;</span>, im1_fg)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;backpage&#x27;</span>, roi_bg)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;assembly&#x27;</span>, im_add)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;result&#x27;</span>, im2)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="built_in">print</span>(rows,cols)</span><br></pre></td></tr></table></figure>

<h1 id="图像颜色空间转换"><a href="#图像颜色空间转换" class="headerlink" title="图像颜色空间转换"></a>图像颜色空间转换</h1><h2 id="cv2-cvtColor"><a href="#cv2-cvtColor" class="headerlink" title="cv2.cvtColor()"></a>cv2.cvtColor()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.cvtColor()</span><br><span class="line">    参数：</span><br><span class="line">        img: 图像对象</span><br><span class="line">        code：</span><br><span class="line">            cv2.COLOR_RGB2GRAY: RGB转换到灰度模式</span><br><span class="line">            cv2.COLOR_RGB2HSV： RGB转换到HSV模式（hue,saturation,Value）</span><br><span class="line">cv2.inRange()</span><br><span class="line">    参数：</span><br><span class="line">        img: 图像对象/array</span><br><span class="line">        lowerb: 低边界array，  如lower_blue = np.array([<span class="number">110</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">        upperb：高边界array， 如 upper_blue = np.array([<span class="number">130</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">    mask = cv2.inRange(hsv, lower_green, upper_green)</span><br></pre></td></tr></table></figure>

<h1 id="性能评价"><a href="#性能评价" class="headerlink" title="性能评价"></a>性能评价</h1><p>cv2.getTickCount()： 获得时钟次数</p>
<p>cv2.getTickFrequency()：获得时钟频率 （每秒振动次数）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv2.imread(<span class="string">r&#x27;D:/img/comic/014.jpg&#x27;</span>)</span><br><span class="line">e1 = cv2.getTickCount()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">49</span>,<span class="number">2</span>):</span><br><span class="line">    img1 = cv2.medianBlur(img,i)</span><br><span class="line">e2 = cv2.getTickCount()</span><br><span class="line">t = (e2 - e1)/cv2.getTickFrequency()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<h1 id="绑定trackbar"><a href="#绑定trackbar" class="headerlink" title="绑定trackbar"></a>绑定trackbar</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.createTrackbar() 为窗口添加trackbar</span><br><span class="line">参数：</span><br><span class="line">    trackbarname: trackbar的名字</span><br><span class="line">    winname: 窗口的名字</span><br><span class="line">    value: trackbar创建时的值</span><br><span class="line">    count：trackbar能设置的最大值，最小值总为<span class="number">0</span></span><br><span class="line">    onChange：trackbar值发生变化时的回调函数，trackbar的值作为参数传给onchange</span><br><span class="line">    </span><br><span class="line">cv2.getTrackbarPos() 获取某个窗口中trackbar的值</span><br><span class="line">参数：</span><br><span class="line">    trackbarname: trackbar的名字</span><br><span class="line">    winname: 窗口的名字</span><br></pre></td></tr></table></figure>

<h1 id="图像阈值化-二值化"><a href="#图像阈值化-二值化" class="headerlink" title="图像阈值化(二值化)"></a>图像阈值化(二值化)</h1><h2 id="一、图像二值化"><a href="#一、图像二值化" class="headerlink" title="一、图像二值化"></a>一、图像二值化</h2><p>定义：图像的二值化，就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的只有黑和白的视觉效果。</p>
<p>灰度值0：黑，灰度值255：白</p>
<p>   一幅图像包括目标物体、背景还有噪声，要想从多值的数字图像中直接提取出目标物体，常用的方法就是设定一个阈值T，用T将图像的数据分成两部分：大于T的像素群和小于T的像素群。这是研究灰度变换的最特殊的方法，称为图像的二值化（Binarization）。</p>
<h2 id="二、threshold"><a href="#二、threshold" class="headerlink" title="二、threshold"></a>二、threshold</h2><p>cv2.threshold(img, threshold, maxval,type)</p>
<p>其中：</p>
<p>threshold是设定的阈值<br>maxval是当灰度值大于（或小于）阈值时将该灰度值赋成的值<br>type规定的是当前二值化的方式<br>破折线为将被阈值化的值；虚线为阈值  </p>
<p>返回两个值<br>    ret:阈值<br>    img：阈值化处理后的图像</p>
<table>
<thead>
<tr>
<th>type</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cv2.THRESH_BINARY</td>
<td>大于阈值的部分被置为255，小于部分被置为0</td>
</tr>
<tr>
<td>cv2.THRESH_BINARY_INV</td>
<td>大于阈值部分被置为0，小于部分被置为255</td>
</tr>
<tr>
<td>cv2.THRESH_TRUNC</td>
<td>大于阈值部分被置为threshold，小于部分保持原样</td>
</tr>
<tr>
<td>cv2.THRESH_TOZERO</td>
<td>小于阈值部分被置为0，大于部分保持不变</td>
</tr>
<tr>
<td>cv2.THRESH_TOZERO_INV</td>
<td>大于阈值部分被置为0，小于部分保持不变</td>
</tr>
</tbody></table>
<h2 id="三-adaptiveThreshold"><a href="#三-adaptiveThreshold" class="headerlink" title="三. adaptiveThreshold"></a>三. adaptiveThreshold</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv2.adaptiveThreshold() 自适应阈值处理，图像不同部位采用不同的阈值进行处理</span><br><span class="line">参数：</span><br><span class="line">    img: 图像对象，8-bit单通道图</span><br><span class="line">    maxValue:最大值</span><br><span class="line">    adaptiveMethod: 自适应方法</span><br><span class="line">        cv2.ADAPTIVE_THRESH_MEAN_C     ：阈值为周围像素的平均值</span><br><span class="line">        cv2.ADAPTIVE_THRESH_GAUSSIAN_C : 阈值为周围像素的高斯均值（按权重）</span><br><span class="line">    threshType:</span><br><span class="line">        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxValuel</span><br><span class="line">        cv2.THRESH_BINARY_INV:  小于阈值的像素置为maxValue，大于阈值的置为0</span><br><span class="line">    blocksize: 计算阈值时，自适应的窗口大小,必须为奇数 （如3：表示附近3个像素范围内的像素点，进行计算阈值）</span><br><span class="line">    C： 常数值，通过自适应方法计算的值，减去该常数值</span><br></pre></td></tr></table></figure>

<h2 id="四-奥斯二值化（Otsu’s-Binarization）"><a href="#四-奥斯二值化（Otsu’s-Binarization）" class="headerlink" title="四. 奥斯二值化（Otsu’s Binarization）"></a>四. 奥斯二值化（Otsu’s Binarization）</h2><p>　　　　对于一些双峰图像，奥斯二值化能找到两峰之间的像素值作为阈值，并将其返回。适用于双峰图像的阈值化，或者通过去噪而产生的双峰图像。</p>
<p>　官网使用示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;noisy2.png&#x27;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># global thresholding</span></span><br><span class="line">ret1,th1 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Otsu&#x27;s thresholding</span></span><br><span class="line">ret2,th2 = cv2.threshold(img,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Otsu&#x27;s thresholding after Gaussian filtering</span></span><br><span class="line">blur = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>)</span><br><span class="line">ret3,th3 = cv2.threshold(blur,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot all the images and their histograms</span></span><br><span class="line">images = [img, <span class="number">0</span>, th1,</span><br><span class="line">          img, <span class="number">0</span>, th2,</span><br><span class="line">          blur, <span class="number">0</span>, th3]</span><br><span class="line">titles = [<span class="string">&#x27;Original Noisy Image&#x27;</span>,<span class="string">&#x27;Histogram&#x27;</span>,<span class="string">&#x27;Global Thresholding (v=127)&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Original Noisy Image&#x27;</span>,<span class="string">&#x27;Histogram&#x27;</span>,<span class="string">&quot;Otsu&#x27;s Thresholding&quot;</span>,</span><br><span class="line">          <span class="string">&#x27;Gaussian filtered Image&#x27;</span>,<span class="string">&#x27;Histogram&#x27;</span>,<span class="string">&quot;Otsu&#x27;s Thresholding&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">1</span>),plt.imshow(images[i*<span class="number">3</span>],<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">2</span>),plt.hist(images[i*<span class="number">3</span>].ravel(),<span class="number">256</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">1</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">3</span>),plt.imshow(images[i*<span class="number">3</span>+<span class="number">2</span>],<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">2</span>]), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img"><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190601224852098-1757221396.png" alt="img"></p>
<h1 id="图像形状变换"><a href="#图像形状变换" class="headerlink" title="图像形状变换"></a>图像形状变换</h1><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.resize() 放大和缩小图像</span><br><span class="line">    参数：</span><br><span class="line">        src: 输入图像对象</span><br><span class="line">        dsize：输出矩阵/图像的大小，为<span class="number">0</span>时计算方式如下：dsize = Size(<span class="built_in">round</span>(fx*src.cols),<span class="built_in">round</span>(fy*src.rows))</span><br><span class="line">        fx: 水平轴的缩放因子，为<span class="number">0</span>时计算方式：  (double)dsize.width/src.cols</span><br><span class="line">        fy: 垂直轴的缩放因子，为<span class="number">0</span>时计算方式：  (double)dsize.heigh/src.rows</span><br><span class="line">        interpolation：插值算法</span><br><span class="line">            cv2.INTER_NEAREST : 最近邻插值法</span><br><span class="line">            cv2.INTER_LINEAR   默认值，双线性插值法</span><br><span class="line">            cv2.INTER_AREA        基于局部像素的重采样（resampling using pixel area relation）。对于图像抽取（image decimation）来说，这可能是一个更好的方法。但如果是放大图像时，它和最近邻法的效果类似。</span><br><span class="line">            cv2.INTER_CUBIC        基于4x4像素邻域的<span class="number">3</span>次插值法</span><br><span class="line">            cv2.INTER_LANCZOS4     基于8x8像素邻域的Lanczos插值</span><br><span class="line">                     </span><br><span class="line">    cv2.INTER_AREA 适合于图像缩小， cv2.INTER_CUBIC (slow) &amp; cv2.INTER_LINEAR 适合于图像放大</span><br></pre></td></tr></table></figure>

<h2 id="warpAffine-仿射变换"><a href="#warpAffine-仿射变换" class="headerlink" title="warpAffine()   仿射变换"></a>warpAffine()   仿射变换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.warpAffine()   仿射变换（从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行性”。仿射变换可以通过一系列的原子变换的复合来实现，包括平移，缩放，翻转，旋转和剪切）</span><br><span class="line">    参数：</span><br><span class="line">        img: 图像对象</span><br><span class="line">        M：<span class="number">2</span>*<span class="number">3</span> transformation matrix (转变矩阵)</span><br><span class="line">        dsize：输出矩阵的大小,注意格式为（cols，rows）  即width对应cols，height对应rows</span><br><span class="line">        flags：可选，插值算法标识符，有默认值INTER_LINEAR，</span><br><span class="line">               如果插值算法为WARP_INVERSE_MAP, warpAffine函数使用如下矩阵进行图像转dst(x,y)=src(M11*x+M12*y+M13,M21*x+M22*y+M23)</span><br><span class="line">        borderMode：可选， 边界像素模式，有默认值BORDER_CONSTANT </span><br><span class="line">        borderValue:可选，边界取值，有默认值Scalar()即<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>常用插值算法：</p>
<p><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190602091005036-227493627.png" alt="img"></p>
<p>　　　仿射变换的本质：即一个矩阵A和向量B共同组成的转变矩阵，和原图像坐标相乘来得到新图像的坐标，从而实现图像移动，旋转等。如下矩阵A和向量B组成的转变矩阵M，用来对原图像的坐标（x,y）进行转变，得到新的坐标向量T</p>
<p>　矩阵A和向量B</p>
<p><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190602092346111-65750210.png" alt="img"></p>
<p>　　　　仿射变换（矩阵计算）：变换前坐标（x,y）</p>
<p><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190602092700612-1331464134.png" alt="img"></p>
<p>　　　　变换结果：变换后坐标<code>（a00*x+a01 *y+b00, a10*x+a11*y+b10）</code></p>
<p><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190602092727342-320819378.png" alt="img"></p>
<h2 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h2><p>官网使用示例：向右平移100，向下平移50</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">rows,cols = img.shape</span><br><span class="line"></span><br><span class="line">M = np.float32([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>]])</span><br><span class="line">dst = cv2.warpAffine(img,M,(cols,rows))</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>,dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h2 id="放大和缩小"><a href="#放大和缩小" class="headerlink" title="放大和缩小"></a>放大和缩小</h2><p>放大和缩小指相对于原坐标（x,y）,变换为了<code>（a*x, b*y）</code>,即水平方向放大了a倍，水平方向放大了b倍，其对应的转变矩阵如下：</p>
<p><img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190607111439230-653546455.png" alt="img"></p>
<h2 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h2><p>将（x,y），以坐标原点为中心，顺时针方向旋转α得到(x1,y1)， 有如下关系x1 = xcosα-ysinα, y1 =xsinα+ycosα; 因此可以构建对应的转变矩阵如下：<img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190607104028901-605422183.png" alt="img"></p>
<p>opencv将其扩展到，任意点center为中心进行顺时针旋转α，放大scale倍的，转变矩阵如下：</p>
<p>　　　　　　　　　　　　<img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190607104933761-1590038994.png" alt="img"></p>
<p>通过getRotationMatrix2D()能得到转变矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.getRotationMatrix2D()  返回<span class="number">2</span>*<span class="number">3</span>的转变矩阵（浮点型）</span><br><span class="line"> 参数：</span><br><span class="line">     center：旋转的中心点坐标</span><br><span class="line">     angle：旋转角度，单位为度数，证书表示逆时针旋转</span><br><span class="line">     scale：同方向的放大倍数</span><br></pre></td></tr></table></figure>

<h2 id="仿射变换矩阵的计算"><a href="#仿射变换矩阵的计算" class="headerlink" title="仿射变换矩阵的计算"></a>仿射变换矩阵的计算</h2><p>　　　　通过上述的平移，缩放，旋转的组合变换即实现了仿射变换，上述多个变换的变换矩阵相乘即能得到组合变换的变换矩阵。同时该变换矩阵中涉及到六个未知数（2*3的矩阵），通过变换前后对应三组坐标，也可以求出变换矩阵，opencv提供了函数getAffineTransform()来计算变化矩阵</p>
<ol>
<li><p>矩阵相乘：将平移，旋转和缩放的变换矩阵相乘，最后即为仿射变换矩阵</p>
</li>
<li><p>getAffineTransform()：根据变换前后三组坐标计算变换矩阵</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　　　cv2.getAffineTransform()  返回2*3的转变矩阵</span><br><span class="line">    　 参数：</span><br><span class="line">       　　 src：原图像中的三组坐标，如np.float32([[50,50],[200,50],[50,200]])</span><br><span class="line">        　　dst: 转换后的对应三组坐标，如np.float32([[10,100],[200,50],[100,250]])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;drawing.png&#x27;</span>)</span><br><span class="line">rows,cols,ch = img.shape</span><br><span class="line"></span><br><span class="line">pts1 = np.float32([[<span class="number">50</span>,<span class="number">50</span>],[<span class="number">200</span>,<span class="number">50</span>],[<span class="number">50</span>,<span class="number">200</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">10</span>,<span class="number">100</span>],[<span class="number">200</span>,<span class="number">50</span>],[<span class="number">100</span>,<span class="number">250</span>]])</span><br><span class="line"></span><br><span class="line">M = cv2.getAffineTransform(pts1,pts2)</span><br><span class="line"></span><br><span class="line">dst = cv2.warpAffine(img,M,(cols,rows))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img),plt.title(<span class="string">&#x27;Input&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(dst),plt.title(<span class="string">&#x27;Output&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="透视变换-persperctive-transformation"><a href="#透视变换-persperctive-transformation" class="headerlink" title="透视变换(persperctive transformation)"></a>透视变换(persperctive transformation)</h2><p>　　　　仿射变换都是在二维空间的变换，透视变换（投影变换）是在三维空间中发生了旋转。需要前后四组坐标来计算对应的转变矩阵，opencv提供了函数getPerspectiveTransform()来计算转变矩阵，cv2.warpPerspective()函数来进行透视变换。其对应参数如下：　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">　　　　　cv2.getPerspectiveTransform()   返回<span class="number">3</span>*<span class="number">3</span>的转变矩阵</span><br><span class="line">参数：    </span><br><span class="line">    src：原图像中的四组坐标，如 np.float32([[<span class="number">56</span>,<span class="number">65</span>],[<span class="number">368</span>,<span class="number">52</span>],[<span class="number">28</span>,<span class="number">387</span>],[<span class="number">389</span>,<span class="number">390</span>]])</span><br><span class="line">    dst: 转换后的对应四组坐标，如np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">300</span>]])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">cv2.warpPerspective()</span><br><span class="line">参数：    </span><br><span class="line">    src: 图像对象</span><br><span class="line">    M：<span class="number">3</span>*<span class="number">3</span> transformation matrix (转变矩阵)</span><br><span class="line">    dsize：输出矩阵的大小，注意格式为（cols，rows）  即width对应cols，height对应rows</span><br><span class="line">    flags：可选，插值算法标识符，有默认值INTER_LINEAR，</span><br><span class="line">           如果插值算法为WARP_INVERSE_MAP, warpAffine函数使用如下矩阵进行图像转dst(x,y)=src(M11*x+M12*y+M13,M21*x+M22*y+M23)</span><br><span class="line">    borderMode：可选， 边界像素模式，有默认值BORDER_CONSTANT </span><br><span class="line">    borderValue:可选，边界取值，有默认值Scalar()即<span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;sudokusmall.png&#x27;</span>)</span><br><span class="line">rows,cols,ch = img.shape</span><br><span class="line"></span><br><span class="line">pts1 = np.float32([[<span class="number">56</span>,<span class="number">65</span>],[<span class="number">368</span>,<span class="number">52</span>],[<span class="number">28</span>,<span class="number">387</span>],[<span class="number">389</span>,<span class="number">390</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">300</span>]])</span><br><span class="line"></span><br><span class="line">M = cv2.getPerspectiveTransform(pts1,pts2)</span><br><span class="line"></span><br><span class="line">dst = cv2.warpPerspective(img,M,(<span class="number">300</span>,<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img),plt.title(<span class="string">&#x27;Input&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(dst),plt.title(<span class="string">&#x27;Output&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>　　　<img src="https://img2018.cnblogs.com/blog/1483773/201906/1483773-20190607114939954-1993012118.png" alt="img"></p>
<p>　　　从上图中可以透视变换的一个应用，如果能找到原图中纸张的四个顶点，将其转换到新图中纸张的四个顶点，能将歪斜的roi区域转正，并进行放大；如在书籍，名片拍照上传后进行识别时，是一个很好的图片预处理方法。</p>
<p> 　　opencv中还提供了一个函数perspctiveTransform()来对坐标点进行透视变换，对于原图像上的一点，通过perspctiveTransform()能计算出透视变换后图片上该点的坐标，其对应参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cv2.perspectiveTransform(src, matrix)</span><br><span class="line"></span><br><span class="line">参数： </span><br><span class="line">    src：坐标点矩阵，注意其格式. 如src=np.array([[589, 91],[1355, 91],[1355, 219],[589, 219]], np.float32).reshape(-1, 1, 2), 表示四个坐标点，size为(4, -1, 2)</span><br><span class="line">    matrix：getPerspectiveTransform()得到的透视变换矩阵 返回值：变换后的坐标点，格式和src相同</span><br></pre></td></tr></table></figure>

<p>　　若变换前坐标点src(x, y),变换后坐标点为dst(X, Y)， 其内部计算过程如下</p>
<p><img src="https://img2020.cnblogs.com/blog/1483773/202102/1483773-20210210175616751-623661270.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#matrix</span><br><span class="line">matrix = np.float32([[ 8.06350904e-01 -1.67497791e-02 -4.34096149e+01]</span><br><span class="line"> [ 2.85178118e-02  8.29440456e-01 -6.26063898e+01]</span><br><span class="line"> [ 2.41877972e-05  1.99790270e-05  1.00000000e+00]])</span><br><span class="line"></span><br><span class="line">rect = np.array([[589, 91], [1355, 91], [1355, 219], [589, 219]], np.float32)</span><br><span class="line">rect = rect.reshape(-1, 1, 2)</span><br><span class="line">newRect = cv2.perspectiveTransform(rect, matrix)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test(rect, matrix):</span><br><span class="line">    rect_fill = np.ones((4, 3), dtype=np.float32)</span><br><span class="line">    rect_fill[:, :2] = rect</span><br><span class="line">    mid_rect = np.dot(matrix, rect_fill.T)</span><br><span class="line">    mid_rect = mid_rect.T</span><br><span class="line">    mid_rect[:, :2] = mid_rect[:, :2]/mid_rect[:, 2:]</span><br><span class="line">    print(&quot;TEST&quot;, mid_rect)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令大全</title>
    <url>/2021/08/10/20-17-45/</url>
    <content><![CDATA[<p><strong>纯属闲着没事干，把命令给整理了一遍，绝了</strong></p>
<span id="more"></span>

<h2 id="linux权限管理"><a href="#linux权限管理" class="headerlink" title="linux权限管理"></a>linux权限管理</h2><ol>
<li>4 r只读 2 w写 1 x执行   6读写  7读写执行</li>
<li>s setuid setgid权限    s粘滞位</li>
<li>文件按权限分为 拥有者u，所属组g，其他用户o</li>
<li>每个部分又都有 读r, 写w, 执行x.等权限的限制</li>
<li>chmod u-r,o+w file  对所有者取消读取权限，对其它用户增加写权限</li>
<li>一般最常用的选项为-r 表明对其中所有文件执行同样操作</li>
<li>如果同时拥有setuid或setgid和x权限同时拥有则两种权限叠加将x替换为s,如果没有x权限则写为S</li>
<li>粘滞位用t表示，主要用在其他用户上表示只有所有者才具有修改的权限，防止权限的交叉，如果只有粘滞位没有执行权限的话则用T表示​</li>
<li>超级块修复<br>​sudo mkfs -t ext4 -n 主分区   得到备份编号<br>​sudo fsck -t ext4 -b 编号 主分区    进行恢复<br>​RAID 磁盘阵列  RAID0-RAID7</li>
</ol>
<p>基本命令</p>
<pre><code>rm      删除文件
    -r 强制删除文件夹及其包含内容     
    -f 即使原文档属性为只读也直接删除，无需逐一确认   
    -i  删除前逐一询问
mkdir   新建文件夹       
    -p 1/2/3  建立多级目录
rmdir   删除文件夹       
    -p 1/2/3  删除多级目录（要求每个文件夹都必须是空目录） 
    -v 显示命令的详细执行过程
tree    显示当前目录树结构
cat     拼接文件内容  
    -n  从一开始对所有输出的行编号 -b 功能类似但会忽略空行
    -s 可以用来压缩裤空白行
    cat file1 file2   一起显示
    cat file1 file2 &gt; file3 一二的内容合并到3中
|    管道符号 用以连接多个命令
cp      复制内容  cp source dest
    -a    常在复制目录时使用 保留文件属性，链接
    -d 当复制符号链接时，为目标文件和目录也建立起符号链接并指向与源文件或目录连接的原始文件
    -f 强行复制文件或目录，不论目标文件或目录是否已经存在
    -i 覆盖已有文件之前先询问用户
    -l 对源文件建立起硬链接
    -p 保留原文件或目录的属性
    -r 递归复制目录下的所有文件和子目录
    -s 对源文件建立起符号链接
    -u 只有源文件较目标文件更新或目标文件不存在时才复制文件
    -S 后缀名 source dest  复制时更改后缀名
    -b 覆盖已存在的文件目标前将文件备份
su    变更为其他使用者的身份   su user
    -c command user 变换为其他用户后执行命令后变为原使用者
    -s 指定切换后使用的shell程序
    -l 提供一个类似于用户直接登录的环境
whoami    查看当前账户
文件属性总纲（第一个字符）
    d 目录文件
    c字符设备文件
    b块设备文件（磁盘，U盘）
    p管道文件
    l符号链接  类似于指针
    s 套接字
makefifo 管道名    ；   mknod 管道名 p        命名管道文件
grep    筛选文件
    grep &#39;^d&#39;筛选文件首字母为d的文件   （其中^d为正则表达式）
file    用于查看文件的类型
chmod    更改文件权限
    chmod [-cfvR] [--help] [--version] mode file...
    u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。
    + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。
    r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。
    其他参数说明：
    -c : 若该文件权限确实已经更改，才显示其更改动作
    -f : 若该文件权限无法被更改也不要显示错误讯息
    -v : 显示权限变更的详细资料
    -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)
    --help : 显示辅助说明
    --version : 显示版本
chown    修改文件所有权
    chown [-cfhvR] [--help] [--version] user[:group] file...
    chown 所有者:用户组 file 
    user : 新的文件拥有者的使用者 ID
    group : 新的文件拥有者的使用者组(group)
    -c : 显示更改的部分的信息
    -f : 忽略错误信息
    -h :修复符号链接
    -v : 显示详细的处理信息
    -R : 处理指定目录以及其子目录下的所有文件
    --help : 显示辅助说明
    --version : 显示版本
touch   创建文件  touch filename
&gt;  &gt;&gt;    重定向创建文件
    &gt; filename
    &gt;&gt; filename (当文件不存在时，如果存在则插入已有文件之后)
more    分屏显示一个文本文件的内容
    -s 压缩空白行
    -c 不滚动屏幕而直接刷新屏幕
    -数字 每屏要显示的行数
    空格 显示下一屏   回车 显示下一行     / 查找字符    h 显示帮助   b 显示上一屏  q 退出more命令
vim    vi filename 启动vi编辑器创建文件
    :wq 执行存盘并推出
    ctrl+u 向文首翻半屏
    ctrl+d 向文尾翻半屏
    ctrl+f 向文尾翻一屏
    ctrl+b 向文首翻一屏
    ESC 切换到命令模式
    :行号 跳转到某一行
    :$ 光标跳到最后一行的行首
    x 删除光标后的字符，X 删除光标前的字符
    D 删除从当前光标所在位置到行尾的所有字符
    dd 删除光标所在行
    ndd 删除当前行以及之后的n-1行
    p 将剪切板中的内容粘贴到光标位置下方
    P 将剪切板中的内容粘贴到光标位置上方
    /字符串 从当前光标位置向文件尾查找指定字符串内容
    ?字符串 从当前光标位置向文件首查找指定字符串内容
    a 在当前字符后添加文本
    A 在行末添加文本
    i 在当前字符前添加文本
    I 在行首插入文本
    o 在当前行后面插入一行空行
    O 在当前行前面插入一行空行
    :q 退出vi编辑器
    :q! 强制退出vi编辑器
    :w 强制存盘
    :e文件名 打开并编辑指定名称的文件
ls    显示件文列表
    -a 显示所有文件包括隐藏文件
    -A 显示除.和..之外的所有文件
    -color[=WHEN] 使用不同颜色高亮显示不同类型
    -l 以详细单列格式来显示 （特别的ls -l等同于ll）
    -F 在每个输出的文件后追加文件类型的标识符
    -i 显示文件的i节点信息，每个文件的i节点不同具有唯一性
    -m 用逗号分隔每个文件和目录的名称
    -r 用递归的方法显示文件目录和子目录
less    前后翻页分屏命令
    用pageup  pagedown 翻页  
    q退出
    基本上和more相同
head    查看前几行命令
    head -n 数字 表示要输出的行数
    -c 数字 表示要输出的字符数
tail    查看最后几行
    tail -n 20 查看最后20行
    tail -f file  将文件的增长部分实时输出到屏幕
mv    移动文件
    mv --backup=&lt;备份模式&gt;    覆盖前先备份文件  none   numbered  existing   simple
    -b 文件存在时覆盖前先备份文件
    -f 若重复则直接覆盖掉文件
    -i 覆盖前进行询问
    -S 后缀 为文件指定后缀
    一种特殊应用 重命名文件 mv file1.c file1.cpp
ln    建立同步链接 ln source dest
    -b 删除，覆盖以前建立的链接
    -d 允许超级用户制作目录的硬链接
    -f 强制执行
    -i 交互模式，文件存在则提示用户是否覆盖
    -n 把符号链接视为一般目录
    -s 软链接(符号链接)
    -v 显示详细的处理过程
diff    比较文件  diff file1 file2
    4c4,6  表示第一个文件的第四行，c表示修改，a表示增加，d表示删除。4，6表示第二个文件中的4到6行
    -&lt;行数&gt; 　指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。
    -a或--text 　diff预设只会逐行比较文本文件。
    -b或--ignore-space-change 　不检查空格字符的不同。
    -B或--ignore-blank-lines 　不检查空白行。
    -c 　显示全部内文，并标出不同之处。
    -C&lt;行数&gt;或--context&lt;行数&gt; 　与执行&quot;-c-&lt;行数&gt;&quot;指令相同。
    -d或--minimal 　使用不同的演算法，以较小的单位来做比较。
    -D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt; 　此参数的输出格式可用于前置处理器巨集。
    -e或--ed 　此参数的输出格式可用于ed的script文件。
    -f或-forward-ed 　输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。
    -H或--speed-large-files 　比较大文件时，可加快速度。
    -l&lt;字符或字符串&gt;或--ignore-matching-lines&lt;字符或字符串&gt; 　若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。
    -i或--ignore-case 　不检查大小写的不同。
    -l或--paginate 　将结果交由pr程序来分页。
    -n或--rcs 　将比较结果以RCS的格式来显示。
    -N或--new-file 　在比较目录时，若文件A仅出现在某个目录中，预设会显示：
    Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。
    -p 　若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。
    -P或--unidirectional-new-file 　与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。
    -q或--brief 　仅显示有无差异，不显示详细的信息。
    -r或--recursive 　比较子目录中的文件。
    -s或--report-identical-files 　若没有发现任何差异，仍然显示信息。
    -S&lt;文件&gt;或--starting-file&lt;文件&gt; 　在比较目录时，从指定的文件开始比较。
    -t或--expand-tabs 　在输出时，将tab字符展开。
    -T或--initial-tab 　在每行前面加上tab字符以便对齐。
    -u,-U&lt;列数&gt;或--unified=&lt;列数&gt; 　以合并的方式来显示文件内容的不同。
    -v或--version 　显示版本信息。
    -w或--ignore-all-space 　忽略全部的空格字符。
    -W&lt;宽度&gt;或--width&lt;宽度&gt; 　在使用-y参数时，指定栏宽。
    -x&lt;文件名或目录&gt;或--exclude&lt;文件名或目录&gt; 　不比较选项中所指定的文件或目录。
    -X&lt;文件&gt;或--exclude-from&lt;文件&gt; 　您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件。
    -y或--side-by-side 　以并列的方式显示文件的异同之处。
    --help 　显示帮助。
    --left-column 　在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。
    --suppress-common-lines 　在使用-y参数时，仅显示不同之处
locate    搜索文件
    -b, --basename -- 仅匹配路径名的基本名称
    -c, --count -- 只输出找到的数量
    -d, --database DBPATH -- 使用 DBPATH 指定的数据库，而不是默认数据库 /var/lib/mlocate/mlocate.db
    -e, --existing -- 仅打印当前现有文件的条目
    -1 -- 如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到 的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的 权限资料。
    -0, --null -- 在输出上带有NUL的单独条目
    -S, --statistics -- 不搜索条目，打印有关每个数据库的统计信息
    -q -- 安静模式，不会显示任何错误讯息。
    -P, --nofollow, -H -- 检查文件存在时不要遵循尾随的符号链接
    -l, --limit, -n LIMIT -- 将输出（或计数）限制为LIMIT个条目
    -n -- 至多显示 n个输出。
    -m, --mmap -- 被忽略，为了向后兼容
    -r, --regexp REGEXP -- 使用基本正则表达式
    --regex -- 使用扩展正则表达式
    -q, --quiet -- 安静模式，不会显示任何错误讯息
    -s, --stdio -- 被忽略，为了向后兼容
    -o -- 指定资料库存的名称。
    -h, --help -- 显示帮助
    -i, --ignore-case -- 忽略大小写
    -V, --version -- 显示版本信息
whereis    按类型搜索文件
    -b 只搜索二进制文件
    -m 指定whereis命令搜索命令手册
    -s 搜索源代码文件
    这三者大写后加目录，表示在对应目录中实现这三红功能
    -u 查找不包含指定类型的文件
which    搜索二进制文件
    通常用来搜索命令的位置 which python3
find    全功能搜索
    find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。
    expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。
    -mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件
    -amin n : 在过去 n 分钟内被读取过
    -anewer file : 比文件 file 更晚被读取过的文件
    -atime n : 在过去n天内被读取过的文件
    -cmin n : 在过去 n 分钟内被修改过
    -cnewer file :比文件 file 更新的文件
    -ctime n : 在过去n天内被修改过的文件
    -empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name
    -ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写
    -name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写
    -size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。
    -type c : 文件类型是 c 的文件。
    d: 目录
    c: 字型装置文件
    b: 区块装置文件
    p: 具名贮列
    f: 一般文件
    l: 符号连结
    s: socket
    -pid n : process id 是 n 的文件
grep    检索文本内容
    -a 或 --text : 不要忽略二进制的数据。
    -A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。
    -b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。
    -B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。
    -c 或 --count : 计算符合样式的列数。
    -C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。
    -d &lt;动作&gt; 或 --directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。
    -e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。
    -E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。
    -f&lt;规则文件&gt; 或 --file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。
    -F 或 --fixed-regexp : 将样式视为固定字符串的列表。
    -G 或 --basic-regexp : 将样式视为普通的表示法来使用。
    -h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。
    -H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。
    -i 或 --ignore-case : 忽略字符大小写的差别。
    -l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。
    -L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。
    -n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。
    -o 或 --only-matching : 只显示匹配PATTERN 部分。
    -q 或 --quiet或--silent : 不显示任何信息。
    -r 或 --recursive : 此参数的效果和指定&quot;-d recurse&quot;参数相同。
    -s 或 --no-messages : 不显示错误信息。
    -v 或 --invert-match : 显示不包含匹配文本的所有行。
    -V 或 --version : 显示版本信息。
    -w 或 --word-regexp : 只显示全字符合的列。
    -x --line-regexp : 只显示全列符合的列。
    -y : 此参数的效果和指定&quot;-i&quot;参数相同
grep中的正则表达式
    ^ 匹配行首
    $ 匹配行尾
    []or[n-n] 匹配方括号内的任意字符
    . 匹配任意的单字符
    * 跟在某个字符后面，表示匹配0个或多个前面的字符
    \ 用来屏蔽元字符的特殊含义
    \? 匹配前面的字符0次或一次
    \+ 匹配前面的字符一次或多次
    X\&#123;m\&#125; 匹配X字符m次
    X\&#123;m,\&#125; 匹配X字符至少m次
    X\&#123;m,n\&#125; 匹配X字符m~n次
    \| 表示或的关系
sort    对文件内容进行排序
    -b 忽略每行前面开始出的空格字符。
    -c 检查文件是否已经按照顺序排序。
    -d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。
    -f 排序时，将小写字母视为大写字母。
    -i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。
    -m 将几个排序好的文件进行合并。
    -M 将前面3个字母依照月份的缩写进行排序。
    -n 依照数值的大小排序。
    -u 意味着是唯一的(unique)，输出的结果是去完重了的。
    -o&lt;输出文件&gt; 将排序后的结果存入指定的文件。
    -r 以相反的顺序来排序。
    -t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。
    +&lt;起始栏位&gt;-&lt;结束栏位&gt; 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。
    --help 显示帮助。
    --version 显示版本信息。
zip    压缩文件
    -A 调整可执行的自动解压缩文件。
    -b&lt;工作目录&gt; 指定暂时存放文件的目录。
    -c 替每个被压缩的文件加上注释。
    -d 从压缩文件内删除指定的文件。
    -D 压缩文件内不建立目录名称。
    -f 更新现有的文件。
    -F 尝试修复已损坏的压缩文件。
    -g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。
    -h 在线帮助。
    -i&lt;范本样式&gt; 只压缩符合条件的文件。
    -j 只保存文件名称及其内容，而不存放任何目录名称。
    -J 删除压缩文件前面不必要的数据。
    -k 使用MS-DOS兼容格式的文件名称。
    -l 压缩文件时，把LF字符置换成LF+CR字符。
    -ll 压缩文件时，把LF+CR字符置换成LF字符。
    -L 显示版权信息。
    -m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。
    -n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。
    -o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。
    -q 不显示指令执行过程。
    -r 递归处理，将指定目录下的所有文件和子目录一并处理。
    -S 包含系统和隐藏文件。
    -t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。
    -T 检查备份文件内的每个文件是否正确无误。
    -u 与 -f 参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。
    -v 显示指令执行过程或显示版本信息。
    -V 保存VMS操作系统的文件属性。
    -w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。
    -x&lt;范本样式&gt; 压缩时排除符合条件的文件。
    -X 不保存额外的文件属性。
    -y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。
    -z 替压缩文件加上注释。
    -$ 保存第一个被压缩文件所在磁盘的卷册名称。
    -&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。
gzip    压缩文件
    -a或--ascii 　使用ASCII文字模式。
    -c或--stdout或--to-stdout 　把压缩后的文件输出到标准输出设备，不去更动原始文件。
    -d或--decompress或----uncompress 　解开压缩文件。
    -f或--force 　强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。
    -h或--help 　在线帮助。
    -l或--list 　列出压缩文件的相关信息。
    -L或--license 　显示版本与版权信息。
    -n或--no-name 　压缩文件时，不保存原来的文件名称及时间戳记。
    -N或--name 　压缩文件时，保存原来的文件名称及时间戳记。
    -q或--quiet 　不显示警告信息。
    -r或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。
    -S&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt; 　更改压缩字尾字符串。
    -t或--test 　测试压缩文件是否正确无误。
    -v或--verbose 　显示指令执行过程。
    -V或--version 　显示版本信息。
    -&lt;压缩效率&gt; 　压缩效率是一个介于1－9的数值，预设值为&quot;6&quot;，指定愈大的数值，压缩效率就会愈高。
    --best 　此参数的效果和指定&quot;-9&quot;参数相同。
    --fast 　此参数的效果和指定&quot;-1&quot;参数相同
compress压缩文件
    c 输出结果至标准输出设备（一般指荧幕）
    f 强迫写入档案，若目的档已经存在，则会被覆盖 (force)
    v 将程序执行的讯息印在荧幕上 (verbose)
    b 设定共同字串数的上限，以位元计算，可以设定的值为 9 至 16 bits 。由于值越大，能使用的共同字串就 越多，压缩比例就越大，所以一般使用预设值 16 bits (bits)
    d 将压缩档解压缩
    V 列出版本讯息
bzip2    压缩文件
    -c或--stdout 　将压缩与解压缩的结果送到标准输出。
    -d或--decompress 　执行解压缩。
    -f或--force 　bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖，请使用此参数。
    -h或--help 　显示帮助。
    -k或--keep 　bzip2在压缩或解压缩后，会删除原始的文件。若要保留原始文件，请使用此参数。
    -s或--small 　降低程序执行时内存的使用量。
    -t或--test 　测试.bz2压缩文件的完整性。
    -v或--verbose 　压缩或解压缩文件时，显示详细的信息。
    -z或--compress 　强制执行压缩。
    -L,--license,
    -V或--version 　显示版本信息。
    --repetitive-best 　若文件中有重复出现的资料时，可利用此参数提高压缩效果。
    --repetitive-fast 　若文件中有重复出现的资料时，可利用此参数加快执行速度。
    -压缩等级 　压缩时的区块大小。
pwd    显示当前目录
cd    切换目录
    - 表示两个目录之间来回切换
    -P 如果目标是符号链接，直接切换到目标目录
    -L 如果目录是一个符号的链接，切换到字符连接名代表的目录
useradd 添加用户
    useradd -D [-b][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;]
    -c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。
    -d&lt;登入目录&gt; 　指定用户登入时的起始目录。
    -D 　变更预设值．
    -e&lt;有效期限&gt; 　指定帐号的有效期限。
    -f&lt;缓冲天数&gt; 　指定在密码过期后多少天即关闭该帐号。
    -g&lt;群组&gt; 　指定用户所属的群组。
    -G&lt;群组&gt; 　指定用户所属的附加群组。
    -m 　自动建立用户的登入目录。
    -M 　不要自动建立用户的登入目录。
    -n 　取消建立以用户名称为名的群组．
    -r 　建立系统帐号。
    -s&lt;shell&gt;　 　指定用户登入后所使用的shell。
    -u&lt;uid&gt; 　指定用户ID。
adduser 添加用户 
    adduser [-c comment] [-d home_dir] [-e expire_date] [-f inactive_time] [-g initial_group] [-G group[,...]] [-m [-k skeleton_dir] | -M] [-p passwd] [-s shell] [-u uid [ -o]] [-n] [-r] loginid
    -c comment 新使用者位于密码档（通常是 /etc/passwd）的注解资料
    -d home_dir 设定使用者的家目录为 home_dir ，预设值为预设的 home 后面加上使用者帐号 loginid
    -e expire_date 设定此帐号的使用期限（格式为 YYYY-MM-DD），预设值为永久有效
    -f inactive_time 范例：
    --disabled-login 不为新用户设置密码，意味用户不能登陆系统
    --disabled-passwd 不能使用密码认证，但可通过其他方式认证例如RSA密钥
    --gid 指定用户组的标识号
    --group 创建一个用户组
    --home 指定用户的主目录，若不存在会自动创建
    --shell 指定默认的shell程序
    --ingroup 指定用户所属的主组
    --system 创建一个系统账户
    --no-create-home 不创建用户主目录
    --uid 指定用户的用户标识号
    --aid_extra_groups 指定用户的附加用户组
usermmod 
    修改用户 usermod [-LU][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-l &lt;帐号名称&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]
    -c&lt;备注&gt; 　修改用户帐号的备注文字。
    -d登入目录&gt; 　修改用户登入时的目录。
    -e&lt;有效期限&gt; 　修改帐号的有效期限。
    -f&lt;缓冲天数&gt; 　修改在密码过期后多少天即关闭该帐号。
    -g&lt;群组&gt; 　修改用户所属的群组。
    -G&lt;群组&gt; 　修改用户所属的附加群组。
    -l&lt;帐号名称&gt; 　修改用户帐号名称。
    -L 　锁定用户密码，使密码无效。
    -s&lt;shell&gt; 　修改用户登入后所使用的shell。
    -u&lt;uid&gt; 　修改用户ID。
    -U 　解除密码锁定 将移除用户加密密码之前的感叹号
userdel    删除用户 
    userdel [-r][用户帐号]
    -r 　删除用户登入目录以及目录中所有文件。
passwd    修改用户密码
    passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]
    -d 删除密码
    -f 强迫用户下次登录时必须修改口令
    -w 口令要到期提前警告的天数
    -k 更新只能发送在过期之后
    -l 停止账号使用
    -S 显示密码信息
    -u 启用已被停止的账户
    -x 指定口令最长存活期
    -g 修改群组密码
    指定口令最短存活期
    -i 口令过期后多少天停用账户
id    显示用户信息
    id [-gGnru][--help][--version][用户名称]
    -g或--group 　显示用户所属群组的ID。
    -G或--groups 　显示用户所属附加群组的ID。
    -n或--name 　显示用户，所属群组或附加群组的名称。
    -r或--real 　显示实际ID。
    -u或--user 　显示用户ID。
    -help 　显示帮助。
    -version 　显示版本信息
sudo    受限的特权命令 5分钟内以root身份工作
    -V 显示版本编号
    -h 会显示版本编号及指令的使用方式说明
    -l 显示出自己（执行 sudo 的使用者）的权限
    -v 因为 sudo 在第一次执行时或是在 N 分钟内没有执行（N 预设为五）会问密码，这个参数是重新做一次确认，如果超过 N 分钟，也会问密码
    -k 将会强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）
    -b 将要执行的指令放在背景执行
    -p prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称， %h 会显示主机名称
    -u username/#uid 不加此参数，代表要以 root 的身份执行指令，而加了此参数，可以以 username 的身份执行指令（#uid 为该 username 的使用者号码）
    -s 执行环境变数中的 SHELL 所指定的 shell ，或是 /etc/passwd 里所指定的 shell
    -H 将环境变数中的 HOME （家目录）指定为要变更身份的使用者家目录（如不加 -u 参数就是系统管理者 root ）
    command 要以系统管理者身份（或以 -u 更改为其他人）执行的指令
groupadd添加用户组
    -g：指定新建工作组的 id；
    -r：创建系统工作组，系统工作组的组ID小于 500；
    -K：覆盖配置文件 &quot;/ect/login.defs&quot;；
    -o：允许添加组 ID 号不唯一的工作组。
    -f,--force: 如果指定的组已经存在，此选项将失明了仅以成功状态退出。
        当与 -g 一起使用，并且指定的GID_MIN已经存在时，选择另一个唯一的GID（即-g关闭）。
addgroup是adduser的符号链接
    addgroup 组名
groupmod 修改用户组
    groupmod [-g &lt;群组识别码&gt; &lt;-o&gt;][-n &lt;新群组名称&gt;][群组名称]
    -g &lt;群组识别码&gt; 　设置欲使用的群组识别码。
    -o 　重复使用群组识别码。
    -n &lt;新群组名称&gt; 　设置欲使用的群组名称。
groupdel 删除1111111户组
    groupdel 组名
acl的语法规则
    [d[efault]:] u[ser]:uid [:perms]
    [d[efault]:] g[roup]:gid [:perms]
    [d[efault]:] m[ask][:] [:perms]
    [d[efault]:] o[ther] [:perms]
    perm为权限列表  u:joe:rwx  用户joe具有读写执行权限
chgrp    改变文件所属组
    chgrp [-cfhRv][--help][--version][所属群组][文件或目录...] 
    或 chgrp [-cfhRv][--help][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]
    -c或--changes 效果类似&quot;-v&quot;参数，但仅回报更改的部分。
    -f或--quiet或--silent 　不显示错误信息。
    -h或--no-dereference 　只对符号连接的文件作修改，而不更动其他任何相关文件。
    -R或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。
    -v或--verbose 　显示指令执行过程。
    --help 　在线帮助。
    --reference=&lt;参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。
    --version 　显示版本信息。
unmask    设置权限掩码
    对新建文件设置默认权限值 用666减去设置的掩码
    对于目录而言 用777减去设置的掩码
    -S 使掩码以字符形式显示
    unmask 244 
setfacl    修改文件的ACL
    setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...
    -m, --modify=acl 更改文件的访问控制列表
    -M, --modify-file=file 从文件读取访问控制列表条目更改
    -x, --remove=acl 根据文件中访问控制列表移除条目
    -X, --remove-file=file 从文件读取访问控制列表条目并删除
    -b, --remove-all 删除所有扩展访问控制列表条目
    -k, --remove-default 移除默认访问控制列表
    --set=acl 设定替换当前的文件访问控制列表
    --set-file=file 从文件中读取访问控制列表条目设定
    --mask 重新计算有效权限掩码
    -n, --no-mask 不重新计算有效权限掩码
    -d, --default 应用到默认访问控制列表的操作
    -R, --recursive 递归操作子目录
    -L, --logical 依照系统逻辑，跟随符号链接
    -P, --physical 依照自然逻辑，不跟随符号链接
    --restore=file 恢复访问控制列表，和“getfacl -R”作用相反
    --test 测试模式，并不真正修改访问控制列表属性
    -v, --version           显示版本并退出
    -h, --help              显示本帮助信息
getfacl    查询文件的ACL
    getfacl  [-aceEsRLPtpndvh]  文件 ...
    -a,  --access           仅显示文件访问控制列表
    -d, --default           仅显示默认的访问控制列表
    -c, --omit-header     不显示注释表头
    -e, --all-effective     显示所有的有效权限
    -E, --no-effective      显示无效权限
    -s, --skip-base         跳过只有基条目(base entries)的文件
    -R, --recursive         递归显示子目录
    -L, --logical           逻辑遍历(跟随符号链接)
    -P, --physical          物理遍历(不跟随符号链接)
    -t, --tabular           使用制表符分隔的输出格式
    -n, --numeric           显示数字的用户/组标识
    -p, --absolute-names    不去除路径前的 &#39;/&#39; 符号
    -v, --version           显示版本并退出
    -h, --help              显示本帮助信息
shutdown关闭系统
    -t seconds : 设定在几秒钟之后进行关机程序。
    -k : 并不会真的关机，只是将警告讯息传送给所有使用者。
    -r : 关机后重新开机。
    -h : 关机后停机。
    -n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。
    -c : 取消目前已经进行中的关机动作。
    -f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。
    -F : 关机时，强迫进行 fsck 动作。
    time : 设定关机的时间。
    message : 传送给所有使用者的警告讯息。
init 0 关闭各项进程后关闭系统
</code></pre>
<p>进阶命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">程序引导</span><br><span class="line">	一、指定/boot所在的分区</span><br><span class="line">	复制代码 代码如下:grub&gt; root (hd0,0)   </span><br><span class="line">	<span class="comment">#指定第一块硬盘的第一个分区。这个root (hd[0,n],y)是可以省略的，如果省略了，我们要在kerenl 命令中指定</span></span><br><span class="line">	二、指定内核映像及根分区</span><br><span class="line">	复制代码 代码如下:grub&gt; kernel /boot/vmlinuz-2.6.11-1.1369_FC4 ro root=LABEL=/</span><br><span class="line">	<span class="comment"># kernel 指令，用来指定Linux的内核，及/所在的分区</span></span><br><span class="line">	三、指定initrd.img</span><br><span class="line">	复制代码 代码如下:grub&gt; initrd /boot/initrd-2.6.11-1.1369_FC4.img</span><br><span class="line">	<span class="comment"># initrd 命令行来指定initrd文件</span></span><br><span class="line">	四、启动</span><br><span class="line">	复制代码 代码如下:grub&gt;boot</span><br><span class="line">	<span class="comment">#输入boot，然后敲回车就可以了</span></span><br><span class="line">	五、通过GRUB指令来引导Windows</span><br><span class="line">	如果我们启动Windows ，只是输入指令就行了；</span><br><span class="line">	比如 Windows的分区在 (hd0,0)，我们在开机后，按ctrl+c ，进入GRUB的命令模式；就可以用下面的</span><br><span class="line">	复制代码 代码如下:</span><br><span class="line">	grub&gt; rootnoverify (hd0,0)</span><br><span class="line">	grub&gt; chainloader +1</span><br><span class="line">	grub&gt; boot</span><br><span class="line">grub 启动命令</span><br><span class="line">	一、菜单命令</span><br><span class="line">	菜单命令只能用于grub配置文件的全局配置部分，不能用在grub命令行交互界面，菜单命令在配置文件中应放在其它命令之前。</span><br><span class="line">	1、default  //设置默认启动的菜单项</span><br><span class="line">	2、fallback  //设置启动某菜单项失败后反回的菜单项</span><br><span class="line">	3、hiddenmenu //隐藏菜单界面</span><br><span class="line">	4、timeout //设置菜单自动启动的延时时间</span><br><span class="line">	5、title  //开始一个菜单项</span><br><span class="line">	二、常规命令</span><br><span class="line">	常规命令可以应该于配置文件和grub命令行交互界面，可使用的常规命令有</span><br><span class="line">	1、bootp //通过bootp初始化网络设备</span><br><span class="line">	2、color //设置菜单界面的颜色</span><br><span class="line">	3、device //指定设备文件作为驱动器</span><br><span class="line">	4、dhcp //通过DHCP初始化网络设备</span><br><span class="line">	5、hide  //隐藏某分区</span><br><span class="line">	6、ifconfig //手工配置网络设备</span><br><span class="line">	7、pager //改变内部页程序的状态</span><br><span class="line">	8、partnew //新建一个主分区</span><br><span class="line">	9、parttype //改变分区的类型</span><br><span class="line">	10、password 为菜单界面设置口令</span><br><span class="line">	11、rarp //通过RARP初始化网络设置</span><br><span class="line">	12、serial //设置串口设备</span><br><span class="line">	13、setkey //设置键盘映射</span><br><span class="line">	14、splashimage //设置GRUB启动时的背景图片文件</span><br><span class="line">	15、termainal //选择终端类型</span><br><span class="line">	16、tftpserver //指定TFTP服务器</span><br><span class="line">	17、unhide //还原某隐藏分区</span><br><span class="line">	三、命令行和菜单项命令</span><br><span class="line">	命令行和菜单项命令可应该于GRUB配置文件的菜单项设置中，也可以用在GRUB命令交互界面。</span><br><span class="line">	1、bolcklist //显示某文件所在分区位置（block list notation）</span><br><span class="line">	2、boot //启动操作系统</span><br><span class="line">	3、cat //显示文件内容</span><br><span class="line">	4、chainloader //把启动控制权软交给另外的启动引导器</span><br><span class="line">	5、cmp //比较两个文件</span><br><span class="line">	6、configfile //加载已存在的GRUB配置文件</span><br><span class="line">	7、debug //设置为debug模式</span><br><span class="line">	8、displayapm //显示APM BIOS信息</span><br><span class="line">	9、displaymem //显示内存配置</span><br><span class="line">	10、embed //嵌入Stage 1.5文件</span><br><span class="line">menuentry定义菜单</span><br><span class="line">	menuentry <span class="string">&quot;title&quot;</span> [--class=class ...] [--users=users] [--usrestricted] [--hotkey=key] [--id=id] [arg ...] &#123;<span class="built_in">command</span>; ...&#125;</span><br><span class="line">submenu	定义二级菜单</span><br><span class="line">	submenu <span class="string">&#x27;title&#x27;</span> --id=id&#123;</span><br><span class="line">	menuentry <span class="string">&#x27;title&#x27;</span> --class=class --id=id&#123;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">	menuentry <span class="string">&#x27;title&#x27;</span> --class=class --id=id&#123;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">systemctl列出单元</span><br><span class="line">	-t 指定要列出的单元类型，多个类型之间用逗号隔开</span><br><span class="line">	--state 指定要列出单元的LOAD，SUB，以及ACTIVE状态，多个状态之间用逗号隔开</span><br><span class="line">	-a 列出所有单元</span><br><span class="line">	status 进程ID</span><br><span class="line">		可显示单元的而状态</span><br><span class="line">		如果无参数可查看systemd的运行状态</span><br><span class="line">	list-dependencies 单元名称</span><br><span class="line">		显示单元的依赖关系</span><br><span class="line">	list-unit-files </span><br><span class="line">		查看系统中的单元文件</span><br><span class="line">		--<span class="built_in">type</span>=状态 进行筛选</span><br><span class="line">	状态</span><br><span class="line">		enabled 已启用(已建立启动符号链接)</span><br><span class="line">		disabled 未启用</span><br><span class="line">		static 无法自己执行，只能作为其他配置文件的依赖项</span><br><span class="line">		masked 被禁止建立符号链接，即完全被禁用</span><br><span class="line">		generated 该单元文件由其他的API动态创建</span><br><span class="line">		bad 无效的单元文件</span><br><span class="line">		indirect 本身没有启用，但部分配置了Also选项</span><br><span class="line">	单元管理</span><br><span class="line">		启动服务</span><br><span class="line">			sudo systemctl start mysql</span><br><span class="line">			sudo systemctl start mysql.service</span><br><span class="line">			sudo systemctl start apt-daily.timer</span><br><span class="line">			也可同时启用多个服务,也可采用通配符</span><br><span class="line">			sudo systemctl start mysql apt-daily.timer</span><br><span class="line">		停止服务</span><br><span class="line">			sudo systemctl stop mysql</span><br><span class="line">		重启服务</span><br><span class="line">			sudo systemctl restart mysql</span><br><span class="line">		重载服务配置文件</span><br><span class="line">			sudo systemctl reload apache2</span><br><span class="line">		查看服务状态</span><br><span class="line">			sudo systemctl status apache2</span><br><span class="line">			若第一行为黑点则已停止，为绿点则在运行</span><br><span class="line">		配置服务自启动</span><br><span class="line">			sudo systemctl <span class="built_in">enable</span> apache2</span><br><span class="line">		禁止服务自启动</span><br><span class="line">			sudo systemctl <span class="built_in">disable</span> apache2</span><br><span class="line">		重载所有单元配置文件（被修改后）</span><br><span class="line">			sudo systemctl daemon-reload</span><br><span class="line">	show 显示服务器属性</span><br><span class="line">		--property=属性  进行筛选</span><br><span class="line">	设置服务属性</span><br><span class="line">		sudo systemctl set-property apache2.serviceMemoryLimit=500M</span><br><span class="line">systemd-aalyze 分析系统启动时的性能</span><br><span class="line">	--user 在用户级别上查询systemd实例</span><br><span class="line">	--system 在系统级别查询systemd实例</span><br><span class="line">	子命令</span><br><span class="line">		time 输出系统启动时间</span><br><span class="line">		blame 按照占用时间长短的顺序输出正在运行的单元，用以优化系统，缩短启动时间</span><br><span class="line">		critical-chain 以树状形式输出单元的启动连，用红色标注延时较长的单元</span><br><span class="line">		plot 以SVG图像格式输出服务在什么时间启动并用了多少时间</span><br><span class="line">		dot 输出单元依赖图</span><br><span class="line">			systemd-analyze dot | dot -Tsvg &gt; systtemd.svg</span><br><span class="line">		dump 输出详细的，可读的服务状态</span><br><span class="line">hostnamectl 查看修改主机名</span><br><span class="line">	修改 sudo hostnamectl set-hostname ubuntu-server</span><br><span class="line">localectl 查看修改系统的区域和键盘布局</span><br><span class="line">	sudo localectl set-locale LANG=en.GB.UTF-8</span><br><span class="line">timedatectl 查看或修改当前系统的时区设置</span><br><span class="line">	sudo timedatectl set-timezone Ameriica/New_York</span><br><span class="line">loginctl 用以查看当前登录的用户</span><br><span class="line">	list-users 列出当前系统的用户及其ID</span><br><span class="line">	show-user 用户名  展示某个用户的详细信息</span><br><span class="line">查看目标</span><br><span class="line">	systemctl list-units --<span class="built_in">type</span>=target</span><br><span class="line">	查看目标的依赖，及其所包含的单元</span><br><span class="line">	systemctl list-dependencies *.target</span><br><span class="line">	黑色未启动，绿色已启动</span><br><span class="line">	systemd的目标是可以并行的</span><br><span class="line">切换目标</span><br><span class="line">	systemctl isolate rescue.target</span><br><span class="line">	注意:使用该命令启动单元时，单元文件中必须有AllowIsolate选项</span><br><span class="line">默认目标</span><br><span class="line">	systemctl get-default    获取当前的默认目标</span><br><span class="line">	sudo systemctl set-default multi-user.target 将目标设置为multi-user.target</span><br><span class="line">	此时系统启动默认进入多用户的命令行模式</span><br><span class="line">journalctl 读取日志</span><br><span class="line">	-a 以完整格式显示日志</span><br><span class="line">	-f 实时动态显示最新日志</span><br><span class="line">	-n 显示指定行数的日志</span><br><span class="line">	-r 按时间逆序显示日志</span><br><span class="line">	-o 指定输出格式 可以为short short-full <span class="built_in">export</span> json json-pretty</span><br><span class="line">	-b 查看系统本次启动的日志</span><br><span class="line">	-k 仅仅查看内核日志</span><br><span class="line">	-u 限制显示某个单元的日志 </span><br><span class="line">	-S -U 通过时间限制日志范围</span><br><span class="line">	--since=<span class="string">&quot;2017-08-09 14:00:00&quot;</span> 只显示2017年8月9日14点之后的日志</span><br><span class="line">		也可用20 minutes ago           today      yesterday等限制</span><br><span class="line">	日志大小限制</span><br><span class="line">		--disk-usage  查看占用空间</span><br><span class="line">		SystemMaxUse=2G 将日志最大占容设为2G</span><br><span class="line">	清理日志</span><br><span class="line">		--vacuum-size=500M  将内存占用大小设为500M</span><br><span class="line">		--vacuum-time=2weeks 清除两周前的日志</span><br><span class="line">		--vacuum-files</span><br><span class="line">ps	列出当前的进程信息</span><br><span class="line">	-a 显示所有活动进程的当前状态</span><br><span class="line">	-A 列出所有的进程的状态 等同于-e</span><br><span class="line">	-w 显示加宽可以显示较多的资讯</span><br><span class="line">	-f 显示每个进程的完整信息</span><br><span class="line">	-l 显示每个进程的详细信息，起始时间除外</span><br><span class="line">	-g 显示与指定用户组ID或组名相关联的进程</span><br><span class="line">	-p 显式指定进程ID的进程信息</span><br><span class="line">	-u 显示与指定用户ID或用户名相关联的进程</span><br><span class="line">	-au 显示较详细的资讯</span><br><span class="line">	-aux 显示所有包含其他使用者的行程</span><br><span class="line">	au(x) 输出格式 :</span><br><span class="line">		USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">		USER: 行程拥有者</span><br><span class="line">		%CPU: 占用的 CPU 使用率</span><br><span class="line">		%MEM: 占用的记忆体使用率</span><br><span class="line">		VSZ: 占用的虚拟记忆体大小</span><br><span class="line">		RSS: 占用的记忆体大小</span><br><span class="line">		TTY: 终端的次要装置号码 (minor device number of tty)</span><br><span class="line">		STAT: 该行程的状态:</span><br><span class="line">			D: 无法中断的休眠状态 (通常 IO 的进程)</span><br><span class="line">			R: 正在执行中</span><br><span class="line">			S: 静止状态</span><br><span class="line">			T: 暂停执行</span><br><span class="line">			Z: 不存在但暂时无法消除</span><br><span class="line">			W: 没有足够的记忆体分页可分配</span><br><span class="line">			&lt;: 高优先序的行程</span><br><span class="line">			N: 低优先序的行程</span><br><span class="line">			L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</span><br><span class="line">		START: 行程开始时间</span><br><span class="line">		TIME: 执行的时间</span><br><span class="line">		COMMAND:所执行的指令</span><br><span class="line">		WCHAN进程所等待时间的内存地址</span><br><span class="line">		SZ 虚拟内存用量</span><br><span class="line">		F  标识 1为已创建但尚未执行，4为得到超级用户权限的进程</span><br><span class="line">		s进程状态码。</span><br><span class="line">			S表示因等待某一时间而处于休眠状态,进程可以中断;</span><br><span class="line">			D表示进程处于眠状态,但是不能中断;</span><br><span class="line">			R表示进程正在运行;</span><br><span class="line">			X表示进程已经终止;</span><br><span class="line">			Z表示僵尸进程</span><br><span class="line">		UID	进程所有者的有效用户ID</span><br><span class="line">		PID	进程的进程ID</span><br><span class="line">		PPID	父进程的进程ID</span><br><span class="line">		C	进程生命周期的CPU的利用率(百分比),即进程实际利用CPU的时间除以进程整个生命周期的时长</span><br><span class="line">		STIME	进程的起始运行的时间。如果起始时间位于24小时以内,则以HHMM的形式表示;如果超过了24小时,则以 MmmDD的形式表示其中Mmm表示月份,DD表示天</span><br><span class="line">		TTY	控制终端。表示进程从哪个终端上运行。如果该字段的值为问号?,则表示该进程与任何的终端无关</span><br><span class="line">		TIME	进程迄今累计占用的CPU时间的总和,以Dd-jhh:mm:ss的形式表示</span><br><span class="line">		CMD	进程对应的程序或者命令的名称</span><br><span class="line">		PRI	进程优先级,数值越大,表示进程的优先级越低</span><br><span class="line">		NI	进程优先级的nice调整值,其范围为-20~1,用于调整进程的优先级</span><br><span class="line">		ADDR	进程的内存地址</span><br><span class="line">pstree 树状形式显示进程之间的调用关系</span><br><span class="line">	-p 显示进程ID</span><br><span class="line">top 实时监控进程</span><br><span class="line">	-d 更改刷新时间间隔，单位为秒</span><br><span class="line">	界面内</span><br><span class="line">		b反相展示状态为R的进程</span><br><span class="line">		x反相展示排序字段</span><br><span class="line">		<span class="built_in">shift</span> &gt; 向右改变排序字段</span><br><span class="line">		f 切换到字段管理视图，</span><br><span class="line">			按空格添加或取消字段</span><br><span class="line">			按s使主界面中的字段按此顺序排列</span><br><span class="line">			后用esc 回到主界面</span><br><span class="line">	q 退出top主界面</span><br><span class="line">	U1命令输出结果的字段含义</span><br><span class="line">	PID	进程ID</span><br><span class="line">	USER	进程所有者</span><br><span class="line">	PR	进程优先级</span><br><span class="line">	NI	进程优先级的nice调整值,其范围为-20~1,用于调整进程的优先级</span><br><span class="line">	VIRT	进程使用的虚拟内存的数量</span><br><span class="line">	RES	进程占用的基本物理内存的数量</span><br><span class="line">	SHR	进程占用的共享内存的数量</span><br><span class="line">	S	进程当前的状态,可以取D、R、S、T或者Z等值</span><br><span class="line">		在top命令中,字段S表示进程的状态S字段可以是以下值:</span><br><span class="line">		●D:进程处于不可中断的休眠状态。</span><br><span class="line">		●R:进程已经运行,或者已经处于运行队列,一旦调度即可运行。</span><br><span class="line">		●S:进程因等待外部事件的完成而处于休眠状态。</span><br><span class="line">		●T:进程因跟踪调试或者因收到某个信号而暂时停止运行。</span><br><span class="line">		●Z:进程已经终止,但是其父进程未完成善后工作。</span><br><span class="line">	%CPU	进程占用CPU的百分比。默认情况下,tp命令据此降序排列进程</span><br><span class="line">	%MEM	进程占用物理内存的百分比</span><br><span class="line">	TIME+	进程累计占用的CPU时间</span><br><span class="line">	COMMAND	进程所执行的命令</span><br><span class="line"><span class="built_in">kill</span> 终止进程</span><br><span class="line">	<span class="built_in">kill</span> [-s &lt;信息名称或编号&gt;][程序]　或　<span class="built_in">kill</span> [-l &lt;信息编号&gt;]</span><br><span class="line">	-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则 -l 参数会列出全部的信息名称。</span><br><span class="line">	-s &lt;信息名称或编号&gt; 　指定要送出的信息。</span><br><span class="line">	[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</span><br><span class="line">	使用 <span class="built_in">kill</span> -l 命令列出所有可用信号。</span><br><span class="line">	最常用的信号是：</span><br><span class="line">	1 (HUP)：重新加载进程。</span><br><span class="line">	9 (KILL)：杀死一个进程。</span><br><span class="line">	15 (TERM)：正常停止一个进程。</span><br><span class="line">nice 调整进程优先级</span><br><span class="line">	-n 数字    范围 root为-20~19 普通用户为0~19   默认值为10</span><br><span class="line">renice 对正在进行的程序调整nice值</span><br><span class="line">	renice [优先等级][-g&lt;程序群组名称&gt;...][-p&lt;程序识别码&gt;...][-u &lt;用户名称&gt;...]</span><br><span class="line">	renice -5 -p 5200  <span class="comment">#将PID为5200的进程的niceness设为-5</span></span><br><span class="line">	renice -5 -u xie   <span class="comment">#将属于用户xie的进程的niceness设为-5</span></span><br><span class="line">	renice -5 -g group1 <span class="comment">#将属于group1组的程序的niceness设为-5</span></span><br><span class="line">apt-cache [<span class="built_in">command</span>] （单独的）</span><br><span class="line">	showpkg 查看软件包的信息</span><br><span class="line">	search 搜索某个软件包</span><br><span class="line">	depends 显示软件包的依赖关系</span><br><span class="line">apt-get [options] [<span class="built_in">command</span>] 管理软件包</span><br><span class="line">	options </span><br><span class="line">		-c 指定apt-get命令使用的，除默认的配置文件之外的配置文件</span><br><span class="line">		-y 对于需要确认的请求，总用yes回答</span><br><span class="line">		--no-download 禁止下载软件包</span><br><span class="line">		--download-only 仅仅下载软件包，不解压和安装</span><br><span class="line">		--purge 清除软件包,与remove子命令配合使用，，等同于purge子命令</span><br><span class="line">		--reinstall 重新安装已经安装过的软件包</span><br><span class="line">		--allow-unauthenticated 允许安装未认证的软件包</span><br><span class="line">		--no-remove 禁止删除软件包</span><br><span class="line">		--no-upgrade 禁止升级软件包</span><br><span class="line">	<span class="built_in">command</span></span><br><span class="line">		install 安装一个或多个软件包</span><br><span class="line">		update 同步软件仓库的软件包的索引</span><br><span class="line">		upgrade 升级软件包</span><br><span class="line">		remove 删除一个或多个软件包</span><br><span class="line">		autoremove 删除一个或多个软件包，并自动处理依赖关系</span><br><span class="line">		purge 彻底清除某个软件包，包含其配置文件</span><br><span class="line">		check 检查apt缓冲区，判断其依赖包是否存在</span><br><span class="line">		clean 清除apt本地缓存</span><br><span class="line">apt 管理软件包</span><br><span class="line">	<span class="built_in">command</span></span><br><span class="line">		update 同步软件仓库的软件包的索引</span><br><span class="line">		upgrade 升级软件包但不删除软件包</span><br><span class="line">		full-upgrade 升级安装包，同时安装或删除其他的软件包以解决依赖关系</span><br><span class="line">		remove 删除一个或多个软件包</span><br><span class="line">		install 安装软件包</span><br><span class="line">		autoremove 删除一个或多个软件包，并自动处理依赖关系</span><br><span class="line">		purge 彻底清除某个软件包，包含其配置文件</span><br><span class="line">		search 搜索软件包</span><br><span class="line">		show 显示软件包的信息</span><br><span class="line">		list 根据指定的标准列出软件包</span><br><span class="line">			--installe 列出已安装的软件包</span><br><span class="line">			--upgradeable 指定可升级的软件包</span><br><span class="line">aptitude [options] [<span class="built_in">command</span>]  管理软件包</span><br><span class="line">	 install         Install/upgrade packages.</span><br><span class="line">	 remove          Remove packages.</span><br><span class="line">	 purge           Remove packages and their configuration files.</span><br><span class="line">	 hold            Place packages on hold.</span><br><span class="line">	 unhold          Cancel a hold <span class="built_in">command</span> <span class="keyword">for</span> a package.</span><br><span class="line">	 markauto        Mark packages as having been automatically installed.</span><br><span class="line">	 unmarkauto      Mark packages as having been manually installed.</span><br><span class="line">	 forbid-version  Forbid aptitude from upgrading to a specific package version.</span><br><span class="line">	 update          Download lists of new/upgradable packages.</span><br><span class="line">	 safe-upgrade    Perform a safe upgrade.</span><br><span class="line">	 full-upgrade    Perform an upgrade, possibly installing and removing packages.</span><br><span class="line">	 build-dep       Install the build-dependencies of packages.</span><br><span class="line">	 forget-new      Forget what packages are <span class="string">&quot;new&quot;</span>.</span><br><span class="line">	 search          Search <span class="keyword">for</span> a package by name and/or expression.</span><br><span class="line">	 show            Display detailed info about a package.</span><br><span class="line">	 showsrc         Display detailed info about a <span class="built_in">source</span> package (apt wrapper).</span><br><span class="line">	 versions        Displays the versions of specified packages.</span><br><span class="line">	 clean           Erase downloaded package files.</span><br><span class="line">	 autoclean       Erase old downloaded package files.</span><br><span class="line">	 changelog       View a package<span class="string">&#x27;s changelog.</span></span><br><span class="line"><span class="string">	 download        Download the .deb file for a package (apt wrapper).</span></span><br><span class="line"><span class="string">	 source          Download source package (apt wrapper).</span></span><br><span class="line"><span class="string">	 reinstall       Reinstall a currently installed package.</span></span><br><span class="line"><span class="string">	 why             Explain why a particular package should be installed.</span></span><br><span class="line"><span class="string">	 why-not         Explain why a particular package cannot be installed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	 add-user-tag    Add user tag to packages/patterns.</span></span><br><span class="line"><span class="string">	 remove-user-tag Remove user tag from packages/patterns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	Options:</span></span><br><span class="line"><span class="string">	 -h              This help text.</span></span><br><span class="line"><span class="string">	 --no-gui        Do not use the GTK GUI even if available.</span></span><br><span class="line"><span class="string">	 -s              Simulate actions, but do not actually perform them.</span></span><br><span class="line"><span class="string">	 -d              Only download packages, do not install or remove anything.</span></span><br><span class="line"><span class="string">	 -P              Always prompt for confirmation of actions.</span></span><br><span class="line"><span class="string">	 -y              Assume that the answer to simple yes/no questions is &#x27;</span>yes<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">	 -F format       Specify a format for displaying search results; see the manual.</span></span><br><span class="line"><span class="string">	 -O order        Specify how search results should be sorted; see the manual.</span></span><br><span class="line"><span class="string">	 -w width        Specify the display width for formatting search results.</span></span><br><span class="line"><span class="string">	 -f              Aggressively try to fix broken packages.</span></span><br><span class="line"><span class="string">	 -V              Show which versions of packages are to be installed.</span></span><br><span class="line"><span class="string">	 -D              Show the dependencies of automatically changed packages.</span></span><br><span class="line"><span class="string">	 -Z              Show the change in installed size of each package.</span></span><br><span class="line"><span class="string">	 -v              Display extra information. (may be supplied multiple times).</span></span><br><span class="line"><span class="string">	 -t [release]    Set the release from which packages should be installed.</span></span><br><span class="line"><span class="string">	 -q              In command-line mode, suppress the incremental progress</span></span><br><span class="line"><span class="string">			  indicators.</span></span><br><span class="line"><span class="string">	 -o key=val      Directly set the configuration option named &#x27;</span>key<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">	 --with(out)-recommends     Specify whether or not to treat recommends as</span></span><br><span class="line"><span class="string">				    strong dependencies.</span></span><br><span class="line"><span class="string">	 -S fname        Read the aptitude extended status info from fname.</span></span><br><span class="line"><span class="string">	 -u              Download new package lists on startup.</span></span><br><span class="line"><span class="string">			  (terminal interface only)</span></span><br><span class="line"><span class="string">	 -i              Perform an install run on startup.</span></span><br><span class="line"><span class="string">			  (terminal interface only)</span></span><br><span class="line"><span class="string">synaptic 图形化界面应用管理工具</span></span><br><span class="line"><span class="string">fdisk 管理磁盘分区</span></span><br><span class="line"><span class="string">	 用法：</span></span><br><span class="line"><span class="string">	 fdisk [选项] &lt;磁盘&gt;         更改分区表</span></span><br><span class="line"><span class="string">	 fdisk [选项] -l [&lt;磁盘&gt;]     列出分区表</span></span><br><span class="line"><span class="string">	 显示或操作磁盘分区表。</span></span><br><span class="line"><span class="string">	 选项：</span></span><br><span class="line"><span class="string">	 -b, --sectors-size &lt;大小&gt;     显示扇区计数和大小</span></span><br><span class="line"><span class="string">	 -B, --protect-boot            创建新标签时不要擦除 bootbits</span></span><br><span class="line"><span class="string">	 -c, --compatibility[=&lt;模式&gt;]  模式，为“dos”或“nondos”(默认)</span></span><br><span class="line"><span class="string">	 -L, --color[=&lt;时机&gt;]          彩色输出(auto, always 或 never) 默认启用颜色</span></span><br><span class="line"><span class="string">	 -l, --list                    显示分区并退出</span></span><br><span class="line"><span class="string">	 -o, --output &lt;列表&gt;           输出列</span></span><br><span class="line"><span class="string">	 -t, --type &lt;类型&gt;             只识别指定的分区表类型</span></span><br><span class="line"><span class="string">	 -u, --units[=&lt;单位&gt;]          显示单位，“cylinders”柱面或“sectors”扇区(默认)</span></span><br><span class="line"><span class="string">	 -b, --bytes                   以字节为单位而非易读的格式来打印 SIZE</span></span><br><span class="line"><span class="string">	 -w, --wipe &lt;模式&gt;             擦除签名(auto, always 或 never)</span></span><br><span class="line"><span class="string">	 -W, --wipe-partitions &lt;模式&gt;  擦除新分区的签名(auto, always 或 never)</span></span><br><span class="line"><span class="string">	 -C, --cylinders &lt;数字&gt;        指定柱面数</span></span><br><span class="line"><span class="string">	 -H, --heads &lt;数字&gt;            指定磁头数</span></span><br><span class="line"><span class="string">	 -S, --sectors &lt;数字&gt;          指定每条磁道的扇区数</span></span><br><span class="line"><span class="string">	 -h, --help                    display this help</span></span><br><span class="line"><span class="string">	 -V, --version                 display version</span></span><br><span class="line"><span class="string">mkfs 创建文件分区</span></span><br><span class="line"><span class="string">	mkfs [options] device [size]</span></span><br><span class="line"><span class="string">	主要选项为-t 来指定文件系统类型</span></span><br><span class="line"><span class="string">mk2fs [options] device [fs-size]         创建ext2 ext3 ext4等系统</span></span><br><span class="line"><span class="string">	-b 指定块的大小 可取1024，2048，4096 单位为字节</span></span><br><span class="line"><span class="string">	-c 在创建文件系统之前检查坏的块</span></span><br><span class="line"><span class="string">	-E 指定文件系统的扩展选项</span></span><br><span class="line"><span class="string">	-f 指定磁盘碎片的大小</span></span><br><span class="line"><span class="string">	-g 指定每个块组包含的块的数量，通常无用</span></span><br><span class="line"><span class="string">	-i 指定字节和索引点的比例</span></span><br><span class="line"><span class="string">	-I 指定索引节点的大小</span></span><br><span class="line"><span class="string">	-L 指定新的文件系统的卷标</span></span><br><span class="line"><span class="string">	-m 该值为百分比，用以保留给超级用户，默认%5</span></span><br><span class="line"><span class="string">	-M 记录最后一次挂载的目录</span></span><br><span class="line"><span class="string">	-N 指定要创建的索引节点的数量</span></span><br><span class="line"><span class="string">	-t 指定创建的文件系统的类型  如 ext2，ext3或ext4</span></span><br><span class="line"><span class="string">mkfs.fat 创建一个MS-DOS即 FAT文件系统</span></span><br><span class="line"><span class="string">	mkfs.fat [options] device [block-count]</span></span><br><span class="line"><span class="string">	device为目标分区</span></span><br><span class="line"><span class="string">	block-count 为要创建的系统的块数</span></span><br><span class="line"><span class="string">mkfs.reiser4 创建一个reiser4文件系统</span></span><br><span class="line"><span class="string">	mkfs.reiser4 [options] device [size[k|m|g]]</span></span><br><span class="line"><span class="string">	size 为文件系统的大小</span></span><br><span class="line"><span class="string">mkntfs 创建一个ntfs文件系统</span></span><br><span class="line"><span class="string">	mkntfs [options] device [number-of-selectors]</span></span><br><span class="line"><span class="string">	number-of-selectors 为文件系统的扇区数</span></span><br><span class="line"><span class="string">dmesg	显示或控制内核环形缓冲区。</span></span><br><span class="line"><span class="string">	 选项：</span></span><br><span class="line"><span class="string">	 -C, --clear                 清除内核环形缓冲区(ring butter)</span></span><br><span class="line"><span class="string">	 -c, --read-clear            读取并清除所有消息</span></span><br><span class="line"><span class="string">	 -D, --console-off           禁止向终端打印消息</span></span><br><span class="line"><span class="string">	 -E, --console-on            启用向终端打印消息</span></span><br><span class="line"><span class="string">	 -F, --file &lt;文件&gt;           用 文件 代替内核日志缓冲区</span></span><br><span class="line"><span class="string">	 -f, --facility &lt;列表&gt;       将输出限制为定义的设施</span></span><br><span class="line"><span class="string">	 -H, --human                 易读格式输出</span></span><br><span class="line"><span class="string">	 -k, --kernel                显示内核消息</span></span><br><span class="line"><span class="string">	 -L, --color[=&lt;时机&gt;]        彩色显示消息(auto, always 或 never) 默认启用颜色</span></span><br><span class="line"><span class="string">	 -l, --level &lt;列表&gt;          限制输出级别</span></span><br><span class="line"><span class="string">	 -n, --console-level &lt;级别&gt;  设置打印到终端的消息级别</span></span><br><span class="line"><span class="string">	 -P, --nopager               不将输出通过管道传递给分页程序</span></span><br><span class="line"><span class="string">	 -r, --raw                   打印原生消息缓冲区</span></span><br><span class="line"><span class="string">	 -S, --syslog                强制使用 syslog(2) 而非 /dev/kmsg</span></span><br><span class="line"><span class="string">	 -s, --buffer-size &lt;大小&gt;    查询内核环形缓冲区所用的缓冲区大小</span></span><br><span class="line"><span class="string">	 -u, --userspace             显示用户空间消息</span></span><br><span class="line"><span class="string">	 -w, --follow                等待新消息</span></span><br><span class="line"><span class="string">	 -x, --decode                将设施和级别解码为可读的字符串</span></span><br><span class="line"><span class="string">	 -d, --show-delta            显示打印消息之间的时间差</span></span><br><span class="line"><span class="string">	 -e, --reltime               以易读格式显示本地时间和时间差</span></span><br><span class="line"><span class="string">	 -T, --ctime                 显示易读的时间戳(可能不准确！)</span></span><br><span class="line"><span class="string">	 -t, --notime                不显示任何消息的时间戳</span></span><br><span class="line"><span class="string">	     --time-format &lt;格式&gt;    以指定格式显示时间戳：</span></span><br><span class="line"><span class="string">		[delta|reltime|ctime|notime|iso]</span></span><br><span class="line"><span class="string">	挂起/恢复会使 ctime 和 iso 时间戳不精确。</span></span><br><span class="line"><span class="string">mount  挂载文件系统</span></span><br><span class="line"><span class="string">	 用法：</span></span><br><span class="line"><span class="string">	 mount [-lhV]</span></span><br><span class="line"><span class="string">	 mount -a [选项]</span></span><br><span class="line"><span class="string">	 mount [选项] [--source] &lt;源&gt; | [--target] &lt;目录&gt;</span></span><br><span class="line"><span class="string">	 mount [选项] &lt;源&gt; &lt;目录&gt;</span></span><br><span class="line"><span class="string">	 mount &lt;操作&gt; &lt;挂载点&gt; [&lt;目标&gt;]</span></span><br><span class="line"><span class="string">	 挂载文件系统。</span></span><br><span class="line"><span class="string">	 选项：</span></span><br><span class="line"><span class="string">	 -a, --all               挂载 fstab 中的所有文件系统</span></span><br><span class="line"><span class="string">	 -c, --no-canonicalize   不对路径规范化</span></span><br><span class="line"><span class="string">	 -f, --fake              空运行；跳过 mount(2) 系统调用</span></span><br><span class="line"><span class="string">	 -F, --fork              对每个设备禁用 fork(和 -a 选项一起使用)</span></span><br><span class="line"><span class="string">	 -T, --fstab &lt;路径&gt;      /etc/fstab 的替代文件</span></span><br><span class="line"><span class="string">	 -i, --internal-only     不调用 mount.&lt;type&gt; 辅助程序</span></span><br><span class="line"><span class="string">	 -l, --show-labels       也显示文件系统标签</span></span><br><span class="line"><span class="string">	 -n, --no-mtab           不写 /etc/mtab</span></span><br><span class="line"><span class="string">	 -o, --options &lt;列表&gt;    挂载选项列表，以英文逗号分隔</span></span><br><span class="line"><span class="string">	 -O, --test-opts &lt;列表&gt;  限制文件系统集合(和 -a 选项一起使用)</span></span><br><span class="line"><span class="string">	 -r, --read-only         以只读方式挂载文件系统(同 -o ro)</span></span><br><span class="line"><span class="string">	 -t, --types &lt;列表&gt;      限制文件系统类型集合</span></span><br><span class="line"><span class="string">	     --source &lt;源&gt;       指明源(路径、标签、uuid)</span></span><br><span class="line"><span class="string">	     --target &lt;目标&gt;     指明挂载点</span></span><br><span class="line"><span class="string">	 -v, --verbose           打印当前进行的操作</span></span><br><span class="line"><span class="string">	 -w, --rw, --read-write  以读写方式挂载文件系统(默认)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	 -h, --help              display this help</span></span><br><span class="line"><span class="string">	 -V, --version           display version</span></span><br><span class="line"><span class="string">	 源：</span></span><br><span class="line"><span class="string">	 -L, --label &lt;标签&gt;      同 LABEL=&lt;label&gt;</span></span><br><span class="line"><span class="string">	 -U, --uuid &lt;uuid&gt;       同 UUID=&lt;uuid&gt;</span></span><br><span class="line"><span class="string">	 LABEL=&lt;标签&gt;            按文件系统标签指定设备</span></span><br><span class="line"><span class="string">	 UUID=&lt;uuid&gt;             按文件系统 UUID 指定设备</span></span><br><span class="line"><span class="string">	 PARTLABEL=&lt;标签&gt;        按分区标签指定设备</span></span><br><span class="line"><span class="string">	 PARTUUID=&lt;uuid&gt;         按分区 UUID 指定设备</span></span><br><span class="line"><span class="string">	 &lt;设备&gt;                  按路径指定设备</span></span><br><span class="line"><span class="string">	 &lt;目录&gt;                  绑定式挂载的挂载点(参阅 --bind/rbind)</span></span><br><span class="line"><span class="string">	 &lt;文件&gt;                  用于设置回环设备的常规文件</span></span><br><span class="line"><span class="string">umount 卸载文件系统</span></span><br><span class="line"><span class="string">	 用法：</span></span><br><span class="line"><span class="string">	 umount [-hV]</span></span><br><span class="line"><span class="string">	 umount -a [选项]</span></span><br><span class="line"><span class="string">	 umount [选项] &lt;源&gt; | &lt;目录&gt;</span></span><br><span class="line"><span class="string">	 卸载文件系统:</span></span><br><span class="line"><span class="string">	 选项：</span></span><br><span class="line"><span class="string">	 -a, --all               卸载所有文件系统</span></span><br><span class="line"><span class="string">	 -A, --all-targets       卸载当前名字空间内指定设备</span></span><br><span class="line"><span class="string">				 对应的所有挂臷点</span></span><br><span class="line"><span class="string">	 -c, --no-canonicalize   不对路径规范化</span></span><br><span class="line"><span class="string">	 -d, --detach-loop       若挂臷了回环设备，也释放该回环设备</span></span><br><span class="line"><span class="string">	     --fake              空运行；跳过 umount(2) 系统调用</span></span><br><span class="line"><span class="string">	 -f, --force             强制卸载(遇到不响应的 NFS 系统时)</span></span><br><span class="line"><span class="string">	 -i, --internal-only     不调用 umount.&lt;类型&gt; 辅助程序</span></span><br><span class="line"><span class="string">	 -n, --no-mtab           不写 /etc/mtab</span></span><br><span class="line"><span class="string">	 -l, --lazy              立即断开文件系统，清理以后执行，占用的仍可以使用，不占用时自动卸载</span></span><br><span class="line"><span class="string">	 -O, --test-opts &lt;列表&gt;  限制文件系统集合(和 -a 选项一起使用)</span></span><br><span class="line"><span class="string">	 -R, --recursive         递归卸载目录及其子对象</span></span><br><span class="line"><span class="string">	 -r, --read-only         若卸载失败，尝试以只读方式重新挂臷</span></span><br><span class="line"><span class="string">	 -t, --types &lt;列表&gt;      限制文件系统集合</span></span><br><span class="line"><span class="string">	 -v, --verbose           打印当前进行的操作</span></span><br><span class="line"><span class="string">findmnt 列出挂载系统和类型</span></span><br><span class="line"><span class="string">	 用法：</span></span><br><span class="line"><span class="string">	 findmnt [选项]</span></span><br><span class="line"><span class="string">	 findmnt [选项] &lt;设备&gt; | &lt;挂臷点&gt;</span></span><br><span class="line"><span class="string">	 findmnt [选项] &lt;设备&gt; &lt;挂臷点&gt;</span></span><br><span class="line"><span class="string">	 findmnt [选项] [--source &lt;设备&gt;] [--target &lt;挂臷点&gt;]</span></span><br><span class="line"><span class="string">	 查找(挂载的)文件系统。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	 选项：</span></span><br><span class="line"><span class="string">	 -s, --fstab            在文件系统表态表中搜索</span></span><br><span class="line"><span class="string">	 -m, --mtab             search in table of mounted filesystems (includes user space mount options)</span></span><br><span class="line"><span class="string">	 -k, --kernel           在已挂载文件系统的内核表中搜索 (默认)</span></span><br><span class="line"><span class="string">	 -p, --poll[=&lt;列表&gt;]    监测已挂臷文件系统表的改变</span></span><br><span class="line"><span class="string">	 -w, --timeout &lt;数字&gt;   --poll 阻塞的时间上限(毫秒)</span></span><br><span class="line"><span class="string">	 -A, --all              禁用所有内置过滤器，打印所有文件系统</span></span><br><span class="line"><span class="string">	 -a, --ascii            用 ASCII 字符格式化树</span></span><br><span class="line"><span class="string">	 -b, --bytes           以字节为单位而非易读的格式来打印大小</span></span><br><span class="line"><span class="string">	 -c, --no-canonicalize  在比较路径时不对路径规范化</span></span><br><span class="line"><span class="string">	 -c, --no-canonicalize  对打印的路径规范化</span></span><br><span class="line"><span class="string">	 -D, --df               仿照 df(1) 输出</span></span><br><span class="line"><span class="string">	 -d, --direction &lt;单词&gt; 搜索方向，“forward”(往前)或“backward”(往回)</span></span><br><span class="line"><span class="string">	 -e, --evaluate         将标签(LABEL,UUID,PARTUUID,PARTLABEL) 转换为 设备名</span></span><br><span class="line"><span class="string">	 -F, --tab-file &lt;路径&gt;  -s, -m 或 -k 选项的替代文件</span></span><br><span class="line"><span class="string">	 -f, --first-only       只打印找到的第一个文件系统</span></span><br><span class="line"><span class="string">	 -i, --invert           反转搜索的匹配</span></span><br><span class="line"><span class="string">	 -J, --json              使用 JSON 输出格式</span></span><br><span class="line"><span class="string">	 -l, --list             使用列表格式的输出</span></span><br><span class="line"><span class="string">	 -N, --task &lt;tid&gt;       使用替代的名字空间(/proc/&lt;tid&gt;/mountinfo 文件)</span></span><br><span class="line"><span class="string">	 -n, --noheadings       不打印列标题</span></span><br><span class="line"><span class="string">	 -O, --options &lt;列表&gt;   根据挂臷选项限制文件系统集合</span></span><br><span class="line"><span class="string">	 -o, --output &lt;列表&gt;    要显示的列</span></span><br><span class="line"><span class="string">	 -P, --pairs            使用 键=“值”的输出格式</span></span><br><span class="line"><span class="string">	 -R, --submounts        打印匹配文件系统的所有子挂载(submount)</span></span><br><span class="line"><span class="string">	 -r, --raw              使用原生输出格式</span></span><br><span class="line"><span class="string">	 -S, --source &lt;字符串&gt;  要挂载的设备(按 名称, 主:次设备号,  LABEL=, UUID=, PARTUUID=, PARTLABEL=)</span></span><br><span class="line"><span class="string">	 -T, --target &lt;路径&gt;    要使用的文件系统的路径</span></span><br><span class="line"><span class="string">	     --tree             enable tree format output is possible</span></span><br><span class="line"><span class="string">	 -M, --mountpoint &lt;目录&gt; 挂载点目录</span></span><br><span class="line"><span class="string">	 -t, --types &lt;列表&gt;     根据文件系统类型限制文件系统集合</span></span><br><span class="line"><span class="string">	 -U, --uniq             忽略目标重复的文件系统</span></span><br><span class="line"><span class="string">	 -u, --notruncate       不截断列中的文本</span></span><br><span class="line"><span class="string">	 -v, --nofsroot         对绑定式或 btrfs 挂载不打印[/dir]</span></span><br><span class="line"><span class="string">	 -x, --verify           验证挂载表内容(默认为 fstab)</span></span><br><span class="line"><span class="string">	     --verbose          打印更多细节</span></span><br><span class="line"><span class="string">lsof  查看文件的进程信息</span></span><br><span class="line"><span class="string">	-a	列出打开文件存在的进程</span></span><br><span class="line"><span class="string">	-c &lt;进程名&gt;	列出指定进程所打开的文件</span></span><br><span class="line"><span class="string">	-g	列出GID号进程详情</span></span><br><span class="line"><span class="string">	-d &lt;文件号&gt;	列出占用该文件号的进程</span></span><br><span class="line"><span class="string">	+d &lt;目录&gt;	列出目录下被打开的文件</span></span><br><span class="line"><span class="string">	+D &lt;目录&gt;	递归列出目录下被打开的文件</span></span><br><span class="line"><span class="string">	-n &lt;目录&gt;	列出使用NFS的文件</span></span><br><span class="line"><span class="string">	-i &lt;条件&gt;	列出符合条件的进程</span></span><br><span class="line"><span class="string">	-p &lt;进程号&gt;	列出指定进程号所打开的文件</span></span><br><span class="line"><span class="string">	-u	列出UID号进程详情</span></span><br><span class="line"><span class="string">fuser 用文件结构识别进程</span></span><br><span class="line"><span class="string">	尾字符含义</span></span><br><span class="line"><span class="string">		c  ：指示进程的工作目录。</span></span><br><span class="line"><span class="string">		e  ：指示该文件为进程的可执行文件(即进程由该文件拉起)。</span></span><br><span class="line"><span class="string">		f  ：指示该文件被进程打开，默认情况下f字符不显示。</span></span><br><span class="line"><span class="string">		F  ：指示该文件被进程打开进行写入，默认情况下F字符不显示。</span></span><br><span class="line"><span class="string">		r  ：指示该目录为进程的根目录。</span></span><br><span class="line"><span class="string">		m  ：指示进程使用该文件进行内存映射，抑或该文件为共享库文件，被进程映射进内存</span></span><br><span class="line"><span class="string">	options </span></span><br><span class="line"><span class="string">		-a	显示命令行中指定的所有文件</span></span><br><span class="line"><span class="string">		-k	杀死访问指定文件的所有进程</span></span><br><span class="line"><span class="string">		-i	杀死进程前需要用户进行确认</span></span><br><span class="line"><span class="string">		-l	列出所有已知信号名</span></span><br><span class="line"><span class="string">		-m	指定一个被加载的文件系统或一个被加载的块设备</span></span><br><span class="line"><span class="string">		-n	选择不同的名称空间</span></span><br><span class="line"><span class="string">		-u	在每个进程后显示所属的用户名</span></span><br><span class="line"><span class="string">fsck 修复多种文件系统 同样可以使用多种符号链接</span></span><br><span class="line"><span class="string">	语法格式：fsck [参数] [文件系统]</span></span><br><span class="line"><span class="string">	常用参数：</span></span><br><span class="line"><span class="string">	-a	自动修复文件系统，不询问任何问题</span></span><br><span class="line"><span class="string">	-A	依照/etc/fstab配置文件的内容，检查文件内所列的全部文件系统</span></span><br><span class="line"><span class="string">	-N	不执行指令，仅列出实际执行会进行的动作</span></span><br><span class="line"><span class="string">	-P	当搭配”-A”参数使用时，则会同时检查所有的文件系统</span></span><br><span class="line"><span class="string">	-r	采用互动模式，在执行修复时询问问题，让用户得以确认并决定处理方式</span></span><br><span class="line"><span class="string">	-R	当搭配”-A”参数使用时，则会略过/目录的文件系统不予检查</span></span><br><span class="line"><span class="string">	-t	指定要检查的文件系统类型</span></span><br><span class="line"><span class="string">	-T	执行fsck指令时，不显示标题信息</span></span><br><span class="line"><span class="string">	-V	显示指令执行过程</span></span><br><span class="line"><span class="string">e2fsck 主要针对修复ext2/3/4文件系统</span></span><br><span class="line"><span class="string">	常用参数：</span></span><br><span class="line"><span class="string">	device	预备检查的硬盘 partition，例如：/dev/sda1</span></span><br><span class="line"><span class="string">	-b	设定存放 superblock 的位置</span></span><br><span class="line"><span class="string">	-B	设定单位 block 的大小</span></span><br><span class="line"><span class="string">	-c	检查该partition 是否有坏轨</span></span><br><span class="line"><span class="string">	-C file 	将检查的结果存到 file 中以便查看</span></span><br><span class="line"><span class="string">	-d	列印 e2fsck 的 debug 结果</span></span><br><span class="line"><span class="string">	-f	强制检查</span></span><br><span class="line"><span class="string">	-F	在开始检查前，将device 的 buffer cache 清空，避免有错误发生</span></span><br><span class="line"><span class="string">	-l bad_blocks_file	将有坏轨的block资料加到 bad_blocks_file 里面</span></span><br><span class="line"><span class="string">	-L bad_blocks_file	设定坏轨的block资料存到 bad_blocks_file 里面，若无该档则自动产生</span></span><br><span class="line"><span class="string">	-n	将档案系统以[唯读]方式开启</span></span><br><span class="line"><span class="string">	-p	对 partition 做检查，若有问题便自动修复</span></span><br><span class="line"><span class="string">	-v 	详细显示模式</span></span><br><span class="line"><span class="string">	-V	显示出目前 e2fsck 的版本</span></span><br><span class="line"><span class="string">	-y	预先设定所有检查时的问题均回答[是]</span></span><br><span class="line"><span class="string">mdadm  创建和管理磁盘阵列</span></span><br><span class="line"><span class="string">	见图片</span></span><br><span class="line"><span class="string">逻辑卷管理需要安装lvm2</span></span><br><span class="line"><span class="string">pvcreate 创建物理卷    接收设备名作为参数</span></span><br><span class="line"><span class="string">	-u 指定设备的UUID</span></span><br><span class="line"><span class="string">	后可以接多个 物理分区</span></span><br><span class="line"><span class="string">pvscan  pvdisplay 展示物理卷，后者更详细</span></span><br><span class="line"><span class="string">lvcreate 创建逻辑卷</span></span><br><span class="line"><span class="string">	-L	指定逻辑卷的大小，单位为“kKmMgGtT”字节</span></span><br><span class="line"><span class="string">	-l	指定逻辑卷的大小（LE数）</span></span><br><span class="line"><span class="string">	-a 创建完成后立即激活该卷</span></span><br><span class="line"><span class="string">	-p 指定访问权限   可以是rw或r</span></span><br><span class="line"><span class="string">	-i 指定要创建的条带数</span></span><br><span class="line"><span class="string">	-I 指定条带的大小</span></span><br><span class="line"><span class="string">vgcreate 创建卷组</span></span><br><span class="line"><span class="string">	[options] volumegroupname physcialdevicepath....</span></span><br><span class="line"><span class="string">	volumegroupname 卷组名称</span></span><br><span class="line"><span class="string">	physcialdevicepath 要加入卷组的物理卷列表</span></span><br><span class="line"><span class="string">vgdisplay 查看卷组 </span></span><br><span class="line"><span class="string">lvextend 扩展逻辑卷</span></span><br><span class="line"><span class="string">	-L	指定逻辑卷的大小，单位为“kKmMgGtT”字节</span></span><br><span class="line"><span class="string">	-l	指定逻辑卷的大小（LE数）</span></span><br><span class="line"><span class="string">	-i 指定要创建的条带数</span></span><br><span class="line"><span class="string">	-I 指定条带的大小</span></span><br><span class="line"><span class="string">	-r 同时扩展文件系统的大小</span></span><br><span class="line"><span class="string">	扩展后要显示出来需要使用resize2fs 卷名</span></span><br><span class="line"><span class="string">resize2fs 调整文件系统大小</span></span><br><span class="line"><span class="string">	resize2fs 卷名 大小</span></span><br><span class="line"><span class="string">lvreduce 类似于lvextend</span></span><br><span class="line"><span class="string">lshw 查看硬件信息</span></span><br><span class="line"><span class="string">	lshw是一个能把我们显示硬件信息的小工具，它能为我们提供内存配置、固件版本、主板配置信息、CPU版本和速度、cache信息、总线速度等。</span></span><br><span class="line"><span class="string">	语法格式：lshw [参数]</span></span><br><span class="line"><span class="string">	常用参数：</span></span><br><span class="line"><span class="string">	-short	显示设备列表，输出包括设备路径(path)、类别(class)以及简单描述</span></span><br><span class="line"><span class="string">	-businfo	显示设备列表，输出包括总线信息、SCSI、USB、IDE、PCI地址等</span></span><br><span class="line"><span class="string">	-C memory	显示内存相关的硬件</span></span><br><span class="line"><span class="string">	usage: lshw [-format] [-options ...]</span></span><br><span class="line"><span class="string">	format can be</span></span><br><span class="line"><span class="string">		-html           output hardware tree as HTML</span></span><br><span class="line"><span class="string">		-xml            output hardware tree as XML</span></span><br><span class="line"><span class="string">		-json           output hardware tree as a JSON object</span></span><br><span class="line"><span class="string">		-short          output hardware paths</span></span><br><span class="line"><span class="string">		-businfo        output bus information</span></span><br><span class="line"><span class="string">	options can be</span></span><br><span class="line"><span class="string">		-class CLASS    only show a certain class of hardware</span></span><br><span class="line"><span class="string">		-C CLASS        same as &#x27;</span>-class CLASS<span class="string">&#x27;</span></span><br><span class="line"><span class="string">		-c CLASS        same as &#x27;</span>-class CLASS<span class="string">&#x27;</span></span><br><span class="line"><span class="string">		-disable TEST   disable a test (like pci, isapnp, cpuid, etc. )</span></span><br><span class="line"><span class="string">		-enable TEST    enable a test (like pci, isapnp, cpuid, etc. )</span></span><br><span class="line"><span class="string">		-quiet          don&#x27;</span>t display status</span><br><span class="line">		-sanitize       sanitize output (remove sensitive information like serial numbers, etc.)</span><br><span class="line">		-numeric        output numeric IDs (<span class="keyword">for</span> PCI, USB, etc.)</span><br><span class="line">		-notime         exclude volatile attributes (timestamps) from output</span><br><span class="line">ifconfig 查看网络接口</span><br><span class="line">	语法格式：ifconfig interface [aftype] [options] | address</span><br><span class="line">	aftype 表示地址类型 inet inet6 ddp;</span><br><span class="line">	address 为指派给网络接口的ip地址</span><br><span class="line">	常用参数：</span><br><span class="line">	-a 显示所有网络接口包括被禁用的</span><br><span class="line">	netmask 指定当前网络的子网掩码</span><br><span class="line">	-broadcast 指定网络接口的广播地址 </span><br><span class="line">	add&lt;地址&gt;	设置网络设备IPv6的IP地址</span><br><span class="line">	del&lt;地址&gt;	删除网络设备IPv6的IP地址</span><br><span class="line">	down	关闭指定的网络设备</span><br><span class="line">	up	启动指定的网络设备</span><br><span class="line">	IP地址	指定网络设备的IP地址</span><br><span class="line">	接口命名规则</span><br><span class="line">		en eth 表示以太网</span><br><span class="line">		<span class="built_in">fc</span> 表示光纤网络</span><br><span class="line">		ge 表示千兆以太网络</span><br><span class="line">		xe 表示万兆以太网络</span><br><span class="line">	示例</span><br><span class="line">		enp0s8</span><br><span class="line">		其中en为以太网，p表示网卡的位置，s表示网卡所处的槽位，数字表示序号</span><br><span class="line">	ifconfig interface ip netmask netmask 设置临时IP地址</span><br><span class="line">		ifconfig eth1 10.0.3.16 netmask 255.255.255.0</span><br><span class="line">		将eth1的IP设为10.0.3.16，子网掩码设为255.255.255.0</span><br><span class="line">		此时要通信还需指定网关</span><br><span class="line">		sudo route add default gw 10.0.3.1 eth1    将eth1默认网关设为10.0.3.1</span><br><span class="line">		sudo ip addr flush eth1    不保存接口的ip地址</span><br><span class="line">ip 网络管理工具</span><br><span class="line">	ip [options] [object] (<span class="built_in">command</span>)</span><br><span class="line">	options</span><br><span class="line">		-h 输出可读的信息</span><br><span class="line">		-f 指定协议族</span><br><span class="line">			inet </span><br><span class="line">			inet6</span><br><span class="line">			bridge</span><br><span class="line">			ipx</span><br><span class="line">			dnet</span><br><span class="line">			若没有指定协议族，ip会从其他协议判断，如果判断不了，默认为inet</span><br><span class="line">		-4 指定协议族为inet4 IPV4</span><br><span class="line">		-6 指定协议族为inet6 IPV6</span><br><span class="line">		-B 指定协议族为bridge 即为桥接</span><br><span class="line">		-D 指定协议族为decent</span><br><span class="line">		-I 指定协议族为IPX 即IPX协议</span><br><span class="line">		-s 显示详细信息</span><br><span class="line">	object 操作对象</span><br><span class="line">		address:IPV4或者IPV6地址  (通常缩写为a、add或addr)</span><br><span class="line">			sudo ip address add 192.168.125.1/24 dev enp0s3   为网络接口新加一个IP地址</span><br><span class="line">				IP采用CIDR表示法，前面为地址，后面为二进制子网掩码中1的个数</span><br><span class="line">			sudo ip addr delete 192.168.125.1/24 dev enp0s3 删除指定网络接口的IP地址</span><br><span class="line">			show dev enp0s3 显示指定网络接口的IP地址信息</span><br><span class="line">			ip addr ls enp0s3 和 ip addr ls dev enp0s3 也可均显示指定网络接口的IP地址信息</span><br><span class="line">				用list(缩写为ls)代替show</span><br><span class="line">			ip -4 addr flush enp0s3  清除某个网络接口的IP地址</span><br><span class="line">		l2tp: L2TP隧道协议</span><br><span class="line">		link: 网络设备</span><br><span class="line">			list 列出所有的网络设备</span><br><span class="line">			<span class="built_in">set</span> interface up/down 启用禁用网络设备</span><br><span class="line">			<span class="built_in">set</span> dev enp0s3 mtu 1600 将网络接口enp0s3的MTU值设为1600，   其中dev表示网络接口</span><br><span class="line">			<span class="built_in">set</span> dev enp0s3 address 08:00:27:58:3d:f7   将接口enp0s3的MAC地址设为08:00:27:58:3d:f7	</span><br><span class="line">		maddress: 多播地址</span><br><span class="line">		route: 路由表（可以缩写为，r或者ro）</span><br><span class="line">			show  显示出main 路由表的信息</span><br><span class="line">				table 显示其它路由表的路由记录</span><br><span class="line">			sudo ip route del default 删除一条默认路由</span><br><span class="line">			ip route list 显示路由表信息</span><br><span class="line">			ip route add default via 192.168.1.1 dev enp0s8  添加一条缺省路由</span><br><span class="line">			ip route get IP  获取通向某个路由器地址的信息</span><br><span class="line">		rule: 路由策略</span><br><span class="line">			list 列出当前的所有路由策略</span><br><span class="line">				0是最高规则</span><br><span class="line">			sudo ip route add default via 192.168.0.1 dev enp0s3 table localnet 在路由表localnet中增加一条默认路由</span><br><span class="line">			sudo ip rule add from 192.168.1.0/24 table localnet  指定来自该IP的数据包都通过路由表localnet路由</span><br><span class="line">			sudo ip rule del from 192.168.1.0/24 table localnet  将路由规则从路由表中删除</span><br><span class="line">		tunnel: 隧道</span><br><span class="line">route 显示和管理路由表</span><br><span class="line">	语法格式：route [参数]</span><br><span class="line">	常用参数：</span><br><span class="line">	-A	设置地址类型（ 默认IPv4）</span><br><span class="line">	-C	打印linux核心的路由缓存</span><br><span class="line">	-v	详细信息模式</span><br><span class="line">	-n	不执行DNS反向查找，直接显示数字形式的ip地址</span><br><span class="line">	-e	netstat格式显示路由表</span><br><span class="line">	-net	到一个网络的路由表</span><br><span class="line">	-host	到一个主机的路由表</span><br><span class="line">	netmask 指定目标网络的子网掩码</span><br><span class="line">	Add	增加指定的路由记录</span><br><span class="line">	Del	删除指定的路由记录</span><br><span class="line">	Target	目的网络或目的主机</span><br><span class="line">	gw	设置默认网关</span><br><span class="line">	mss	设置TCP的最大区块长度（MSS），单位MB</span><br><span class="line">	window	指定通过路由表的TCP连接的TCP窗口大小</span><br><span class="line">	dev	路由记录所表示的网络接口</span><br><span class="line">netstat 查看网络信息</span><br><span class="line">	-a 显示所有处于活动状态的套接字</span><br><span class="line">		协议:未读取的套接字中的数据:远程主机未获取的套接字中的数据:本地地址和端口号:</span><br><span class="line">		远程地址和端口号:套接字状态</span><br><span class="line">			状态可以是ESTABLISHED,TIME_WAIT,CLOSE,LISTEN </span><br><span class="line">			连接已建立 已关闭等待处理完数据 已关闭 正在监听进入的连接请求</span><br><span class="line">	-A 显示指定协议族的网络连接信息</span><br><span class="line">	-c 持续输出网络状态信息，刷新频率为一秒</span><br><span class="line">	-e 显示更加详细的信息</span><br><span class="line">	-i 列出所有的网络接口</span><br><span class="line">	-l 列出处于监听状态的套接字</span><br><span class="line">	-n 直接显示IP地址</span><br><span class="line">	-p 显示使用套接字的进程id和程序名称</span><br><span class="line">	-r 显示路由表信息</span><br><span class="line">	-s 显示每个协议的统计信息</span><br><span class="line">	-t 显示TCP/IP协议的连接信息</span><br><span class="line">	-u 显示UDP协议的连接信息</span><br><span class="line">nslookup 查询域名信息</span><br><span class="line">	nslookup [name | -] [server]</span><br><span class="line">	name 表示域名</span><br><span class="line">	sever lserver 指定要使用的域名服务器</span><br><span class="line">	<span class="built_in">set</span> 指定查询记录类型</span><br><span class="line">	<span class="built_in">set</span> <span class="built_in">type</span>==a; server 8.8.8.8</span><br><span class="line">ping [options] destination</span><br><span class="line">	常用参数：</span><br><span class="line">	-4	仅使用IPV4</span><br><span class="line">	-6	仅使用IPV6</span><br><span class="line">	-d	使用Socket的SO_DEBUG功能</span><br><span class="line">	-c	指定发送报文的次数</span><br><span class="line">	-i	指定收发信息的间隔时间</span><br><span class="line">	-I	使用指定的网络接口送出数据包</span><br><span class="line">	-l	设置在送出要求信息之前，先行发出的数据包</span><br><span class="line">	-n	只输出数值</span><br><span class="line">	-p	设置填满数据包的范本样式</span><br><span class="line">	-q	不显示指令执行过程</span><br><span class="line">	-R	记录路由过程</span><br><span class="line">	-s	设置数据包的大小</span><br><span class="line">	-t	设置存活数值TTL的大小</span><br><span class="line">ufw 防火墙管理工具</span><br><span class="line">	ufw [option] <span class="built_in">command</span></span><br><span class="line">	<span class="built_in">command</span></span><br><span class="line">		<span class="built_in">enable</span>	启动ufw</span><br><span class="line">		<span class="built_in">disable</span>	关闭ufw</span><br><span class="line">		reload	重新加载ufw</span><br><span class="line">		default 修改默认策略，可指定</span><br><span class="line">			allow reject deny 三个参数</span><br><span class="line">			指定数据包方向为incoming,outgoing,routed</span><br><span class="line">		logging on|off|LEVEL	日志 启动|关闭|级别</span><br><span class="line">		reset	重置配置</span><br><span class="line">		status	查看状态</span><br><span class="line">		show REPORT	显示“报告”</span><br><span class="line">		reset 将防火墙配置恢复到初始状态</span><br><span class="line">		status 显示防火墙状态</span><br><span class="line">		show 显示防火墙信息</span><br><span class="line">		allow 允许添加通信的规则  还可以直接允许某个服务</span><br><span class="line">		deny 添加禁止通信的规则</span><br><span class="line">		reject 添加拒绝通信的规则</span><br><span class="line">		<span class="built_in">limit</span> 添加限制规则</span><br><span class="line">		delete 删除指定的规则</span><br><span class="line">		insert 在指定位置添加规则</span><br><span class="line">			sudo ufw insert 1 allow 80 在第一行之前插入一条规则允许访问80端口</span><br><span class="line">		app list 列出使用防火墙的应用系统</span><br><span class="line">		app info 查看应用系统的信息</span><br><span class="line">		app update 更新应用系统的信息</span><br><span class="line">		app default 指定应用系统默认的规则</span><br><span class="line">	示例</span><br><span class="line">		sudo ufw allow proto tcp from 192.168.0.2 to any port 22 </span><br><span class="line">			proto表示协议 from指定来源地址 to指定被访问的IP或端口，这里使用any表示本机所有IP地址的22端口</span><br><span class="line">		sudo ufw allow from 192.168.0.2/24 to any app mysql允许任何来自192.168.0.2/24的主机访问mysql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
